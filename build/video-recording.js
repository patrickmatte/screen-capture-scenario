!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(e,t,r){"use strict";function n(e,t=1){var r=Math.pow(10,t);return Math.round(e*r)/r}function o(e){return n(e,2)}function u(e){return n(e,3)}function a(e,t,r,n){t||(t=","),isNaN(r)&&(r=0),n||(n="0");var o=e%1,u=Math.floor(e).toString(),a=u.length;if(0!=r&&r>a){r-=a;for(var c=n||"0";r--;)u=c+u}if(null!=t&&u.length>3){for(var i=Math.floor(u.length/3),s=u.length%3,l=u.split(""),d=-1;++d<i;)l.splice(s+4*d,0,t);0==s&&l.shift(),u=l.join("")}return 0!=o&&(u+=o.toString().substr(1)),u}function c(e){if(e>=10&&e<=20)return"th";if(0==e)return"";switch(e%10){case 3:return"rd";case 2:return"nd";case 1:return"st";default:return"th"}}function i(e){return e<10?"0"+e:e.toString()}function s(e,t,r){return e+r*(t-e)}function l(e,t){return Math.floor(e+Math.random()*(t-e+1))}r.d(t,"h",(function(){return n})),r.d(t,"f",(function(){return o})),r.d(t,"g",(function(){return u})),r.d(t,"b",(function(){return a})),r.d(t,"c",(function(){return c})),r.d(t,"a",(function(){return i})),r.d(t,"d",(function(){return s})),r.d(t,"e",(function(){return l}))},function(e,t,r){"use strict";function n(e,t,r=""){chrome.runtime.sendMessage({txt:"scrollCaptureTrackEvent",category:e,action:t,label:r})}function o(e){chrome.runtime.sendMessage({txt:"scrollCaptureTrackPage",path:e})}r.d(t,"a",(function(){return n})),r.d(t,"b",(function(){return o}))},,,,,,function(e,t,r){e.exports=r(10)},,,function(e,t,r){"use strict";r.r(t);var n=r(0);function o(e){let t=e.getHours(),r=t>=12?"pm":"am";return t%=12,t=t||12,{hours:t,minutes:Object(n.a)(e.getMinutes()),seconds:Object(n.a)(e.getSeconds()),ampm:r}}var u=r(1);chrome.storage.local.get(["json"],e=>{let t,r="Dark";if(e&&e.json){let t=JSON.parse(e.json);t.settings&&(r=t.settings.colorThemes)}switch(r){case"Dark":case"Light":t="Light"==r;break;default:t=!window.matchMedia("(prefers-color-scheme: dark)").matches}document.body.querySelector(".sc-default").setAttribute("data-theme-light",t)}),window.addEventListener("resize",()=>{c()}),chrome.runtime.onMessage.addListener((e,t,r)=>{switch(e.txt){case"scrollCaptureColorTheme":document.body.querySelector(".sc-default").setAttribute("data-theme-light",e.isColorThemeLight);break;case"scrollCaptureUpdateVideo":chrome.runtime.getBackgroundPage(e=>{if(e.videoURL){a.src=e.videoURL;let t=new Date,r=o(t),c={year:t.getFullYear(),month:Object(n.a)(t.getMonth()+1),date:Object(n.a)(t.getDate())};r.ampm=r.ampm.toUpperCase();let i=`Scroll Capture ${c.year}-${c.month}-${c.date} at ${r.hours}.${r.minutes}.${r.seconds} ${r.ampm}.webm`,s=document.querySelectorAll("a.sc-download-button");for(let t=0;t<s.length;t++){let r=s[t];r.href=e.videoURL,r.download=i,r.addEventListener("click",()=>{Object(u.a)("download","click")})}document.querySelector(".sc-video-filename a.sc-download-button").textContent=i}});break;case"scrollCaptureUnloadVideo":a.pause();break;case"scrollCaptureShowVideo":c()}});let a=document.querySelector(".sc-video-player");function c(){chrome.runtime.getBackgroundPage(e=>{let t={txt:"scrollCaptureVideoHeight",height:document.body.scrollHeight};chrome.tabs.sendMessage(e.tabId,t)})}a.setAttribute("muted","true"),a.setAttribute("autoplay","true"),a.setAttribute("playsinline","true"),a.setAttribute("controls","1"),a.addEventListener("canplay",()=>{c()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,