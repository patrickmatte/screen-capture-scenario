!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){"use strict";function n(t,e=1){var i=Math.pow(10,e);return Math.round(t*i)/i}function r(t){return n(t,2)}function a(t){return n(t,3)}function s(t,e,i,n){e||(e=","),isNaN(i)&&(i=0),n||(n="0");var r=t%1,a=Math.floor(t).toString(),s=a.length;if(0!=i&&i>s){i-=s;for(var o=n||"0";i--;)a=o+a}if(null!=e&&a.length>3){for(var l=Math.floor(a.length/3),c=a.length%3,h=a.split(""),u=-1;++u<l;)h.splice(c+4*u,0,e);0==c&&h.shift(),a=h.join("")}return 0!=r&&(a+=r.toString().substr(1)),a}function o(t){if(t>=10&&t<=20)return"th";if(0==t)return"";switch(t%10){case 3:return"rd";case 2:return"nd";case 1:return"st";default:return"th"}}function l(t){return t<10?"0"+t:t.toString()}function c(t,e,i){return t+i*(e-t)}function h(t,e){return Math.floor(t+Math.random()*(e-t+1))}i.d(e,"h",(function(){return n})),i.d(e,"f",(function(){return r})),i.d(e,"g",(function(){return a})),i.d(e,"b",(function(){return s})),i.d(e,"c",(function(){return o})),i.d(e,"a",(function(){return l})),i.d(e,"d",(function(){return c})),i.d(e,"e",(function(){return h}))},function(t,e,i){"use strict";function n(t,e,i=""){chrome.runtime.sendMessage({txt:"scrollCaptureTrackEvent",category:t,action:e,label:i})}function r(t){chrome.runtime.sendMessage({txt:"scrollCaptureTrackPage",path:t})}i.d(e,"a",(function(){return n})),i.d(e,"b",(function(){return r}))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return transformLiterals}));let supportsTemplateLiterals=!1;try{eval("`foo`"),supportsTemplateLiterals=!0}catch(t){}function transformLiterals(t){if(!supportsTemplateLiterals){let e=t.split("`").join("").split("${"),i=[];for(let t=0;t<e.length;t++){let n=e[t];if(-1==n.indexOf("}"))n&&(n="'"+n+"'",i.push(n));else{let t=n.split("}");for(let e=0;e<t.length;e++){let n=t[e];n&&(e>0&&(n="'"+n+"'"),i.push(n))}}}t=i.join(" + ")}return t}},function(t,e,i){i(4),t.exports=i(5)},function(t,e,i){"use strict";i.r(e),i.d(e,"app",(function(){return wu})),i.d(e,"default",(function(){return bu}));var n=i(1),r=i(0);class a{constructor(t=0,e=0){this.x=t,this.y=e}static lerp(t,e,i){return new a(Object(r.d)(t.x,e.x,i),Object(r.d)(t.y,e.y,i))}static distance(t,e=new a){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))}static polar(t,e){return new a(t*Math.cos(e),t*Math.sin(e))}static getAngle(t,e=new a){return Math.atan2(t.y-e.y,t.x-e.x)}static random(){return new a(Math.random(),Math.random())}static rotate(t,e){let i=Math.cos(e)*t.x-Math.sin(e)*t.y,n=Math.sin(e)*t.x+Math.cos(e)*t.y;t.x=i,t.y=n}add(t){return new a(this.x+t.x,this.y+t.y)}get magnitude(){return a.distance(this)}abs(){return new a(Math.abs(this.x),Math.abs(this.y))}clamp(t,e,i,n){this.clampX(t,e),this.clampY(i,n)}clampX(t,e){this.x=Math.max(this.x,t),this.x=Math.min(this.x,e)}clampY(t,e){this.y=Math.max(this.y,t),this.y=Math.min(this.y,e)}copyFrom(t){this.x=t.x,this.y=t.y}clone(){return new a(this.x,this.y)}equals(t){return this.x==t.x&&this.y==t.y}divide(t){return new a(this.x/t.x,this.y/t.y)}divideScalar(t){return new a(this.x/t,this.y/t)}multiply(t){return new a(this.x*t.x,this.y*t.y)}multiplyScalar(t){return new a(this.x*t,this.y*t)}set(t,e){this.x=t,this.y=e}subtract(t){return new a(this.x-t.x,this.y-t.y)}serialize(){return{x:this.x,y:this.y}}deserialize(t){this.copyFrom(t)}toString(){return"[Point x="+this.x+" y="+this.y+"]"}}class s{constructor(t=0,e=0,i=0,n=0){this._position=new a,this._size=new a,this.center=new a,this.halfSize=new a,this.x=t,this.y=e,this.width=i,this.height=n}get x(){return this.position.x}set x(t){this.position.x=t,this.center.x=this.position.x+this.halfSize.x}get y(){return this.position.y}set y(t){this.position.y=t,this.center.y=this.position.y+this.halfSize.y}get width(){return this.size.x}set width(t){this.size.x=t,this.halfSize.x=t/2,this.center.x=this.position.x+this.halfSize.x}get height(){return this.size.y}set height(t){this.size.y=t,this.halfSize.y=t/2,this.center.y=this.position.y+this.halfSize.y}contains(t){return t.x>=this.x&&t.x<=this.x+this.width&&t.y>=this.y&&t.y<=this.y+this.height}intersects(t){return t.x+t.width>this.x&&t.y+t.height>this.y&&t.x<this.x+this.width&&t.y<this.y+this.height}intersect(t){let e,i=this,n=Math.max(i.x,t.x),r=Math.min(i.x+i.width,t.x+t.width),a=Math.max(i.y,t.y),o=Math.min(i.y+i.height,t.y+t.height);return e=r>=n&&o>=a?new s(n,a,r-n,o-a):new s,e}equals(t){return this.x==t.x&&this.y==t.y&&this.width==t.width&&this.height==t.height}clone(){return new s(this.x,this.y,this.width,this.height)}copyFrom(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height}get position(){return this._position}set position(t){this._position=t,this.center.x=this.position.x+this.halfSize.x,this.center.y=this.position.y+this.halfSize.y}get size(){return this._size}set size(t){this._size=t}get area(){return this.size.x*this.size.y}toString(){return"[Rectangle x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+"]"}get widthToHeight(){return this.width/this.height}get heightToWidth(){return this.height/this.width}scaleWidth(t){return new s(this.x,this.y,t*this.widthToHeight,t)}scaleHeight(t){return new s(this.x,this.y,t,t*this.heightToWidth)}scaleToFillRect(t){let e=this.getScaleToFill(t);return this.scale(e,e)}scaleToFitRect(t){let e=this.getScaleToFitRect(t);return this.scale(e,e)}scale(t,e){return new s(this.x,this.y,this.width*t,this.height*e)}scaleToArea(t){let e=Math.sqrt(t/this.widthToHeight);return new s(0,0,t/e,e)}getScaleToFill(t){let e;return e=this.widthToHeight>t.widthToHeight?t.height/this.height:t.width/this.width,e}getScaleToFitRect(t){let e;return e=this.widthToHeight>t.widthToHeight?t.width/this.width:t.height/this.height,e}get isPortrait(){return this.width<=this.height}get isLandscape(){return this.height<=this.width}get topLeft(){return this.position}get topRight(){return new a(this.x+this.width,this.y)}get bottomRight(){return this.position.add(this.size)}get bottomLeft(){return new a(this.x,this.y+this.height)}getRandomPoint(){let t=a.random();return t.x*=this.size.x,t.y*=this.size.y,this.position.add(t)}}let o,l;function c(t,e,i,n=!1){for(i||(i=new a);t&&t!=e;)n&&console.log("localToGlobal element",t.nodeName,t.className,t.offsetTop),i.x+=t.offsetLeft,i.y+=t.offsetTop,t=t.parentNode;return i}"undefined"!=typeof navigator&&(o={android:!!navigator.userAgent.match(/Android/i),blackBerry:!!navigator.userAgent.match(/BlackBerry/i),iOS:!!navigator.userAgent.match(/iPhone|iPad|iPod/i),windows:!!navigator.userAgent.match(/IEMobile/i)},o.any=o.android||o.blackBerry||o.iOS||o.windows),"undefined"!=typeof window&&(l="ontouchend"in window);let h={mouseover:"mouseover",mouseout:"mouseout",mousedown:"mousedown",mouseup:"mouseup",mousemove:"mousemove",click:"click",transitionend:"transitionend",animationstart:"animationstart",animationiteration:"animationiteration",animationend:"animationend"};l&&(h.mouseover="touchstart",h.mouseout="touchend",h.mousedown="touchstart",h.mouseup="touchend",h.mousemove="touchmove",h.click="click");let u={OTransition:{transitionend:"otransitionend",animationstart:"oanimationstart",animationiteration:"oanimationiteration",animationend:"oanimationend"},MozTransition:{transitionend:"transitionend",animationstart:"moznimationstart",animationiteration:"moznimationiteration",animationend:"moznimationend"},WebkitTransition:{transitionend:"webkitTransitionEnd",animationstart:"webkitAnimationStart",animationiteration:"webkitAnimationIteration",animationend:"webkitAnimationEnd"}};"undefined"!=typeof window&&window.addEventListener("load",(function(){for(let t in u){let e=u[t];void 0!==document.body.style[t]&&(h.transitionend=e.transitionend,h.animationstart=e.animationstart,h.animationiteration=e.animationiteration,h.animationend=e.animationend)}}));class d extends Event{constructor(t,e,i){super(t,i),this.data=e}}class p extends d{static dispatch(t,e,i){t.dispatchEvent(new p(e,i))}constructor(t,e,i){super(t,e,i)}}class m extends EventTarget{constructor(){super()}get value(){return this._value}set value(t){(t!=this._value||this.forceChangeEvent)&&(this._value=t,p.dispatch(this,"value",this.value))}reset(t){this.value=t}toString(){return this.debug&&console.log("Data.toString",this.value),this.value.toString()}serialize(){return this.value}deserialize(t){this.value=t}copy(t){this.value=t.value,p.dispatch(this,"value",this.value)}destroy(){return this.value=null,super.destroy()}static get CHANGE(){return"value"}}class f extends m{constructor(t,e=[]){super(),this.modifiers=e,this.length=new m,this.value=t}get value(){return super.value}set value(t){for(let e=0;e<this.modifiers.length;e++){let i=this.modifiers[e];i&&(t=i(t))}super.value=t,this.length.value=Math.max(1,this.value.toString().length)}destroy(){if(this.modifiers=[],this.validation)try{this.validation.destroy()}catch(t){}return this.validation=null,super.destroy()}}class v extends f{constructor(t=!1,e=[]){super(t,e)}get value(){return super.value}set value(t=!1){super.value=function(t=!1){return-1!=["true","1","yes","y","on"].indexOf(String(t).toLowerCase())}(t)}reset(t=!1){super.reset(t)}}class g extends f{constructor(t=NaN,e=[]){super(t,e)}get value(){return super.value}set value(t=NaN){super.value=Number(t)}reset(t=0){super.reset(t)}add(t=1){this.value+=t}subtract(t=1){this.value-=t}}class y extends m{constructor(t){super(),this.value=t,this.forceChangeEvent=!1}get value(){return this._value}set value(t){t!=this._value&&(this._deselectValue(this._value),this._selectValue(t)),super.value=t}toString(){return this.value.toString()}_deselectValue(t){t&&t.isSelected&&t.isSelected instanceof v&&(t.isSelected.value=!1)}_selectValue(t){t&&t.isSelected&&t.isSelected instanceof v&&(t.isSelected.value=!0)}}class x extends m{static get ITEM_CHANGE(){return"item-change"}constructor(){super(),this.dataItemChangeHandler=this.dataItemChangeHandler.bind(this),this.selectedItemChange=this.selectedItemChange.bind(this),this.selectedIndexChange=this.selectedIndexChange.bind(this),this.lastIndex=new g,this.length=new g,this.length.addEventListener(m.CHANGE,()=>{this.lastIndex.value=this.length.value-1}),this.length.value=arguments.length,this._value=[],this.selectedItem=new y,this.selectedItem.addEventListener(m.CHANGE,this.selectedItemChange),this.selectedIndex=new g,this.selectedIndex.addEventListener(m.CHANGE,this.selectedIndexChange),this.nextIndex=new g,this.prevIndex=new g,this.dataClass=Object,this.push.apply(this,arguments)}selectedItemChange(t){this.updateSelectedIndex(),this.setSelectedData(this.selectedItem.value)}updateSelectedIndex(){this.selectedIndex.removeEventListener(m.CHANGE,this.selectedIndexChange);let t=this.value.indexOf(this.selectedItem.value);this.selectedIndex.value=t,this.selectedIndex.addEventListener(m.CHANGE,this.selectedIndexChange)}setSelectedData(t){this.previousSelectedItem&&this.previousSelectedItem.isSelectedItem instanceof m&&(this.previousSelectedItem.isSelectedItem.value=!1),this.selectedData&&this.selectedData.copy(t),this.previousSelectedItem=t,this.previousSelectedItem&&this.previousSelectedItem.isSelectedItem instanceof m&&(this.previousSelectedItem.isSelectedItem.value=!0);let e=this.selectedIndex.value,i=e+1;i>this.value.length-1&&(i=0),this.nextIndex.value=i,this.nextData&&this.nextData.copy(this.value[this.nextIndex.value]);let n=e-1;n<0&&(n=this.value.length-1),this.prevIndex.value=n,this.prevData&&this.prevData.copy(this.value[this.prevIndex.value])}selectedIndexChange(t){let e=this.selectedIndex.value;this.selectedItem.removeEventListener(m.CHANGE,this.selectedItemChange),this.selectedItem.value=this.value[e],this.selectedItem.addEventListener(m.CHANGE,this.selectedItemChange),this.setSelectedData(this.selectedItem.value)}clear(){return this.splice(0,this.value.length)}dataItemChangeHandler(t){let e=new d(x.ITEM_CHANGE,this.value);this.dispatchEvent(e)}item(t){return this._value[t]}get value(){return this._value}set value(t){t||(t=[]);for(let t=0;t<this._value.length;t++){let e=this._value[t];e instanceof m&&e.removeEventListener(m.CHANGE,this.dataItemChangeHandler)}var e=[0,this.value.length].concat(t);this.splice.apply(this,e);for(let t=0;t<this._value.length;t++){let e=this._value[t];e instanceof m&&e.addEventListener(m.CHANGE,this.dataItemChangeHandler)}this.length.value=this._value.length,p.dispatch(this,"value",this.value),this.dataItemChangeHandler(null),this.includes(this.selectedItem.value)?this.updateSelectedIndex():this.selectedItem.value=null}indexOf(t,e){return this._value.indexOf(t,e)}map(t){return this._value.map(t)}find(t){return this._value.find(t)}findByKey(t,e){return this.find(i=>i[t].toString()==e.toString())}filter(t){return this._value.filter(t)}pop(){let t=this._value.pop();t instanceof m&&t.removeEventListener(m.CHANGE,this.dataItemChangeHandler),this.length.value=this._value.length;let e=new d("remove",{value:[t],index:this.value.length,total:1});return this.dispatchEvent(e),t==this.selectedItem.value?this.selectedItem.value=null:this.updateSelectedIndex(),t}push(){let t=this.value.length,e=this._value.push.apply(this._value,arguments);this.length.value=e;let i=[];for(let t=0;t<arguments.length;t++)i.push(arguments[t]);for(let t=0;t<i.length;t++){let e=i[t];e instanceof m&&e.addEventListener(m.CHANGE,this.dataItemChangeHandler)}if(i.length>0){let e=new d("add",{value:i,index:t,total:arguments.length});this.dispatchEvent(e)}return e}reverse(){this._value.reverse();let t=new d("reverse",{value:this._value});this.dispatchEvent(t),this.updateSelectedIndex()}shift(){let t=this._value.shift();t instanceof m&&t.removeEventListener(m.CHANGE,this.dataItemChangeHandler),this.length.value=this._value.length;let e=new d("remove",{value:[t],index:0,total:1});return this.dispatchEvent(e),t==this.selectedItem.value?this.selectedItem.value=null:this.updateSelectedIndex(),t}swap(t,e){let i=this._value[t];this._value[t]=this._value[e],this._value[e]=i;let n=new d("sort",{value:this._value});this.dispatchEvent(n),this.updateSelectedIndex()}sort(t){this._value.sort(t);let e=new d("sort",{value:this._value});this.dispatchEvent(e),this.updateSelectedIndex()}splice(){let t=this._value.splice.apply(this._value,arguments);for(let e=0;e<t.length;e++){let i=t[e];i instanceof m&&i.removeEventListener(m.CHANGE,this.dataItemChangeHandler)}let e=[];for(let t=2;t<arguments.length;t++)e.push(arguments[t]);this.length.value=this._value.length;for(let t=0;t<e.length;t++){let i=e[t];i instanceof m&&i.addEventListener(m.CHANGE,this.dataItemChangeHandler)}let i=arguments[0];if(t.length>0){let e=new d("remove",{value:t,index:i,total:t.length});this.dispatchEvent(e)}if(e.length>0){let t=new d("add",{value:e,index:i,total:e.length});this.dispatchEvent(t)}return this.includes(this.selectedItem.value)?this.updateSelectedIndex():this.selectedItem.value=null,t}remove(t){let e=this.indexOf(t);-1!=e&&this.splice(e,1)}unshift(){let t=this._value.unshift.apply(this._value,arguments);this.length.value=t;let e=[];for(let t=0;t<arguments.length;t++)e.push(arguments[t]);for(let t=0;t<e.length;t++){let i=e[t];i instanceof m&&i.addEventListener(m.CHANGE,this.dataItemChangeHandler)}if(e.length>0){let t=new d("add",{value:e,index:0,total:arguments.length});this.dispatchEvent(t)}return this.updateSelectedIndex(),t}includes(t){return-1!=this.indexOf(t)}join(){return this._value.join.apply(this._value,arguments)}concat(){return this._value.concat.apply(this._value,arguments)}slice(){return this._value.slice.apply(this._value,arguments)}serialize(){let t=[];return this.map(e=>{t.push(e.serialize())}),t}deserialize(t){let e=[];t.map(t=>{let i=new this.dataClass;i.deserialize(t),e.push(i)}),this.value=e}toString(){return this.value.toString()}}function w(t=0){return isNaN(t)||t<=0?Promise.resolve():new Promise((function(e,i){setTimeout((function(){e()}),t)}))}class b extends f{constructor(t="",e=[]){super(t,e)}get value(){return super.value}set value(t=""){super.value=t.toString()}reset(t=""){super.reset(t)}}class _ extends EventTarget{constructor(t="Action",e="Action",i="Add an Action"){super(),this.capture=this.capture.bind(this),this.play=this.play.bind(this),this.reCapture=this.reCapture.bind(this),this.type=t,this.name=new b,this.name.addEventListener(m.CHANGE,()=>{this.name.length.value=Math.max(this.name.value.length,4)}),this.name.value=e,this.icon=new b,this.description=new b(i),this.captureDescription=new b,this.isTestable=new v,this.isCaptureable=new v,this.isCapturing=new v,this.changeCursorOnCapture=new v,this.isCapturing.addEventListener(m.CHANGE,t=>{this.changeCursorOnCapture.value&&(wu.model.showCaptureIcon.value=t.data)}),this.isPlaying=new v,this.delay=new g(0),this.isSelectedItem=new v,this._array=[this]}get array(){return this._array}set array(t){this._array=t,this.dispatchEvent(new d("change_array",t))}clone(){}copy(t){t&&(this.delay.value=t.delay.value,this.isCaptureable.value=t.isCaptureable.value,this.isTestable.value=t.isTestable.value)}triggerDelay(){return w(1e3*this.delay.value).then(()=>this.trigger())}trigger(){return Promise.resolve()}serialize(){return{type:this.type,delay:this.delay.serialize(),name:this.name.serialize()}}deserialize(t){t&&(this.type=t.type,this.delay.deserialize(t.delay),this.name.deserialize(t.name))}capture(){this.isCapturing.value=!0}reCapture(){Object(n.a)("Action","reCapture",this.type),this.capture()}captureComplete(){this.isCapturing.value=!1,wu.model.save()}captureAtInit(){}play(){return Object(n.a)("Action","play",this.type),this.isPlaying.value=!0,this.trigger().then(()=>{this.isPlaying.value=!1,wu.model.save()})}}class M extends EventTarget{constructor(){super(),this.index=0,this.seconds=0,this.allFrames=0,this.animationFrame=this.animationFrame.bind(this)}static get TICK(){return"tick"}static get FPS(){return"fps"}start(){this.isRunning||(this.isRunning=!0,this.animationFrame(0),this.fpsTimeout=setTimeout(this.dispatchFrameSeconds.bind(this),1e3))}pause(){this.isRunning=!1,clearTimeout(this.fpsTimeout)}animationFrame(t){this.time=t,this.index++;let e=new d(M.TICK,this.time);this.dispatchEvent(e),this.isRunning&&window.requestAnimationFrame(this.animationFrame)}dispatchFrameSeconds(){this.allFrames+=this.index,this.seconds++;let t=new d(M.FPS,{frames:this.index,averageFrames:Math.round(this.allFrames/this.seconds*10)/10});this.dispatchEvent(t),this.index=0,setTimeout(this.dispatchFrameSeconds.bind(this),1e3)}}let S=new M;"undefined"!=typeof window&&S.start();class E extends EventTarget{constructor(t,e,i,n,r){super(),this.tick=this.tick.bind(this),this.tweenProps=i,this.updateHandler=n,this.completeHandler=r,this._startTime=t,this._duration=e,this._tweenTime=NaN,this.forceUpdate=!1}get startTime(){return this._startTime}set startTime(t){this._startTime=t,this.dispatchEvent(new Event(E.CHANGE))}get endTime(){return this.startTime+this.duration}get duration(){return this._duration}set duration(t){this._duration=Object(r.g)(t),this.dispatchEvent(new Event(E.CHANGE))}start(){let t=new Promise((t,e)=>{let i=e=>{this.debug&&console.log("tweenComplete"),this.removeEventListener(E.COMPLETE,i),t(this)};this.addEventListener(E.COMPLETE,i)});return this._tweenTime=NaN,this.clockStartTime=S.time,S.addEventListener(M.TICK,this.tick),this.time=0,t}tick(t){this.time=(S.time-this.clockStartTime)/1e3}stop(){S.removeEventListener(M.TICK,this.tick)}get time(){return this._time}set time(t){t=Math.min(this.startTime+this.duration,t),t=Math.max(0,t),this._time=t;let e=t-this.startTime;if(e=Math.max(e,0),e=Math.min(e,this.duration),e!=this._tweenTime||this.forceUpdate){this._tweenTime=e;for(let t=0;t<this.tweenProps.length;t++){this.tweenProps[t].calculate(e,this.duration,this.debug)}let t=new Event(E.UPDATE);this.updateHandler&&this.updateHandler(t),this.dispatchEvent(t)}if(e>=this.duration){let t=new Event(E.COMPLETE);this.completeHandler&&this.completeHandler(t),this.stop(),this.dispatchEvent(t)}}static get COMPLETE(){return"complete"}static get UPDATE(){return"update"}static get CHANGE(){return"change"}}class T{constructor(t,e,i,n,r,a=1e3,s){this.target=t,this.name=e,this.startValue=i,this.endValue=n,this.ease=r,this.roundingValue=a,this.debug=s}calculate(t,e,i=!1){let n=this.endValue;if(e>0){let i=this.ease(t,this.startValue,this.endValue-this.startValue,e);n=Math.round(i*this.roundingValue)/this.roundingValue}this.target[this.name]=n}}class A{constructor(t,e,i,n,r=100){this.p0=t||new a(0,0),this.p1=e||new a(0,0),this.p2=i||new a(1,1),this.p3=n||new a(1,1),this.samples=r,this.calculateLength()}clone(){return new A(this.p0.clone(),this.p1.clone(),this.p2.clone(),this.p3.clone(),this.samples)}calculateLength(){this.distances=[0],this.distancesX=[0],this.totalLength=0,this.totalX=0;let t=this.p0;for(let e=1;e<this.samples;e++){let i=e/(this.samples-1),n=this.getPoint(i),r=t.subtract(n);this.totalLength+=r.magnitude,this.distances[e]=this.totalLength,this.totalX-=r.x,this.distancesX[e]=this.totalX,t=n}}getPoint(t){let e=a.lerp(this.p0,this.p1,t),i=a.lerp(this.p1,this.p2,t),n=a.lerp(this.p2,this.p3,t),r=a.lerp(e,i,t),s=a.lerp(i,n,t);return a.lerp(r,s,t)}getPointOnCurve(t){let e=this.sampleAt(t,this.distances);return this.getPoint(e)}getPointAtX(t){let e=this.sampleAt(t,this.distancesX),i=this.getPoint(e);return i.x=t,i}sampleAt(t,e){let i,n=0,r=e.length-1,a=t*e[r],s=0,o=r;for(;s<=o;)if(n=Math.floor(s+(o-s)/2),i=e[n]-a,i<0)s=n+1;else{if(!(i>0)){o=n;break}o=n-1}if(n=o,e[n]===a)return n/r;let l=e[n];return(n+(a-l)/(e[n+1]-l))/r}}class L extends A{constructor(t=0,e=0,i=1,n=1,r=100){super(new a(0,0),new a(t,e),new a(i,n),new a(1,1),r),this.ease=this.ease.bind(this)}ease(t,e,i,n){return i*this.getPointAtX(t/n).y+e}clone(){return new L(this.p1.x,this.p1.y,this.p2.x,this.p1.y,this.samples)}}L.linear={ease:new L(0,0,1,1)},L.sine={easeInOut:new L(.37,0,.63,1),easeIn:new L(.12,0,.39,0),easeOut:new L(.61,1,.88,1)},L.quad={easeInOut:new L(.45,0,.55,1),easeIn:new L(.11,0,.5,0),easeOut:new L(.5,1,.89,1)},L.cubic={easeInOut:new L(.65,0,.35,1),easeIn:new L(.32,0,.67,0),easeOut:new L(.33,1,.68,1)},L.quart={easeInOut:new L(.76,0,.24,1),easeIn:new L(.5,0,.75,0),easeOut:new L(.25,1,.5,1)},L.quint={easeInOut:new L(.83,0,.17,1),easeIn:new L(.64,0,.78,0),easeOut:new L(.22,1,.36,1)},L.expo={easeInOut:new L(.87,0,.13,1),easeIn:new L(.7,0,.84,0),easeOut:new L(.16,1,.3,1)},L.back={easeInOut:new L(.68,-.6,.32,1.6),easeIn:new L(.36,0,.66,-.56),easeOut:new L(.34,1.56,.64,1)},L.circ={easeInOut:new L(.85,0,.15,1),easeIn:new L(.55,0,1,.45),easeOut:new L(0,.55,.45,1)};let C={};function P(t,e,i=!1){i&&console.log("getProperty path",t,"scope",e);let n=null;try{n=new Function("return "+t).bind(e)()}catch(t){}return n}function R(t,e){C[t]=e}let I=[function(t,e){let i=t.nodeName.toLowerCase(),n=C[i];if(n||(i=t.getAttribute("is"),i&&(n=C[i])),n){let e=new n(t);t.component=e}},function(t,e){t.component&&(t.component.scope=e)}];let O=[];for(let t=0;t<5;t++)O.push(document.createElement("div"));function D(t,e={},i=!1){let n;window.renderTemplate&&(t=window.renderTemplate(t,e));let r=O.shift();return O.push(r),r.innerHTML=t,r.children.length>0&&(n=r.children.item(0)),function(t,e){let i=z(t,[t]);for(let t=0;t<I.length;t++){let n=I[t];for(let t=i.length-1;t>-1;t--){n(i[t],e)}}}(n,e),n}function N(t){if(t){let e=z(t);for(let t=e.length-1;t>-1;t--){let i=e[t];if(i.component){if(i.component.destroy)try{i.component.destroy()}catch(t){}i.component=null}}if(t.innerHTML=null,t.parentNode&&t.parentNode.removeChild(t),t.component){if(t.component.destroy)try{t.component.destroy()}catch(t){}t.component=null}}}function z(t,e){if(e||(e=[]),t.children)for(let i=0;i<t.children.length;i++){let n=t.children.item(i);switch(n.nodeName){case"#text":case"#comment":case"BR":case"TEMPLATE":case"SCRIPT":break;default:e.push(n),z(n,e)}}return e}class H extends m{constructor(t={}){super(),this.changeHandler=this.changeHandler.bind(this);for(let e in t)this["_"+e]=t[e],Object.defineProperty(this,e,{get:function(){return this["_"+e]},set:function(t){this["_"+e]!=t&&(this["_"+e]=t,p.dispatch(this,e,t),this.changeHandler())},enumerable:!0,configurable:!0})}get value(){return this}changeHandler(){p.dispatch(this,"value",this)}destroy(){for(let t in this){let e=this[t];e instanceof m&&e.destroy(),this[t]=null}return super.destroy()}}class B extends H{constructor(t=0,e=0){super(),this.x=new g(t),this.x.addEventListener(m.CHANGE,this.changeHandler),this.y=new g(e),this.y.addEventListener(m.CHANGE,this.changeHandler)}destroy(){return this.x.removeEventListener(m.CHANGE,this.changeHandler),this.y.removeEventListener(m.CHANGE,this.changeHandler),super.destroy()}copy(t){t&&(this.x.copy(t.x),this.y.copy(t.y))}clone(){let t=new B;return t.copy(this),t}get point(){return new a(this.x.value,this.y.value)}serialize(){return{x:this.x.value,y:this.y.value}}deserialize(t){t&&(this.x.value=t.x,this.y.value=t.y)}}class U{constructor(){this.easeIn=this.easeIn.bind(this),this.easeOut=this.easeOut.bind(this),this.easeInOut=this.easeInOut.bind(this)}easeIn(t,e=0,i=1,n=1){}easeOut(t,e=0,i=1,n=1){}easeInOut(t,e=0,i=1,n=1){}}U.quad=new class extends U{easeIn(t,e=0,i=1,n=1){return i*(t/=n)*t+e}easeOut(t,e=0,i=1,n=1){return-i*(t/=n)*(t-2)+e}easeInOut(t,e=0,i=1,n=1){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e}},U.cubic=new class extends U{easeIn(t,e=0,i=1,n=1){return i*(t/=n)*t*t+e}easeOut(t,e=0,i=1,n=1){return i*((t=t/n-1)*t*t+1)+e}easeInOut(t,e=0,i=1,n=1){return(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e}},U.quart=new class extends U{easeIn(t,e=0,i=1,n=1){return i*(t/=n)*t*t*t+e}easeOut(t,e=0,i=1,n=1){return-i*((t=t/n-1)*t*t*t-1)+e}easeInOut(t,e=0,i=1,n=1){return(t/=n/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e}},U.quint=new class extends U{easeIn(t,e=0,i=1,n=1){return i*(t/=n)*t*t*t*t+e}easeOut(t,e=0,i=1,n=1){return i*((t=t/n-1)*t*t*t*t+1)+e}easeInOut(t,e=0,i=1,n=1){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e}},U.sine=new class extends U{easeIn(t,e=0,i=1,n=1){return-i*Math.cos(t/n*(Math.PI/2))+i+e}easeOut(t,e=0,i=1,n=1){return i*Math.sin(t/n*(Math.PI/2))+e}easeInOut(t,e=0,i=1,n=1){return-i/2*(Math.cos(Math.PI*t/n)-1)+e}},U.expo=new class extends U{easeIn(t,e=0,i=1,n=1){return 0==t?e:i*Math.pow(2,10*(t/n-1))+e}easeOut(t,e=0,i=1,n=1){return t==n?e+i:i*(1-Math.pow(2,-10*t/n))+e}easeInOut(t,e=0,i=1,n=1){return 0==t?e:t==n?e+i:(t/=n/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e}},U.circ=new class extends U{easeIn(t,e=0,i=1,n=1){return-i*(Math.sqrt(1-(t/=n)*t)-1)+e}easeOut(t,e=0,i=1,n=1){return i*Math.sqrt(1-(t=t/n-1)*t)+e}easeInOut(t,e=0,i=1,n=1){return(t/=n/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e}},U.elastic=new class extends U{constructor(){super()}easeIn(t,e=0,i=1,n=1,r,a){if(0==t)return e;if(1==(t/=n))return e+i;let s;return a||(a=.3*n),!r||r<Math.abs(i)?(r=i,s=a/4):s=a/(2*Math.PI)*Math.asin(i/r),-r*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/a)+e}easeOut(t,e=0,i=1,n=1,r,a){if(0==t)return e;if(1==(t/=n))return e+i;let s;return a||(a=.3*n),!r||r<Math.abs(i)?(r=i,s=a/4):s=a/(2*Math.PI)*Math.asin(i/r),r*Math.pow(2,-10*t)*Math.sin((t*n-s)*(2*Math.PI)/a)+i+e}easeInOut(t,e=0,i=1,n=1,r,a){if(0==t)return e;if(2==(t/=n/2))return e+i;let s;return a||(a=n*(.3*1.5)),!r||r<Math.abs(i)?(r=i,s=a/4):s=a/(2*Math.PI)*Math.asin(i/r),t<1?r*Math.pow(2,10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/a)*-.5+e:r*Math.pow(2,-10*(t-=1))*Math.sin((t*n-s)*(2*Math.PI)/a)*.5+i+e}},U.back=new class extends U{constructor(t=1.70158){super(),this.s=t}easeIn(t,e=0,i=1,n=1,r){return null==r&&(r=this.s),i*(t/=n)*t*((r+1)*t-r)+e}easeOut(t,e=0,i=1,n=1,r){return null==r&&(r=this.s),i*((t=t/n-1)*t*((r+1)*t+r)+1)+e}easeInOut(t,e=0,i=1,n=1,r){return null==r&&(r=this.s),(t/=n/2)<1?i/2*(t*t*((1+(r*=1.525))*t-r))+e:i/2*((t-=2)*t*((1+(r*=1.525))*t+r)+2)+e}},U.bounce=new class extends U{easeOut(t,e=0,i=1,n=1){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}easeIn(t,e=0,i=1,n=1){return i-this.easeOut(n-t,0,i,n)+e}easeInOut(t,e=0,i=1,n=1){return t<n/2?.5*this.easeIn(2*t,0,i,n)+e:.5*this.easeOut(2*t-n,0,i,n)+.5*i+e}},U.linear=new class{constructor(){this.ease=this.ease.bind(this)}ease(t,e=0,i=1,n=1){return i*t/n+e}};class F extends H{constructor(){super(),this._value=this,this.p0=new B(0,0),this.p1=new B(0,0),this.p2=new B(1,1),this.p3=new B(1,1),this.p0.addEventListener("value",this.changeHandler),this.p1.addEventListener("value",this.changeHandler),this.p2.addEventListener("value",this.changeHandler),this.p3.addEventListener("value",this.changeHandler);for(let t=0;t<4;t++){let e=this["p"+t];e.x.modifiers=[r.f],e.y.modifiers=[r.f]}this.controlPoints=[this.p1,this.p2],this.controlPointsLines=[[this.p0,this.p1],[this.p3,this.p2]],this.easing=new L,this.debugEasing=U.quad.easeInOut,this.changeHandler()}copy(t){t&&(this.p0.copy(t.p0),this.p1.copy(t.p1),this.p2.copy(t.p2),this.p3.copy(t.p3))}changeHandler(){this.easing.p1.x=this.p1.x.value,this.easing.p1.y=this.p1.y.value,this.easing.p2.x=this.p2.x.value,this.easing.p2.y=this.p2.y.value,this.easing.calculateLength(),super.changeHandler()}}class G extends _{constructor(t,e,i=0,n=0,r=1,s=0){super("ActionTween","ActionTween"),this.startX=new g(t),this.startY=new g(e),this.endX=new g(i),this.endY=new g(n),this.duration=new g(r),this.cubicBezierPoints=new F,this.easingPresets=new x,this.easingPresets.selectedItem.addEventListener(m.CHANGE,this.easingPresetChange.bind(this)),this.easingPresets.selectedItem.debug=!0;let o=["Select a preset"];for(let t in L){let e=L[t];for(let i in e){let e=t+"."+i;o.push(e)}}this.easingPresets.value=o,this.easingPresets.selectedItem.value="quad.easeInOut",this.tweenUpdateHandler=this.tweenUpdateHandler.bind(this),this.tweenCompleteHandler=this.tweenCompleteHandler.bind(this),this.pos=new a}resetEasing(){this.easingPresets.selectedItem.value=this.easingPresets.value[0]}easingPresetChange(){let t=this.easingPresets.selectedItem.value,e=P("this."+t,U);e&&(this.cubicBezierPoints.debugEasing=e);let i=P("this."+t,L);i&&(this.cubicBezierPoints.p1.x.value=i.p1.x,this.cubicBezierPoints.p1.y.value=i.p1.y,this.cubicBezierPoints.p2.x.value=i.p2.x,this.cubicBezierPoints.p2.y.value=i.p2.y)}copy(t){super.copy(t),this.startX.value=t.startX.value,this.startY.value=t.startY.value,this.endX.value=t.endX.value,this.endY.value=t.endY.value,this.duration.value=t.duration.value,this.cubicBezierPoints.copy(t.cubicBezierPoints)}trigger(){return this.tween=new E(0,this.duration.value,[new T(this.pos,"x",this.startX.value,this.endX.value,this.cubicBezierPoints.easing.ease),new T(this.pos,"y",this.startY.value,this.endY.value,this.cubicBezierPoints.easing.ease)]),this.tween.addEventListener(E.UPDATE,this.tweenUpdateHandler),this.tween.addEventListener(E.COMPLETE,this.tweenCompleteHandler),this.tween.start()}tweenUpdateHandler(t){}tweenCompleteHandler(t){}serialize(){let t=super.serialize();return t.startX=this.startX.serialize(),t.startY=this.startY.value,t.endX=this.endX.value,t.endY=this.endY.value,t.duration=this.duration.value,t.p1=this.cubicBezierPoints.p1.serialize(),t.p2=this.cubicBezierPoints.p2.serialize(),t.easing=this.easingPresets.selectedItem.value,t}deserialize(t){t&&(super.deserialize(t),this.startX.deserialize(t.startX),this.startY.deserialize(t.startY),this.endX.deserialize(t.endX),this.endY.deserialize(t.endY),this.duration.deserialize(t.duration),this.cubicBezierPoints.p1.deserialize(t.p1),this.cubicBezierPoints.p2.deserialize(t.p2),this.easingPresets.selectedItem.value=t.easing||"quad.easeInOut")}}class k extends G{constructor(t="window",e="px",i=0,n=0,r=1,a=0){super(0,0,0,0,r,a),this.type="ActionScroll",this.name.value="Scroll",this.description.value="Add a scroll animation",this.target=new b(t),this.unitX=new g(i),this.unitY=new g(n),this.units=new x("%","px"),this.units.selectedItem.value=e,this.isCaptureable.value=!0,this.isTestable.value=!0,this.icon.value="fas fa-scroll",this.doScroll=this.doScroll.bind(this),this.unitX.addEventListener(m.CHANGE,this.doScroll),this.unitY.addEventListener(m.CHANGE,this.doScroll)}clone(){let t=new k;return t.copy(this),t}copy(t){this.unitX.removeEventListener(m.CHANGE,this.doScroll),this.unitY.removeEventListener(m.CHANGE,this.doScroll),super.copy(t),this.target.value=t.target.value,this.unitX.value=t.unitX.value,this.unitY.value=t.unitY.value,this.units.selectedItem.value=t.units.selectedItem.value,this.unitX.addEventListener(m.CHANGE,this.doScroll),this.unitY.addEventListener(m.CHANGE,this.doScroll)}trigger(){switch(this.target.value){case"window":this.startX.value=window.scrollX,this.startY.value=window.scrollY;break;default:let t=document.querySelector(this.target.value);this.startX.value=t.scrollLeft,this.startY.value=t.scrollTop}if("px"==this.units.selectedItem.value&&(this.endX.copy(this.unitX),this.endY.copy(this.unitY)),"%"==this.units.selectedItem.value){let t={x:0,y:0};switch(this.target.value){case"window":t.x=document.body.offsetWidth-window.innerWidth,t.y=document.body.offsetHeight-window.innerHeight;break;default:let e=document.querySelector(this.target.value);t.x=e.scrollWidth-e.clientWidth,t.y=e.scrollHeight-e.clientHeight}this.endX.value=Math.round(this.unitX.value/100*t.x),this.endY.value=Math.round(this.unitY.value/100*t.y)}return super.trigger()}doScroll(){this.pos.x=this.unitX.value,this.pos.y=this.unitY.value,this.tweenUpdateHandler()}tweenUpdateHandler(){switch(this.target.value){case"window":window.scroll(this.pos.x,this.pos.y);break;default:let t=document.querySelector(this.target.value);t.scrollLeft=this.pos.x,t.scrollTop=this.pos.y}}serialize(){let t=super.serialize();return t.target=this.target.serialize(),t.unitX=this.unitX.serialize(),t.unitY=this.unitY.serialize(),t.units=this.units.selectedItem.value,t}deserialize(t){t&&(this.unitX.removeEventListener(m.CHANGE,this.doScroll),this.unitY.removeEventListener(m.CHANGE,this.doScroll),super.deserialize(t),this.target.deserialize(t.target),this.unitX.deserialize(t.unitX),this.unitY.deserialize(t.unitY),this.units.selectedItem.value=t.units,this.unitX.addEventListener(m.CHANGE,this.doScroll),this.unitY.addEventListener(m.CHANGE,this.doScroll))}capture(){super.capture(),this.unitX.removeEventListener(m.CHANGE,this.doScroll),this.unitY.removeEventListener(m.CHANGE,this.doScroll);let t=new a,e=new a;switch(this.target.value){case"window":t.x=window.scrollX,t.y=window.scrollY,e.x=document.body.offsetWidth-window.innerWidth,e.y=document.body.offsetHeight-window.innerHeight;break;default:let i=document.querySelector(this.target.value);t.x=i.scrollLeft,t.y=i.scrollTop,e.x=i.scrollWidth-i.clientWidth,e.y=i.scrollHeight-i.clientHeight}let i=new a;switch(this.units.selectedItem.value){case"px":i.x=t.x,i.y=t.y;break;case"%":i.x=Math.round(t.x/e.x*100),i.y=Math.round(t.y/e.y*100)}isNaN(i.x)&&(i.x=0),isNaN(i.y)&&(i.y=0),this.unitX.value=i.x,this.unitY.value=i.y,setTimeout(()=>{this.unitX.addEventListener(m.CHANGE,this.doScroll),this.unitY.addEventListener(m.CHANGE,this.doScroll),this.captureComplete()},200)}captureAtInit(){super.captureAtInit(),this.capture()}}class V extends _{constructor(t="click",e=0,i=0){super("ActionMouseEvent","MouseEvent","Add a mouse event"),this.x=new g(e),this.y=new g(i),this.eventTypes=new x("click","mousedown","mouseup","mouseover","mouseout","dblclick","mousemove","mouseenter","mouseleave","contextmenu","touchstart","touchmove","touchend"),this.eventTypes.selectedItem.value=this.eventTypes.value[0],this.isTestable.value=!0,this.isCaptureable.value=!0,this.changeCursorOnCapture.value=!0,this.captureMouseEventHandler=this.captureMouseEventHandler.bind(this),this.icon.value="fas fa-hand-pointer"}clone(){let t=new V;return t.copy(this),t}copy(t){super.copy(t),this.eventTypes.selectedItem.value=t.eventTypes.selectedItem.value,this.x.value=t.x.value,this.y.value=t.y.value}trigger(){let t=new a(this.x.value-window.scrollX,this.y.value-window.scrollY),e=document.elementFromPoint(t.x,t.y),i=new MouseEvent(this.eventTypes.selectedItem.value,{bubbles:!0,cancelable:!0,view:window,clientX:t.x,clientY:t.y,pageX:t.x,pageY:t.y,x:t.x,y:t.y});return e?e.dispatchEvent(i):console.log("MouseEvent action cannot find element at pageX "+this.x.value+" and pageY "+this.y.value),Promise.resolve()}serialize(){let t=super.serialize();return t.eventType=this.eventTypes.selectedItem.value,t.x=this.x.value,t.y=this.y.value,t}deserialize(t){t&&(super.deserialize(t),this.eventTypes.selectedItem.value=t.eventType,this.x.deserialize(t.x),this.y.deserialize(t.y))}capture(){super.capture(),setTimeout(()=>{document.body.addEventListener("click",this.captureMouseEventHandler)},33)}captureMouseEventHandler(t){let e=t;l&&(e=t.touches[0]);let i=new a(e.pageX,e.pageY);this.x.value=i.x,this.y.value=i.y,document.body.removeEventListener("click",this.captureMouseEventHandler),this.captureComplete()}captureAtInit(){super.captureAtInit(),this.capture()}}class j extends _{constructor(t=""){super("ActionEval","Javascript","Add javascript code"),t||(t='/* Example */\nlet promise = new Promise(function(resolve, reject) {\n    console.log("Wait for 1 second");\n    setTimeout(function() {\n        resolve();\n    }, 1000);\n});\nreturn promise.then(function() {\n    console.log("1 second has passed");\n});\n'),this.code=new b(t),this.icon.value="fab fa-js-square",this.isTestable.value=!0}clone(){let t=new j;return t.copy(this),t}copy(t){this.code.value=t.code.value}trigger(){let t=this.code.value,e=new Function(t)();return e instanceof Promise||(e=Promise.resolve()),e}serialize(){let t=super.serialize();return t.code=encodeURIComponent(this.code.value),t}deserialize(t){t&&(super.deserialize(t),this.code.value=decodeURIComponent(t.code))}}void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e});function W(){}Object.assign(W.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var i=this._listeners[t];if(void 0!==i){var n=i.indexOf(e);-1!==n&&i.splice(n,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var i=e.slice(0),n=0,r=i.length;n<r;n++)i[n].call(this,t)}}}});for(var q=[],X=0;X<256;X++)q[X]=(X<16?"0":"")+X.toString(16);var Y,Z={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(q[255&t]+q[t>>8&255]+q[t>>16&255]+q[t>>24&255]+"-"+q[255&e]+q[e>>8&255]+"-"+q[e>>16&15|64]+q[e>>24&255]+"-"+q[63&i|128]+q[i>>8&255]+"-"+q[i>>16&255]+q[i>>24&255]+q[255&n]+q[n>>8&255]+q[n>>16&255]+q[n>>24&255]).toUpperCase()},clamp:function(t,e,i){return Math.max(e,Math.min(i,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,i,n,r){return n+(t-e)*(r-n)/(i-e)},lerp:function(t,e,i){return(1-i)*t+i*e},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*Z.DEG2RAD},radToDeg:function(t){return t*Z.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,i,n,r){var a=Math.cos,s=Math.sin,o=a(i/2),l=s(i/2),c=a((e+n)/2),h=s((e+n)/2),u=a((e-n)/2),d=s((e-n)/2),p=a((n-e)/2),m=s((n-e)/2);"XYX"===r?t.set(o*h,l*u,l*d,o*c):"YZY"===r?t.set(l*d,o*h,l*u,o*c):"ZXZ"===r?t.set(l*u,l*d,o*h,o*c):"XZX"===r?t.set(o*h,l*m,l*p,o*c):"YXY"===r?t.set(l*p,o*h,l*m,o*c):"ZYZ"===r?t.set(l*m,l*p,o*h,o*c):console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.")}};function J(t,e){this.x=t||0,this.y=e||0}function Q(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(J.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(J.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this},clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){return Math.atan2(-this.y,-this.x)+Math.PI},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y;return e*e+i*i},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*i-a*n+t.x,this.y=r*n+a*i+t.y,this}}),Object.assign(Q.prototype,{isMatrix3:!0,set:function(t,e,i,n,r,a,s,o,l){var c=this.elements;return c[0]=t,c[1]=n,c[2]=s,c[3]=e,c[4]=r,c[5]=o,c[6]=i,c[7]=a,c[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this},extractBasis:function(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,a=i[0],s=i[3],o=i[6],l=i[1],c=i[4],h=i[7],u=i[2],d=i[5],p=i[8],m=n[0],f=n[3],v=n[6],g=n[1],y=n[4],x=n[7],w=n[2],b=n[5],_=n[8];return r[0]=a*m+s*g+o*w,r[3]=a*f+s*y+o*b,r[6]=a*v+s*x+o*_,r[1]=l*m+c*g+h*w,r[4]=l*f+c*y+h*b,r[7]=l*v+c*x+h*_,r[2]=u*m+d*g+p*w,r[5]=u*f+d*y+p*b,r[8]=u*v+d*x+p*_,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],i=t[1],n=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-i*r*c+i*s*o+n*r*l-n*a*o},getInverse:function(t,e){void 0!==e&&console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");var i=t.elements,n=this.elements,r=i[0],a=i[1],s=i[2],o=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],p=d*l-c*u,m=c*h-d*o,f=u*o-l*h,v=r*p+a*m+s*f;if(0===v)return this.set(0,0,0,0,0,0,0,0,0);var g=1/v;return n[0]=p*g,n[1]=(s*u-d*a)*g,n[2]=(c*a-s*l)*g,n[3]=m*g,n[4]=(d*r-s*h)*g,n[5]=(s*o-c*r)*g,n[6]=f*g,n[7]=(a*h-u*r)*g,n[8]=(l*r-a*o)*g,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,i,n,r,a,s){var o=Math.cos(r),l=Math.sin(r);this.set(i*o,i*l,-i*(o*a+l*s)+a+t,-n*l,n*o,-n*(-l*a+o*s)+s+e,0,0,1)},scale:function(t,e){var i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.elements,r=n[0],a=n[3],s=n[6],o=n[1],l=n[4],c=n[7];return n[0]=e*r+i*o,n[3]=e*a+i*l,n[6]=e*s+i*c,n[1]=-i*r+e*o,n[4]=-i*a+e*l,n[7]=-i*s+e*c,this},translate:function(t,e){var i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<9;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}});var K={getDataURL:function(t){var e;if("undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Y&&(Y=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Y.width=t.width,Y.height=t.height;var i=Y.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=Y}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}},$=0;function tt(t,e,i,n,r,a,s,o,l,c){Object.defineProperty(this,"id",{value:$++}),this.uuid=Z.generateUUID(),this.name="",this.image=void 0!==t?t:tt.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:tt.DEFAULT_MAPPING,this.wrapS=void 0!==i?i:1001,this.wrapT=void 0!==n?n:1001,this.magFilter=void 0!==r?r:1006,this.minFilter=void 0!==a?a:1008,this.anisotropy=void 0!==l?l:1,this.format=void 0!==s?s:1023,this.internalFormat=null,this.type=void 0!==o?o:1009,this.offset=new J(0,0),this.repeat=new J(1,1),this.center=new J(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Q,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==c?c:3e3,this.version=0,this.onUpdate=null}function et(t,e,i,n){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0!==n?n:1}function it(t,e,i){this.width=t,this.height=e,this.scissor=new et(0,0,t,e),this.scissorTest=!1,this.viewport=new et(0,0,t,e),i=i||{},this.texture=new tt(void 0,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.image={},this.texture.image.width=t,this.texture.image.height=e,this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:1006,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0===i.stencilBuffer||i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null}function nt(t,e,i){it.call(this,t,e,i),this.samples=4}function rt(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._w=void 0!==n?n:1}tt.DEFAULT_IMAGE=void 0,tt.DEFAULT_MAPPING=300,tt.prototype=Object.assign(Object.create(W.prototype),{constructor:tt,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var n=this.image;if(void 0===n.uuid&&(n.uuid=Z.generateUUID()),!e&&void 0===t.images[n.uuid]){var r;if(Array.isArray(n)){r=[];for(var a=0,s=n.length;a<s;a++)r.push(K.getDataURL(n[a]))}else r=K.getDataURL(n);t.images[n.uuid]={uuid:n.uuid,url:r}}i.image=n.uuid}return e||(t.textures[this.uuid]=i),i},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case 1e3:t.x=t.x-Math.floor(t.x);break;case 1001:t.x=t.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case 1e3:t.y=t.y-Math.floor(t.y);break;case 1001:t.y=t.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(tt.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.defineProperties(et.prototype,{width:{get:function(){return this.z},set:function(t){this.z=t}},height:{get:function(){return this.w},set:function(t){this.w=t}}}),Object.assign(et.prototype,{isVector4:!0,set:function(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*i+a[8]*n+a[12]*r,this.y=a[1]*e+a[5]*i+a[9]*n+a[13]*r,this.z=a[2]*e+a[6]*i+a[10]*n+a[14]*r,this.w=a[3]*e+a[7]*i+a[11]*n+a[15]*r,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,i,n,r,a=t.elements,s=a[0],o=a[4],l=a[8],c=a[1],h=a[5],u=a[9],d=a[2],p=a[6],m=a[10];if(Math.abs(o-c)<.01&&Math.abs(l-d)<.01&&Math.abs(u-p)<.01){if(Math.abs(o+c)<.1&&Math.abs(l+d)<.1&&Math.abs(u+p)<.1&&Math.abs(s+h+m-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var f=(s+1)/2,v=(h+1)/2,g=(m+1)/2,y=(o+c)/4,x=(l+d)/4,w=(u+p)/4;return f>v&&f>g?f<.01?(i=0,n=.707106781,r=.707106781):(n=y/(i=Math.sqrt(f)),r=x/i):v>g?v<.01?(i=.707106781,n=0,r=.707106781):(i=y/(n=Math.sqrt(v)),r=w/n):g<.01?(i=.707106781,n=.707106781,r=0):(i=x/(r=Math.sqrt(g)),n=w/r),this.set(i,n,r,e),this}var b=Math.sqrt((p-u)*(p-u)+(l-d)*(l-d)+(c-o)*(c-o));return Math.abs(b)<.001&&(b=1),this.x=(p-u)/b,this.y=(l-d)/b,this.z=(c-o)/b,this.w=Math.acos((s+h+m-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this},clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),it.prototype=Object.assign(Object.create(W.prototype),{constructor:it,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.texture.image.width=t,this.texture.image.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),nt.prototype=Object.assign(Object.create(it.prototype),{constructor:nt,isWebGLMultisampleRenderTarget:!0,copy:function(t){return it.prototype.copy.call(this,t),this.samples=t.samples,this}}),Object.assign(rt,{slerp:function(t,e,i,n){return i.copy(t).slerp(e,n)},slerpFlat:function(t,e,i,n,r,a,s){var o=i[n+0],l=i[n+1],c=i[n+2],h=i[n+3],u=r[a+0],d=r[a+1],p=r[a+2],m=r[a+3];if(h!==m||o!==u||l!==d||c!==p){var f=1-s,v=o*u+l*d+c*p+h*m,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),w=Math.atan2(x,v*g);f=Math.sin(f*w)/x,s=Math.sin(s*w)/x}var b=s*g;if(o=o*f+u*b,l=l*f+d*b,c=c*f+p*b,h=h*f+m*b,f===1-s){var _=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=_,l*=_,c*=_,h*=_}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}}),Object.defineProperties(rt.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this._onChangeCallback()}}}),Object.assign(rt.prototype,{isQuaternion:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var i=t._x,n=t._y,r=t._z,a=t.order,s=Math.cos,o=Math.sin,l=s(i/2),c=s(n/2),h=s(r/2),u=o(i/2),d=o(n/2),p=o(r/2);return"XYZ"===a?(this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p):"YXZ"===a?(this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p):"ZXY"===a?(this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p):"ZYX"===a?(this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p):"YZX"===a?(this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p):"XZY"===a&&(this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p),!1!==e&&this._onChangeCallback(),this},setFromAxisAngle:function(t,e){var i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this},setFromRotationMatrix:function(t){var e,i=t.elements,n=i[0],r=i[4],a=i[8],s=i[1],o=i[5],l=i[9],c=i[2],h=i[6],u=i[10],d=n+o+u;return d>0?(e=.5/Math.sqrt(d+1),this._w=.25/e,this._x=(h-l)*e,this._y=(a-c)*e,this._z=(s-r)*e):n>o&&n>u?(e=2*Math.sqrt(1+n-o-u),this._w=(h-l)/e,this._x=.25*e,this._y=(r+s)/e,this._z=(a+c)/e):o>u?(e=2*Math.sqrt(1+o-n-u),this._w=(a-c)/e,this._x=(r+s)/e,this._y=.25*e,this._z=(l+h)/e):(e=2*Math.sqrt(1+u-n-o),this._w=(s-r)/e,this._x=(a+c)/e,this._y=(l+h)/e,this._z=.25*e),this._onChangeCallback(),this},setFromUnitVectors:function(t,e){var i=t.dot(e)+1;return i<1e-6?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()},angleTo:function(t){return 2*Math.acos(Math.abs(Z.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var i=this.angleTo(t);if(0===i)return this;var n=Math.min(1,e/i);return this.slerp(t,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var i=t._x,n=t._y,r=t._z,a=t._w,s=e._x,o=e._y,l=e._z,c=e._w;return this._x=i*c+a*s+n*l-r*o,this._y=n*c+a*o+r*s-i*l,this._z=r*c+a*l+i*o-n*s,this._w=a*c-i*s-n*o-r*l,this._onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this._x,n=this._y,r=this._z,a=this._w,s=a*t._w+i*t._x+n*t._y+r*t._z;if(s<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,s=-s):this.copy(t),s>=1)return this._w=a,this._x=i,this._y=n,this._z=r,this;var o=1-s*s;if(o<=Number.EPSILON){var l=1-e;return this._w=l*a+e*this._w,this._x=l*i+e*this._x,this._y=l*n+e*this._y,this._z=l*r+e*this._z,this.normalize(),this._onChangeCallback(),this}var c=Math.sqrt(o),h=Math.atan2(c,s),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=a*u+this._w*d,this._x=i*u+this._x*d,this._y=n*u+this._y*d,this._z=r*u+this._z*d,this._onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},fromBufferAttribute:function(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}});var at=new ot,st=new rt;function ot(t,e,i){this.x=t||0,this.y=e||0,this.z=i||0}Object.assign(ot.prototype,{isVector3:!0,set:function(t,e,i){return this.x=t,this.y=e,this.z=i,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(st.setFromEuler(t))},applyAxisAngle:function(t,e){return this.applyQuaternion(st.setFromAxisAngle(t,e))},applyMatrix3:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6]*n,this.y=r[1]*e+r[4]*i+r[7]*n,this.z=r[2]*e+r[5]*i+r[8]*n,this},applyNormalMatrix:function(t){return this.applyMatrix3(t).normalize()},applyMatrix4:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements,a=1/(r[3]*e+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*e+r[4]*i+r[8]*n+r[12])*a,this.y=(r[1]*e+r[5]*i+r[9]*n+r[13])*a,this.z=(r[2]*e+r[6]*i+r[10]*n+r[14])*a,this},applyQuaternion:function(t){var e=this.x,i=this.y,n=this.z,r=t.x,a=t.y,s=t.z,o=t.w,l=o*e+a*n-s*i,c=o*i+s*e-r*n,h=o*n+r*i-a*e,u=-r*e-a*i-s*n;return this.x=l*o+u*-r+c*-s-h*-a,this.y=c*o+u*-a+h*-r-l*-s,this.z=h*o+u*-s+l*-a-c*-r,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)},transformDirection:function(t){var e=this.x,i=this.y,n=this.z,r=t.elements;return this.x=r[0]*e+r[4]*i+r[8]*n,this.y=r[1]*e+r[5]*i+r[9]*n,this.z=r[2]*e+r[6]*i+r[10]*n,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this},clampLength:function(t,e){var i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,i){return this.subVectors(e,t).multiplyScalar(i).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var i=t.x,n=t.y,r=t.z,a=e.x,s=e.y,o=e.z;return this.x=n*o-r*s,this.y=r*a-i*o,this.z=i*s-n*a,this},projectOnVector:function(t){var e=t.lengthSq();if(0===e)return this.set(0,0,0);var i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)},projectOnPlane:function(t){return at.copy(this).projectOnVector(t),this.sub(at)},reflect:function(t){return this.sub(at.copy(t).multiplyScalar(2*this.dot(t)))},angleTo:function(t){var e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;var i=this.dot(t)/e;return Math.acos(Z.clamp(i,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,i){var n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},setFromMatrix3Column:function(t,e){return this.fromArray(t.elements,3*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,i){return void 0!==i&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}});var lt=new ot,ct=new ft,ht=new ot(0,0,0),ut=new ot(1,1,1),dt=new ot,pt=new ot,mt=new ot;function ft(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(ft.prototype,{isMatrix4:!0,set:function(t,e,i,n,r,a,s,o,l,c,h,u,d,p,m,f){var v=this.elements;return v[0]=t,v[4]=e,v[8]=i,v[12]=n,v[1]=r,v[5]=a,v[9]=s,v[13]=o,v[2]=l,v[6]=c,v[10]=h,v[14]=u,v[3]=d,v[7]=p,v[11]=m,v[15]=f,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new ft).fromArray(this.elements)},copy:function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this},copyPosition:function(t){var e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this},extractBasis:function(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this},extractRotation:function(t){var e=this.elements,i=t.elements,n=1/lt.setFromMatrixColumn(t,0).length(),r=1/lt.setFromMatrixColumn(t,1).length(),a=1/lt.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*r,e[5]=i[5]*r,e[6]=i[6]*r,e[7]=0,e[8]=i[8]*a,e[9]=i[9]*a,e[10]=i[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,i=t.x,n=t.y,r=t.z,a=Math.cos(i),s=Math.sin(i),o=Math.cos(n),l=Math.sin(n),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){var u=a*c,d=a*h,p=s*c,m=s*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=d+p*l,e[5]=u-m*l,e[9]=-s*o,e[2]=m-u*l,e[6]=p+d*l,e[10]=a*o}else if("YXZ"===t.order){var f=o*c,v=o*h,g=l*c,y=l*h;e[0]=f+y*s,e[4]=g*s-v,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-s,e[2]=v*s-g,e[6]=y+f*s,e[10]=a*o}else if("ZXY"===t.order){f=o*c,v=o*h,g=l*c,y=l*h;e[0]=f-y*s,e[4]=-a*h,e[8]=g+v*s,e[1]=v+g*s,e[5]=a*c,e[9]=y-f*s,e[2]=-a*l,e[6]=s,e[10]=a*o}else if("ZYX"===t.order){u=a*c,d=a*h,p=s*c,m=s*h;e[0]=o*c,e[4]=p*l-d,e[8]=u*l+m,e[1]=o*h,e[5]=m*l+u,e[9]=d*l-p,e[2]=-l,e[6]=s*o,e[10]=a*o}else if("YZX"===t.order){var x=a*o,w=a*l,b=s*o,_=s*l;e[0]=o*c,e[4]=_-x*h,e[8]=b*h+w,e[1]=h,e[5]=a*c,e[9]=-s*c,e[2]=-l*c,e[6]=w*h+b,e[10]=x-_*h}else if("XZY"===t.order){x=a*o,w=a*l,b=s*o,_=s*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=x*h+_,e[5]=a*c,e[9]=w*h-b,e[2]=b*h-w,e[6]=s*c,e[10]=_*h+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:function(t){return this.compose(ht,t,ut)},lookAt:function(t,e,i){var n=this.elements;return mt.subVectors(t,e),0===mt.lengthSq()&&(mt.z=1),mt.normalize(),dt.crossVectors(i,mt),0===dt.lengthSq()&&(1===Math.abs(i.z)?mt.x+=1e-4:mt.z+=1e-4,mt.normalize(),dt.crossVectors(i,mt)),dt.normalize(),pt.crossVectors(mt,dt),n[0]=dt.x,n[4]=pt.x,n[8]=mt.x,n[1]=dt.y,n[5]=pt.y,n[9]=mt.y,n[2]=dt.z,n[6]=pt.z,n[10]=mt.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var i=t.elements,n=e.elements,r=this.elements,a=i[0],s=i[4],o=i[8],l=i[12],c=i[1],h=i[5],u=i[9],d=i[13],p=i[2],m=i[6],f=i[10],v=i[14],g=i[3],y=i[7],x=i[11],w=i[15],b=n[0],_=n[4],M=n[8],S=n[12],E=n[1],T=n[5],A=n[9],L=n[13],C=n[2],P=n[6],R=n[10],I=n[14],O=n[3],D=n[7],N=n[11],z=n[15];return r[0]=a*b+s*E+o*C+l*O,r[4]=a*_+s*T+o*P+l*D,r[8]=a*M+s*A+o*R+l*N,r[12]=a*S+s*L+o*I+l*z,r[1]=c*b+h*E+u*C+d*O,r[5]=c*_+h*T+u*P+d*D,r[9]=c*M+h*A+u*R+d*N,r[13]=c*S+h*L+u*I+d*z,r[2]=p*b+m*E+f*C+v*O,r[6]=p*_+m*T+f*P+v*D,r[10]=p*M+m*A+f*R+v*N,r[14]=p*S+m*L+f*I+v*z,r[3]=g*b+y*E+x*C+w*O,r[7]=g*_+y*T+x*P+w*D,r[11]=g*M+y*A+x*R+w*N,r[15]=g*S+y*L+x*I+w*z,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},determinant:function(){var t=this.elements,e=t[0],i=t[4],n=t[8],r=t[12],a=t[1],s=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-n*l*h-r*s*u+i*l*u+n*s*d-i*o*d)+t[7]*(+e*o*d-e*l*u+r*a*u-n*a*d+n*l*c-r*o*c)+t[11]*(+e*l*h-e*s*d-r*a*h+i*a*d+r*s*c-i*l*c)+t[15]*(-n*s*c-e*o*h+e*s*u+n*a*h-i*a*u+i*o*c)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t,e,i){var n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this},getInverse:function(t,e){void 0!==e&&console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");var i=this.elements,n=t.elements,r=n[0],a=n[1],s=n[2],o=n[3],l=n[4],c=n[5],h=n[6],u=n[7],d=n[8],p=n[9],m=n[10],f=n[11],v=n[12],g=n[13],y=n[14],x=n[15],w=p*y*u-g*m*u+g*h*f-c*y*f-p*h*x+c*m*x,b=v*m*u-d*y*u-v*h*f+l*y*f+d*h*x-l*m*x,_=d*g*u-v*p*u+v*c*f-l*g*f-d*c*x+l*p*x,M=v*p*h-d*g*h-v*c*m+l*g*m+d*c*y-l*p*y,S=r*w+a*b+s*_+o*M;if(0===S)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);var E=1/S;return i[0]=w*E,i[1]=(g*m*o-p*y*o-g*s*f+a*y*f+p*s*x-a*m*x)*E,i[2]=(c*y*o-g*h*o+g*s*u-a*y*u-c*s*x+a*h*x)*E,i[3]=(p*h*o-c*m*o-p*s*u+a*m*u+c*s*f-a*h*f)*E,i[4]=b*E,i[5]=(d*y*o-v*m*o+v*s*f-r*y*f-d*s*x+r*m*x)*E,i[6]=(v*h*o-l*y*o-v*s*u+r*y*u+l*s*x-r*h*x)*E,i[7]=(l*m*o-d*h*o+d*s*u-r*m*u-l*s*f+r*h*f)*E,i[8]=_*E,i[9]=(v*p*o-d*g*o-v*a*f+r*g*f+d*a*x-r*p*x)*E,i[10]=(l*g*o-v*c*o+v*a*u-r*g*u-l*a*x+r*c*x)*E,i[11]=(d*c*o-l*p*o-d*a*u+r*p*u+l*a*f-r*c*f)*E,i[12]=M*E,i[13]=(d*g*s-v*p*s+v*a*m-r*g*m-d*a*y+r*p*y)*E,i[14]=(v*c*s-l*g*s-v*a*h+r*g*h+l*a*y-r*c*y)*E,i[15]=(l*p*s-d*c*s+d*a*h-r*p*h-l*a*m+r*c*m)*E,this},scale:function(t){var e=this.elements,i=t.x,n=t.y,r=t.z;return e[0]*=i,e[4]*=n,e[8]*=r,e[1]*=i,e[5]*=n,e[9]*=r,e[2]*=i,e[6]*=n,e[10]*=r,e[3]*=i,e[7]*=n,e[11]*=r,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))},makeTranslation:function(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1-i,a=t.x,s=t.y,o=t.z,l=r*a,c=r*s;return this.set(l*a+i,l*s-n*o,l*o+n*s,0,l*s+n*o,c*s+i,c*o-n*a,0,l*o-n*s,c*o+n*a,r*o*o+i,0,0,0,0,1),this},makeScale:function(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this},makeShear:function(t,e,i){return this.set(1,e,i,0,t,1,i,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,i){var n=this.elements,r=e._x,a=e._y,s=e._z,o=e._w,l=r+r,c=a+a,h=s+s,u=r*l,d=r*c,p=r*h,m=a*c,f=a*h,v=s*h,g=o*l,y=o*c,x=o*h,w=i.x,b=i.y,_=i.z;return n[0]=(1-(m+v))*w,n[1]=(d+x)*w,n[2]=(p-y)*w,n[3]=0,n[4]=(d-x)*b,n[5]=(1-(u+v))*b,n[6]=(f+g)*b,n[7]=0,n[8]=(p+y)*_,n[9]=(f-g)*_,n[10]=(1-(u+m))*_,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this},decompose:function(t,e,i){var n=this.elements,r=lt.set(n[0],n[1],n[2]).length(),a=lt.set(n[4],n[5],n[6]).length(),s=lt.set(n[8],n[9],n[10]).length();this.determinant()<0&&(r=-r),t.x=n[12],t.y=n[13],t.z=n[14],ct.copy(this);var o=1/r,l=1/a,c=1/s;return ct.elements[0]*=o,ct.elements[1]*=o,ct.elements[2]*=o,ct.elements[4]*=l,ct.elements[5]*=l,ct.elements[6]*=l,ct.elements[8]*=c,ct.elements[9]*=c,ct.elements[10]*=c,e.setFromRotationMatrix(ct),i.x=r,i.y=a,i.z=s,this},makePerspective:function(t,e,i,n,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var s=this.elements,o=2*r/(e-t),l=2*r/(i-n),c=(e+t)/(e-t),h=(i+n)/(i-n),u=-(a+r)/(a-r),d=-2*a*r/(a-r);return s[0]=o,s[4]=0,s[8]=c,s[12]=0,s[1]=0,s[5]=l,s[9]=h,s[13]=0,s[2]=0,s[6]=0,s[10]=u,s[14]=d,s[3]=0,s[7]=0,s[11]=-1,s[15]=0,this},makeOrthographic:function(t,e,i,n,r,a){var s=this.elements,o=1/(e-t),l=1/(i-n),c=1/(a-r),h=(e+t)*o,u=(i+n)*l,d=(a+r)*c;return s[0]=2*o,s[4]=0,s[8]=0,s[12]=-h,s[1]=0,s[5]=2*l,s[9]=0,s[13]=-u,s[2]=0,s[6]=0,s[10]=-2*c,s[14]=-d,s[3]=0,s[7]=0,s[11]=0,s[15]=1,this},equals:function(t){for(var e=this.elements,i=t.elements,n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<16;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}});var vt=new ft,gt=new rt;function yt(t,e,i,n){this._x=t||0,this._y=e||0,this._z=i||0,this._order=n||yt.DefaultOrder}function xt(){this.mask=1}yt.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],yt.DefaultOrder="XYZ",Object.defineProperties(yt.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this._onChangeCallback()}}}),Object.assign(yt.prototype,{isEuler:!0,set:function(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._order=n||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this},setFromRotationMatrix:function(t,e,i){var n=Z.clamp,r=t.elements,a=r[0],s=r[4],o=r[8],l=r[1],c=r[5],h=r[9],u=r[2],d=r[6],p=r[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(n(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-s,a)):(this._x=Math.atan2(d,c),this._z=0)):"YXZ"===e?(this._x=Math.asin(-n(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(o,p),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===e?(this._x=Math.asin(n(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,p),this._z=Math.atan2(-s,c)):(this._y=0,this._z=Math.atan2(l,a))):"ZYX"===e?(this._y=Math.asin(-n(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,p),this._z=Math.atan2(l,a)):(this._x=0,this._z=Math.atan2(-s,c))):"YZX"===e?(this._z=Math.asin(n(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(o,p))):"XZY"===e?(this._z=Math.asin(-n(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(o,a)):(this._x=Math.atan2(-h,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==i&&this._onChangeCallback(),this},setFromQuaternion:function(t,e,i){return vt.makeRotationFromQuaternion(t),this.setFromRotationMatrix(vt,e,i)},setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:function(t){return gt.setFromEuler(this),this.setFromQuaternion(gt,t)},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new ot(this._x,this._y,this._z)},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}}),Object.assign(xt.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},enableAll:function(){this.mask=-1},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},disableAll:function(){this.mask=0},test:function(t){return 0!=(this.mask&t.mask)}});var wt=0,bt=new ot,_t=new rt,Mt=new ft,St=new ot,Et=new ot,Tt=new ot,At=new rt,Lt=new ot(1,0,0),Ct=new ot(0,1,0),Pt=new ot(0,0,1),Rt={type:"added"},It={type:"removed"};function Ot(){Object.defineProperty(this,"id",{value:wt++}),this.uuid=Z.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ot.DefaultUp.clone();var t=new ot,e=new yt,i=new rt,n=new ot(1,1,1);e._onChange((function(){i.setFromEuler(e,!1)})),i._onChange((function(){e.setFromQuaternion(i,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new ft},normalMatrix:{value:new Q}}),this.matrix=new ft,this.matrixWorld=new ft,this.matrixAutoUpdate=Ot.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new xt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function Dt(){Ot.call(this),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Ot.DefaultUp=new ot(0,1,0),Ot.DefaultMatrixAutoUpdate=!0,Ot.prototype=Object.assign(Object.create(W.prototype),{constructor:Ot,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(t,e){return _t.setFromAxisAngle(t,e),this.quaternion.multiply(_t),this},rotateOnWorldAxis:function(t,e){return _t.setFromAxisAngle(t,e),this.quaternion.premultiply(_t),this},rotateX:function(t){return this.rotateOnAxis(Lt,t)},rotateY:function(t){return this.rotateOnAxis(Ct,t)},rotateZ:function(t){return this.rotateOnAxis(Pt,t)},translateOnAxis:function(t,e){return bt.copy(t).applyQuaternion(this.quaternion),this.position.add(bt.multiplyScalar(e)),this},translateX:function(t){return this.translateOnAxis(Lt,t)},translateY:function(t){return this.translateOnAxis(Ct,t)},translateZ:function(t){return this.translateOnAxis(Pt,t)},localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(t){return t.applyMatrix4(Mt.getInverse(this.matrixWorld))},lookAt:function(t,e,i){t.isVector3?St.copy(t):St.set(t,e,i);var n=this.parent;this.updateWorldMatrix(!0,!1),Et.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Mt.lookAt(Et,St,this.up):Mt.lookAt(St,Et,this.up),this.quaternion.setFromRotationMatrix(Mt),n&&(Mt.extractRotation(n.matrixWorld),_t.setFromRotationMatrix(Mt),this.quaternion.premultiply(_t.inverse()))},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Rt)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var i=this.children.indexOf(t);return-1!==i&&(t.parent=null,this.children.splice(i,1),t.dispatchEvent(It)),this},attach:function(t){return this.updateWorldMatrix(!0,!1),Mt.getInverse(this.matrixWorld),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Mt.multiply(t.parent.matrixWorld)),t.applyMatrix4(Mt),t.updateWorldMatrix(!1,!1),this.add(t),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var i=0,n=this.children.length;i<n;i++){var r=this.children[i].getObjectByProperty(t,e);if(void 0!==r)return r}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new ot),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new rt),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Et,t,Tt),t},getWorldScale:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),t=new ot),this.updateMatrixWorld(!0),this.matrixWorld.decompose(Et,At,t),t},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new ot),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var i=this.parent;if(!0===t&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var n=this.children,r=0,a=n.length;r<a;r++)n[r].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var n={};function r(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){n.geometry=r(t.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var s=a.shapes;if(Array.isArray(s))for(var o=0,l=s.length;o<l;o++){var c=s[o];r(t.shapes,c)}else r(t.shapes,s)}}if(void 0!==this.material)if(Array.isArray(this.material)){var h=[];for(o=0,l=this.material.length;o<l;o++)h.push(r(t.materials,this.material[o]));n.material=h}else n.material=r(t.materials,this.material);if(this.children.length>0){n.children=[];for(o=0;o<this.children.length;o++)n.children.push(this.children[o].toJSON(t).object)}if(e){var u=f(t.geometries),d=f(t.materials),p=f(t.textures),m=f(t.images);s=f(t.shapes);u.length>0&&(i.geometries=u),d.length>0&&(i.materials=d),p.length>0&&(i.textures=p),m.length>0&&(i.images=m),s.length>0&&(i.shapes=s)}return i.object=n,i;function f(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var i=0;i<t.children.length;i++){var n=t.children[i];this.add(n.clone())}return this}}),Dt.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Dt,isScene:!0,copy:function(t,e){return Ot.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Ot.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.environment&&(e.object.environment=this.environment.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e},dispose:function(){this.dispatchEvent({type:"dispose"})}});var Nt=[new ot,new ot,new ot,new ot,new ot,new ot,new ot,new ot],zt=new ot,Ht=new Yt,Bt=new ot,Ut=new ot,Ft=new ot,Gt=new ot,kt=new ot,Vt=new ot,jt=new ot,Wt=new ot,qt=new ot,Xt=new ot;function Yt(t,e){this.min=void 0!==t?t:new ot(1/0,1/0,1/0),this.max=void 0!==e?e:new ot(-1/0,-1/0,-1/0)}function Zt(t,e,i,n,r){var a,s;for(a=0,s=t.length-3;a<=s;a+=3){Xt.fromArray(t,a);var o=r.x*Math.abs(Xt.x)+r.y*Math.abs(Xt.y)+r.z*Math.abs(Xt.z),l=e.dot(Xt),c=i.dot(Xt),h=n.dot(Xt);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>o)return!1}return!0}Object.assign(Yt.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,a=-1/0,s=-1/0,o=0,l=t.length;o<l;o+=3){var c=t[o],h=t[o+1],u=t[o+2];c<e&&(e=c),h<i&&(i=h),u<n&&(n=u),c>r&&(r=c),h>a&&(a=h),u>s&&(s=u)}return this.min.set(e,i,n),this.max.set(r,a,s),this},setFromBufferAttribute:function(t){for(var e=1/0,i=1/0,n=1/0,r=-1/0,a=-1/0,s=-1/0,o=0,l=t.count;o<l;o++){var c=t.getX(o),h=t.getY(o),u=t.getZ(o);c<e&&(e=c),h<i&&(i=h),u<n&&(n=u),c>r&&(r=c),h>a&&(a=h),u>s&&(s=u)}return this.min.set(e,i,n),this.max.set(r,a,s),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var i=zt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this},setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new ot),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new ot),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(t){t.updateWorldMatrix(!1,!1);var e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),Ht.copy(e.boundingBox),Ht.applyMatrix4(t.matrixWorld),this.union(Ht));for(var i=t.children,n=0,r=i.length;n<r;n++)this.expandByObject(i[n]);return this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new ot),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:function(t){return this.clampPoint(t.center,zt),zt.distanceToSquared(t.center)<=t.radius*t.radius},intersectsPlane:function(t){var e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant},intersectsTriangle:function(t){if(this.isEmpty())return!1;this.getCenter(jt),Wt.subVectors(this.max,jt),Bt.subVectors(t.a,jt),Ut.subVectors(t.b,jt),Ft.subVectors(t.c,jt),Gt.subVectors(Ut,Bt),kt.subVectors(Ft,Ut),Vt.subVectors(Bt,Ft);var e=[0,-Gt.z,Gt.y,0,-kt.z,kt.y,0,-Vt.z,Vt.y,Gt.z,0,-Gt.x,kt.z,0,-kt.x,Vt.z,0,-Vt.x,-Gt.y,Gt.x,0,-kt.y,kt.x,0,-Vt.y,Vt.x,0];return!!Zt(e,Bt,Ut,Ft,Wt)&&(!!Zt(e=[1,0,0,0,1,0,0,0,1],Bt,Ut,Ft,Wt)&&(qt.crossVectors(Gt,kt),Zt(e=[qt.x,qt.y,qt.z],Bt,Ut,Ft,Wt)))},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new ot),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return zt.copy(t).clamp(this.min,this.max).sub(t).length()},getBoundingSphere:function(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(zt).length(),t},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:function(t){return this.isEmpty()||(Nt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Nt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Nt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Nt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Nt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Nt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Nt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Nt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Nt)),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var Jt=new Yt;function Qt(t,e){this.center=void 0!==t?t:new ot,this.radius=void 0!==e?e:0}Object.assign(Qt.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:function(t,e){var i=this.center;void 0!==e?i.copy(e):Jt.setFromPoints(t).getCenter(i);for(var n=0,r=0,a=t.length;r<a;r++)n=Math.max(n,i.distanceToSquared(t[r]));return this.radius=Math.sqrt(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var i=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new ot),e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new Yt),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}});var Kt=new ot,$t=new ot,te=new ot,ee=new ot,ie=new ot,ne=new ot,re=new ot;function ae(t,e){this.origin=void 0!==t?t:new ot,this.direction=void 0!==e?e:new ot(0,0,-1)}Object.assign(ae.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new ot),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(t){return this.origin.copy(this.at(t,Kt)),this},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new ot),e.subVectors(t,this.origin);var i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(t){var e=Kt.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Kt.copy(this.direction).multiplyScalar(e).add(this.origin),Kt.distanceToSquared(t))},distanceSqToSegment:function(t,e,i,n){$t.copy(t).add(e).multiplyScalar(.5),te.copy(e).sub(t).normalize(),ee.copy(this.origin).sub($t);var r,a,s,o,l=.5*t.distanceTo(e),c=-this.direction.dot(te),h=ee.dot(this.direction),u=-ee.dot(te),d=ee.lengthSq(),p=Math.abs(1-c*c);if(p>0)if(a=c*h-u,o=l*p,(r=c*u-h)>=0)if(a>=-o)if(a<=o){var m=1/p;s=(r*=m)*(r+c*(a*=m)+2*h)+a*(c*r+a+2*u)+d}else a=l,s=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+d;else a=-l,s=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+d;else a<=-o?s=-(r=Math.max(0,-(-c*l+h)))*r+(a=r>0?-l:Math.min(Math.max(-l,-u),l))*(a+2*u)+d:a<=o?(r=0,s=(a=Math.min(Math.max(-l,-u),l))*(a+2*u)+d):s=-(r=Math.max(0,-(c*l+h)))*r+(a=r>0?l:Math.min(Math.max(-l,-u),l))*(a+2*u)+d;else a=c>0?-l:l,s=-(r=Math.max(0,-(c*a+h)))*r+a*(a+2*u)+d;return i&&i.copy(this.direction).multiplyScalar(r).add(this.origin),n&&n.copy(te).multiplyScalar(a).add($t),s},intersectSphere:function(t,e){Kt.subVectors(t.center,this.origin);var i=Kt.dot(this.direction),n=Kt.dot(Kt)-i*i,r=t.radius*t.radius;if(n>r)return null;var a=Math.sqrt(r-n),s=i-a,o=i+a;return s<0&&o<0?null:s<0?this.at(o,e):this.at(s,e)},intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null},intersectPlane:function(t,e){var i=this.distanceToPlane(t);return null===i?null:this.at(i,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var i,n,r,a,s,o,l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(i=(t.min.x-u.x)*l,n=(t.max.x-u.x)*l):(i=(t.max.x-u.x)*l,n=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),i>a||r>n?null:((r>i||i!=i)&&(i=r),(a<n||n!=n)&&(n=a),h>=0?(s=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(s=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),i>o||s>n?null:((s>i||i!=i)&&(i=s),(o<n||n!=n)&&(n=o),n<0?null:this.at(i>=0?i:n,e)))},intersectsBox:function(t){return null!==this.intersectBox(t,Kt)},intersectTriangle:function(t,e,i,n,r){ie.subVectors(e,t),ne.subVectors(i,t),re.crossVectors(ie,ne);var a,s=this.direction.dot(re);if(s>0){if(n)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}ee.subVectors(this.origin,t);var o=a*this.direction.dot(ne.crossVectors(ee,ne));if(o<0)return null;var l=a*this.direction.dot(ie.cross(ee));if(l<0)return null;if(o+l>s)return null;var c=-a*ee.dot(re);return c<0?null:this.at(c/s,r)},applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}});var se=new ot,oe=new ot,le=new Q;function ce(t,e){this.normal=void 0!==t?t:new ot(1,0,0),this.constant=void 0!==e?e:0}Object.assign(ce.prototype,{isPlane:!0,set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(t,e,i){var n=se.subVectors(i,e).cross(oe.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new ot),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new ot);var i=t.delta(se),n=this.normal.dot(i);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):void 0;var r=-(t.start.dot(this.normal)+this.constant)/n;return r<0||r>1?void 0:e.copy(i).multiplyScalar(r).add(t.start)},intersectsLine:function(t){var e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new ot),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(t,e){var i=e||le.getNormalMatrix(t),n=this.coplanarPoint(se).applyMatrix4(t),r=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(r),this},translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}});var he=new ot,ue=new ot,de=new ot,pe=new ot,me=new ot,fe=new ot,ve=new ot,ge=new ot,ye=new ot,xe=new ot;function we(t,e,i){this.a=void 0!==t?t:new ot,this.b=void 0!==e?e:new ot,this.c=void 0!==i?i:new ot}Object.assign(we,{getNormal:function(t,e,i,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new ot),n.subVectors(i,e),he.subVectors(t,e),n.cross(he);var r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)},getBarycoord:function(t,e,i,n,r){he.subVectors(n,e),ue.subVectors(i,e),de.subVectors(t,e);var a=he.dot(he),s=he.dot(ue),o=he.dot(de),l=ue.dot(ue),c=ue.dot(de),h=a*l-s*s;if(void 0===r&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),r=new ot),0===h)return r.set(-2,-1,-1);var u=1/h,d=(l*o-s*c)*u,p=(a*c-s*o)*u;return r.set(1-d-p,p,d)},containsPoint:function(t,e,i,n){return we.getBarycoord(t,e,i,n,pe),pe.x>=0&&pe.y>=0&&pe.x+pe.y<=1},getUV:function(t,e,i,n,r,a,s,o){return this.getBarycoord(t,e,i,n,pe),o.set(0,0),o.addScaledVector(r,pe.x),o.addScaledVector(a,pe.y),o.addScaledVector(s,pe.z),o},isFrontFacing:function(t,e,i,n){return he.subVectors(i,e),ue.subVectors(t,e),he.cross(ue).dot(n)<0}}),Object.assign(we.prototype,{set:function(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this},setFromPointsAndIndices:function(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){return he.subVectors(this.c,this.b),ue.subVectors(this.a,this.b),.5*he.cross(ue).length()},getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new ot),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return we.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new ce),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return we.getBarycoord(t,this.a,this.b,this.c,e)},getUV:function(t,e,i,n,r){return we.getUV(t,this.a,this.b,this.c,e,i,n,r)},containsPoint:function(t){return we.containsPoint(t,this.a,this.b,this.c)},isFrontFacing:function(t){return we.isFrontFacing(this.a,this.b,this.c,t)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new ot);var i,n,r=this.a,a=this.b,s=this.c;me.subVectors(a,r),fe.subVectors(s,r),ge.subVectors(t,r);var o=me.dot(ge),l=fe.dot(ge);if(o<=0&&l<=0)return e.copy(r);ye.subVectors(t,a);var c=me.dot(ye),h=fe.dot(ye);if(c>=0&&h<=c)return e.copy(a);var u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return i=o/(o-c),e.copy(r).addScaledVector(me,i);xe.subVectors(t,s);var d=me.dot(xe),p=fe.dot(xe);if(p>=0&&d<=p)return e.copy(s);var m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return n=l/(l-p),e.copy(r).addScaledVector(fe,n);var f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return ve.subVectors(s,a),n=(h-c)/(h-c+(d-p)),e.copy(a).addScaledVector(ve,n);var v=1/(f+m+u);return i=m*v,n=u*v,e.copy(r).addScaledVector(me,i).addScaledVector(fe,n)},equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}});var be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},_e={h:0,s:0,l:0},Me={h:0,s:0,l:0};function Se(t,e,i){return void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}function Ee(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}function Te(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Ae(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}function Le(t,e,i,n,r,a){this.a=t,this.b=e,this.c=i,this.normal=n&&n.isVector3?n:new ot,this.vertexNormals=Array.isArray(n)?n:[],this.color=r&&r.isColor?r:new Se,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==a?a:0}Object.assign(Se.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,i){return this.r=t,this.g=e,this.b=i,this},setHSL:function(t,e,i){if(t=Z.euclideanModulo(t,1),e=Z.clamp(e,0,1),i=Z.clamp(i,0,1),0===e)this.r=this.g=this.b=i;else{var n=i<=.5?i*(1+e):i+e-i*e,r=2*i-n;this.r=Ee(r,n,t+1/3),this.g=Ee(r,n,t),this.b=Ee(r,n,t-1/3)}return this},setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var i;if(i=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var n,r=i[1],a=i[2];switch(r){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,e(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,e(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var s=parseFloat(n[1])/360,o=parseInt(n[2],10)/100,l=parseInt(n[3],10)/100;return e(n[5]),this.setHSL(s,o,l)}}}else if(i=/^\#([A-Fa-f0-9]+)$/.exec(t)){var c=i[1],h=c.length;if(3===h)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this},setColorName:function(t){var e=be[t];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(t){return this.r=Te(t.r),this.g=Te(t.g),this.b=Te(t.b),this},copyLinearToSRGB:function(t){return this.r=Ae(t.r),this.g=Ae(t.g),this.b=Ae(t.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,i,n=this.r,r=this.g,a=this.b,s=Math.max(n,r,a),o=Math.min(n,r,a),l=(o+s)/2;if(o===s)e=0,i=0;else{var c=s-o;switch(i=l<=.5?c/(s+o):c/(2-s-o),s){case n:e=(r-a)/c+(r<a?6:0);break;case r:e=(a-n)/c+2;break;case a:e=(n-r)/c+4}e/=6}return t.h=e,t.s=i,t.l=l,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(t,e,i){return this.getHSL(_e),_e.h+=t,_e.s+=e,_e.l+=i,this.setHSL(_e.h,_e.s,_e.l),this},add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:function(t,e){this.getHSL(_e),t.getHSL(Me);var i=Z.lerp(_e.h,Me.h,e),n=Z.lerp(_e.s,Me.s,e),r=Z.lerp(_e.l,Me.l,e);return this.setHSL(i,n,r),this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}}),Se.NAMES=be,Object.assign(Le.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,i=t.vertexNormals.length;e<i;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,i=t.vertexColors.length;e<i;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}});var Ce=0;function Pe(){Object.defineProperty(this,"id",{value:Ce++}),this.uuid=Z.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.flatShading=!1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}function Re(t){Pe.call(this),this.type="MeshBasicMaterial",this.color=new Se(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(t)}Pe.prototype=Object.assign(Object.create(W.prototype),{constructor:Pe,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var i=t[e];if(void 0!==i)if("shading"!==e){var n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===i;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){var e=[];for(var i in t){var n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(i.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,i.reflectivity=this.reflectivity,i.refractionRatio=this.refractionRatio,void 0!==this.combine&&(i.combine=this.combine),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),!0===this.flatShading&&(i.flatShading=this.flatShading),0!==this.side&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(i.morphTargets=!0),!0===this.morphNormals&&(i.morphNormals=!0),!0===this.skinning&&(i.skinning=!0),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){var r=n(t.textures),a=n(t.images);r.length>0&&(i.textures=r),a.length>0&&(i.images=a)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;var e=t.clippingPlanes,i=null;if(null!==e){var n=e.length;i=new Array(n);for(var r=0;r!==n;++r)i[r]=e[r].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(Pe.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Re.prototype=Object.create(Pe.prototype),Re.prototype.constructor=Re,Re.prototype.isMeshBasicMaterial=!0,Re.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this};var Ie=new ot;function Oe(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}function De(t,e,i){Oe.call(this,new Int8Array(t),e,i)}function Ne(t,e,i){Oe.call(this,new Uint8Array(t),e,i)}function ze(t,e,i){Oe.call(this,new Uint8ClampedArray(t),e,i)}function He(t,e,i){Oe.call(this,new Int16Array(t),e,i)}function Be(t,e,i){Oe.call(this,new Uint16Array(t),e,i)}function Ue(t,e,i){Oe.call(this,new Int32Array(t),e,i)}function Fe(t,e,i){Oe.call(this,new Uint32Array(t),e,i)}function Ge(t,e,i){Oe.call(this,new Float32Array(t),e,i)}function ke(t,e,i){Oe.call(this,new Float64Array(t),e,i)}function Ve(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function je(t){if(0===t.length)return-1/0;for(var e=t[0],i=1,n=t.length;i<n;++i)t[i]>e&&(e=t[i]);return e}Object.defineProperty(Oe.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Oe.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this},copyAt:function(t,e,i){t*=this.itemSize,i*=e.itemSize;for(var n=0,r=this.itemSize;n<r;n++)this.array[t+n]=e.array[i+n];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new Se),e[i++]=a.r,e[i++]=a.g,e[i++]=a.b}return this},copyVector2sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new J),e[i++]=a.x,e[i++]=a.y}return this},copyVector3sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new ot),e[i++]=a.x,e[i++]=a.y,e[i++]=a.z}return this},copyVector4sArray:function(t){for(var e=this.array,i=0,n=0,r=t.length;n<r;n++){var a=t[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new et),e[i++]=a.x,e[i++]=a.y,e[i++]=a.z,e[i++]=a.w}return this},applyMatrix3:function(t){for(var e=0,i=this.count;e<i;e++)Ie.x=this.getX(e),Ie.y=this.getY(e),Ie.z=this.getZ(e),Ie.applyMatrix3(t),this.setXYZ(e,Ie.x,Ie.y,Ie.z);return this},applyMatrix4:function(t){for(var e=0,i=this.count;e<i;e++)Ie.x=this.getX(e),Ie.y=this.getY(e),Ie.z=this.getZ(e),Ie.applyMatrix4(t),this.setXYZ(e,Ie.x,Ie.y,Ie.z);return this},applyNormalMatrix:function(t){for(var e=0,i=this.count;e<i;e++)Ie.x=this.getX(e),Ie.y=this.getY(e),Ie.z=this.getZ(e),Ie.applyNormalMatrix(t),this.setXYZ(e,Ie.x,Ie.y,Ie.z);return this},transformDirection:function(t){for(var e=0,i=this.count;e<i;e++)Ie.x=this.getX(e),Ie.y=this.getY(e),Ie.z=this.getZ(e),Ie.transformDirection(t),this.setXYZ(e,Ie.x,Ie.y,Ie.z);return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=r,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),De.prototype=Object.create(Oe.prototype),De.prototype.constructor=De,Ne.prototype=Object.create(Oe.prototype),Ne.prototype.constructor=Ne,ze.prototype=Object.create(Oe.prototype),ze.prototype.constructor=ze,He.prototype=Object.create(Oe.prototype),He.prototype.constructor=He,Be.prototype=Object.create(Oe.prototype),Be.prototype.constructor=Be,Ue.prototype=Object.create(Oe.prototype),Ue.prototype.constructor=Ue,Fe.prototype=Object.create(Oe.prototype),Fe.prototype.constructor=Fe,Ge.prototype=Object.create(Oe.prototype),Ge.prototype.constructor=Ge,ke.prototype=Object.create(Oe.prototype),ke.prototype.constructor=ke,Object.assign(Ve.prototype,{computeGroups:function(t){for(var e,i=[],n=void 0,r=t.faces,a=0;a<r.length;a++){var s=r[a];s.materialIndex!==n&&(n=s.materialIndex,void 0!==e&&(e.count=3*a-e.start,i.push(e)),e={start:3*a,materialIndex:n})}void 0!==e&&(e.count=3*a-e.start,i.push(e)),this.groups=i},fromGeometry:function(t){var e,i=t.faces,n=t.vertices,r=t.faceVertexUvs,a=r[0]&&r[0].length>0,s=r[1]&&r[1].length>0,o=t.morphTargets,l=o.length;if(l>0){e=[];for(var c=0;c<l;c++)e[c]={name:o[c].name,data:[]};this.morphTargets.position=e}var h,u=t.morphNormals,d=u.length;if(d>0){h=[];for(c=0;c<d;c++)h[c]={name:u[c].name,data:[]};this.morphTargets.normal=h}var p=t.skinIndices,m=t.skinWeights,f=p.length===n.length,v=m.length===n.length;n.length>0&&0===i.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(c=0;c<i.length;c++){var g=i[c];this.vertices.push(n[g.a],n[g.b],n[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var w,b=g.vertexColors;if(3===b.length)this.colors.push(b[0],b[1],b[2]);else{var _=g.color;this.colors.push(_,_,_)}if(!0===a)void 0!==(w=r[0][c])?this.uvs.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",c),this.uvs.push(new J,new J,new J));if(!0===s)void 0!==(w=r[1][c])?this.uvs2.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",c),this.uvs2.push(new J,new J,new J));for(var M=0;M<l;M++){var S=o[M].vertices;e[M].data.push(S[g.a],S[g.b],S[g.c])}for(M=0;M<d;M++){var E=u[M].vertexNormals[c];h[M].data.push(E.a,E.b,E.c)}f&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),v&&this.skinWeights.push(m[g.a],m[g.b],m[g.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this}});var We=1,qe=new ft,Xe=new Ot,Ye=new ot,Ze=new Yt,Je=new Yt,Qe=new ot;function Ke(){Object.defineProperty(this,"id",{value:We+=2}),this.uuid=Z.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}Ke.prototype=Object.assign(Object.create(W.prototype),{constructor:Ke,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(je(t)>65535?Fe:Be)(t,1):this.index=t},getAttribute:function(t){return this.attributes[t]},setAttribute:function(t,e){return this.attributes[t]=e,this},deleteAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,i){this.groups.push({start:t,count:e,materialIndex:void 0!==i?i:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix4:function(t){var e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);var i=this.attributes.normal;if(void 0!==i){var n=(new Q).getNormalMatrix(t);i.applyNormalMatrix(n),i.needsUpdate=!0}var r=this.attributes.tangent;return void 0!==r&&(r.transformDirection(t),r.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(t){return qe.makeRotationX(t),this.applyMatrix4(qe),this},rotateY:function(t){return qe.makeRotationY(t),this.applyMatrix4(qe),this},rotateZ:function(t){return qe.makeRotationZ(t),this.applyMatrix4(qe),this},translate:function(t,e,i){return qe.makeTranslation(t,e,i),this.applyMatrix4(qe),this},scale:function(t,e,i){return qe.makeScale(t,e,i),this.applyMatrix4(qe),this},lookAt:function(t){return Xe.lookAt(t),Xe.updateMatrix(),this.applyMatrix4(Xe.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ye).negate(),this.translate(Ye.x,Ye.y,Ye.z),this},setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var i=new Ge(3*e.vertices.length,3),n=new Ge(3*e.colors.length,3);if(this.setAttribute("position",i.copyVector3sArray(e.vertices)),this.setAttribute("color",n.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var r=new Ge(e.lineDistances.length,1);this.setAttribute("lineDistance",r.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i];e.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new Ge(e,3)),this},updateFromObject:function(t){var e,i=t.geometry;if(t.isMesh){var n=i.__directGeometry;if(!0===i.elementsNeedUpdate&&(n=void 0,i.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(i);n.verticesNeedUpdate=i.verticesNeedUpdate,n.normalsNeedUpdate=i.normalsNeedUpdate,n.colorsNeedUpdate=i.colorsNeedUpdate,n.uvsNeedUpdate=i.uvsNeedUpdate,n.groupsNeedUpdate=i.groupsNeedUpdate,i.verticesNeedUpdate=!1,i.normalsNeedUpdate=!1,i.colorsNeedUpdate=!1,i.uvsNeedUpdate=!1,i.groupsNeedUpdate=!1,i=n}return!0===i.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(i.vertices),e.needsUpdate=!0),i.verticesNeedUpdate=!1),!0===i.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(i.normals),e.needsUpdate=!0),i.normalsNeedUpdate=!1),!0===i.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(i.colors),e.needsUpdate=!0),i.colorsNeedUpdate=!1),i.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(i.uvs),e.needsUpdate=!0),i.uvsNeedUpdate=!1),i.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(i.lineDistances),e.needsUpdate=!0),i.lineDistancesNeedUpdate=!1),i.groupsNeedUpdate&&(i.computeGroups(t.geometry),this.groups=i.groups,i.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new Ve).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.setAttribute("position",new Oe(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var i=new Float32Array(3*t.normals.length);this.setAttribute("normal",new Oe(i,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var n=new Float32Array(3*t.colors.length);this.setAttribute("color",new Oe(n,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var r=new Float32Array(2*t.uvs.length);this.setAttribute("uv",new Oe(r,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var a=new Float32Array(2*t.uvs2.length);this.setAttribute("uv2",new Oe(a,2).copyVector2sArray(t.uvs2))}for(var s in this.groups=t.groups,t.morphTargets){for(var o=[],l=t.morphTargets[s],c=0,h=l.length;c<h;c++){var u=l[c],d=new Ge(3*u.data.length,3);d.name=u.name,o.push(d.copyVector3sArray(u.data))}this.morphAttributes[s]=o}if(t.skinIndices.length>0){var p=new Ge(4*t.skinIndices.length,4);this.setAttribute("skinIndex",p.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var m=new Ge(4*t.skinWeights.length,4);this.setAttribute("skinWeight",m.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Yt);var t=this.attributes.position,e=this.morphAttributes.position;if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(var i=0,n=e.length;i<n;i++){var r=e[i];Ze.setFromBufferAttribute(r),this.morphTargetsRelative?(Qe.addVectors(this.boundingBox.min,Ze.min),this.boundingBox.expandByPoint(Qe),Qe.addVectors(this.boundingBox.max,Ze.max),this.boundingBox.expandByPoint(Qe)):(this.boundingBox.expandByPoint(Ze.min),this.boundingBox.expandByPoint(Ze.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Qt);var t=this.attributes.position,e=this.morphAttributes.position;if(t){var i=this.boundingSphere.center;if(Ze.setFromBufferAttribute(t),e)for(var n=0,r=e.length;n<r;n++){var a=e[n];Je.setFromBufferAttribute(a),this.morphTargetsRelative?(Qe.addVectors(Ze.min,Je.min),Ze.expandByPoint(Qe),Qe.addVectors(Ze.max,Je.max),Ze.expandByPoint(Qe)):(Ze.expandByPoint(Je.min),Ze.expandByPoint(Je.max))}Ze.getCenter(i);var s=0;for(n=0,r=t.count;n<r;n++)Qe.fromBufferAttribute(t,n),s=Math.max(s,i.distanceToSquared(Qe));if(e)for(n=0,r=e.length;n<r;n++){a=e[n];for(var o=this.morphTargetsRelative,l=0,c=a.count;l<c;l++)Qe.fromBufferAttribute(a,l),o&&(Ye.fromBufferAttribute(t,l),Qe.add(Ye)),s=Math.max(s,i.distanceToSquared(Qe))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var i=e.position.array;if(void 0===e.normal)this.setAttribute("normal",new Oe(new Float32Array(i.length),3));else for(var n=e.normal.array,r=0,a=n.length;r<a;r++)n[r]=0;var s,o,l,c=e.normal.array,h=new ot,u=new ot,d=new ot,p=new ot,m=new ot;if(t){var f=t.array;for(r=0,a=t.count;r<a;r+=3)s=3*f[r+0],o=3*f[r+1],l=3*f[r+2],h.fromArray(i,s),u.fromArray(i,o),d.fromArray(i,l),p.subVectors(d,u),m.subVectors(h,u),p.cross(m),c[s]+=p.x,c[s+1]+=p.y,c[s+2]+=p.z,c[o]+=p.x,c[o+1]+=p.y,c[o+2]+=p.z,c[l]+=p.x,c[l+1]+=p.y,c[l+2]+=p.z}else for(r=0,a=i.length;r<a;r+=9)h.fromArray(i,r),u.fromArray(i,r+3),d.fromArray(i,r+6),p.subVectors(d,u),m.subVectors(h,u),p.cross(m),c[r]=p.x,c[r+1]=p.y,c[r+2]=p.z,c[r+3]=p.x,c[r+4]=p.y,c[r+5]=p.z,c[r+6]=p.x,c[r+7]=p.y,c[r+8]=p.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var i=this.attributes;for(var n in i)if(void 0!==t.attributes[n])for(var r=i[n].array,a=t.attributes[n],s=a.array,o=a.itemSize*e,l=Math.min(s.length,r.length-o),c=0,h=o;c<l;c++,h++)r[h]=s[c];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){for(var t=this.attributes.normal,e=0,i=t.count;e<i;e++)Qe.x=t.getX(e),Qe.y=t.getY(e),Qe.z=t.getZ(e),Qe.normalize(),t.setXYZ(e,Qe.x,Qe.y,Qe.z)},toNonIndexed:function(){function t(t,e){for(var i=t.array,n=t.itemSize,r=new i.constructor(e.length*n),a=0,s=0,o=0,l=e.length;o<l;o++){a=e[o]*n;for(var c=0;c<n;c++)r[s++]=i[a++]}return new Oe(r,n)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new Ke,i=this.index.array,n=this.attributes;for(var r in n){var a=t(n[r],i);e.setAttribute(r,a)}var s=this.morphAttributes;for(r in s){for(var o=[],l=s[r],c=0,h=l.length;c<h;c++){a=t(l[c],i);o.push(a)}e.morphAttributes[r]=o}e.morphTargetsRelative=this.morphTargetsRelative;for(var u=this.groups,d=(c=0,u.length);c<d;c++){var p=u[c];e.addGroup(p.start,p.count,p.materialIndex)}return e},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};var n=this.index;null!==n&&(t.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});var r=this.attributes;for(var i in r){var a=(d=r[i]).toJSON();""!==d.name&&(a.name=d.name),t.data.attributes[i]=a}var s={},o=!1;for(var i in this.morphAttributes){for(var l=this.morphAttributes[i],c=[],h=0,u=l.length;h<u;h++){var d;a=(d=l[h]).toJSON();""!==d.name&&(a.name=d.name),c.push(a)}c.length>0&&(s[i]=c,o=!0)}o&&(t.data.morphAttributes=s,t.data.morphTargetsRelative=this.morphTargetsRelative);var p=this.groups;p.length>0&&(t.data.groups=JSON.parse(JSON.stringify(p)));var m=this.boundingSphere;return null!==m&&(t.data.boundingSphere={center:m.center.toArray(),radius:m.radius}),t},clone:function(){return(new Ke).copy(this)},copy:function(t){var e,i,n;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var r=t.index;null!==r&&this.setIndex(r.clone());var a=t.attributes;for(e in a){var s=a[e];this.setAttribute(e,s.clone())}var o=t.morphAttributes;for(e in o){var l=[],c=o[e];for(i=0,n=c.length;i<n;i++)l.push(c[i].clone());this.morphAttributes[e]=l}this.morphTargetsRelative=t.morphTargetsRelative;var h=t.groups;for(i=0,n=h.length;i<n;i++){var u=h[i];this.addGroup(u.start,u.count,u.materialIndex)}var d=t.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=t.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var $e=new ft,ti=new ae,ei=new Qt,ii=new ot,ni=new ot,ri=new ot,ai=new ot,si=new ot,oi=new ot,li=new ot,ci=new ot,hi=new ot,ui=new J,di=new J,pi=new J,mi=new ot,fi=new ot;function vi(t,e){Ot.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new Ke,this.material=void 0!==e?e:new Re,this.updateMorphTargets()}function gi(t,e,i,n,r,a,s,o){if(null===(1===e.side?n.intersectTriangle(s,a,r,!0,o):n.intersectTriangle(r,a,s,2!==e.side,o)))return null;fi.copy(o),fi.applyMatrix4(t.matrixWorld);var l=i.ray.origin.distanceTo(fi);return l<i.near||l>i.far?null:{distance:l,point:fi.clone(),object:t}}function yi(t,e,i,n,r,a,s,o,l,c,h,u){ii.fromBufferAttribute(r,c),ni.fromBufferAttribute(r,h),ri.fromBufferAttribute(r,u);var d=t.morphTargetInfluences;if(e.morphTargets&&a&&d){li.set(0,0,0),ci.set(0,0,0),hi.set(0,0,0);for(var p=0,m=a.length;p<m;p++){var f=d[p],v=a[p];0!==f&&(ai.fromBufferAttribute(v,c),si.fromBufferAttribute(v,h),oi.fromBufferAttribute(v,u),s?(li.addScaledVector(ai,f),ci.addScaledVector(si,f),hi.addScaledVector(oi,f)):(li.addScaledVector(ai.sub(ii),f),ci.addScaledVector(si.sub(ni),f),hi.addScaledVector(oi.sub(ri),f)))}ii.add(li),ni.add(ci),ri.add(hi)}var g=gi(t,e,i,n,ii,ni,ri,mi);if(g){o&&(ui.fromBufferAttribute(o,c),di.fromBufferAttribute(o,h),pi.fromBufferAttribute(o,u),g.uv=we.getUV(mi,ii,ni,ri,ui,di,pi,new J)),l&&(ui.fromBufferAttribute(l,c),di.fromBufferAttribute(l,h),pi.fromBufferAttribute(l,u),g.uv2=we.getUV(mi,ii,ni,ri,ui,di,pi,new J));var y=new Le(c,h,u);we.getNormal(ii,ni,ri,y.normal),g.face=y}return g}vi.prototype=Object.assign(Object.create(Ot.prototype),{constructor:vi,isMesh:!0,copy:function(t){return Ot.prototype.copy.call(this,t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,i,n=this.geometry;if(n.isBufferGeometry){var r=n.morphAttributes,a=Object.keys(r);if(a.length>0){var s=r[a[0]];if(void 0!==s)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)i=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}else{var o=n.morphTargets;void 0!==o&&o.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(t,e){var i,n=this.geometry,r=this.material,a=this.matrixWorld;if(void 0!==r&&(null===n.boundingSphere&&n.computeBoundingSphere(),ei.copy(n.boundingSphere),ei.applyMatrix4(a),!1!==t.ray.intersectsSphere(ei)&&($e.getInverse(a),ti.copy(t.ray).applyMatrix4($e),null===n.boundingBox||!1!==ti.intersectsBox(n.boundingBox))))if(n.isBufferGeometry){var s,o,l,c,h,u,d,p,m,f=n.index,v=n.attributes.position,g=n.morphAttributes.position,y=n.morphTargetsRelative,x=n.attributes.uv,w=n.attributes.uv2,b=n.groups,_=n.drawRange;if(null!==f)if(Array.isArray(r))for(c=0,u=b.length;c<u;c++)for(m=r[(p=b[c]).materialIndex],h=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);h<d;h+=3)s=f.getX(h),o=f.getX(h+1),l=f.getX(h+2),(i=yi(this,m,t,ti,v,g,y,x,w,s,o,l))&&(i.faceIndex=Math.floor(h/3),i.face.materialIndex=p.materialIndex,e.push(i));else for(c=Math.max(0,_.start),u=Math.min(f.count,_.start+_.count);c<u;c+=3)s=f.getX(c),o=f.getX(c+1),l=f.getX(c+2),(i=yi(this,r,t,ti,v,g,y,x,w,s,o,l))&&(i.faceIndex=Math.floor(c/3),e.push(i));else if(void 0!==v)if(Array.isArray(r))for(c=0,u=b.length;c<u;c++)for(m=r[(p=b[c]).materialIndex],h=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);h<d;h+=3)(i=yi(this,m,t,ti,v,g,y,x,w,s=h,o=h+1,l=h+2))&&(i.faceIndex=Math.floor(h/3),i.face.materialIndex=p.materialIndex,e.push(i));else for(c=Math.max(0,_.start),u=Math.min(v.count,_.start+_.count);c<u;c+=3)(i=yi(this,r,t,ti,v,g,y,x,w,s=c,o=c+1,l=c+2))&&(i.faceIndex=Math.floor(c/3),e.push(i))}else if(n.isGeometry){var M,S,E,T,A=Array.isArray(r),L=n.vertices,C=n.faces,P=n.faceVertexUvs[0];P.length>0&&(T=P);for(var R=0,I=C.length;R<I;R++){var O=C[R],D=A?r[O.materialIndex]:r;if(void 0!==D&&(M=L[O.a],S=L[O.b],E=L[O.c],i=gi(this,D,t,ti,M,S,E,mi))){if(T&&T[R]){var N=T[R];ui.copy(N[0]),di.copy(N[1]),pi.copy(N[2]),i.uv=we.getUV(mi,M,S,E,ui,di,pi,new J)}i.face=O,i.faceIndex=R,e.push(i)}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var xi=0,wi=new ft,bi=new Ot,_i=new ot;function Mi(){Object.defineProperty(this,"id",{value:xi+=2}),this.uuid=Z.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}Mi.prototype=Object.assign(Object.create(W.prototype),{constructor:Mi,isGeometry:!0,applyMatrix4:function(t){for(var e=(new Q).getNormalMatrix(t),i=0,n=this.vertices.length;i<n;i++){this.vertices[i].applyMatrix4(t)}for(i=0,n=this.faces.length;i<n;i++){var r=this.faces[i];r.normal.applyMatrix3(e).normalize();for(var a=0,s=r.vertexNormals.length;a<s;a++)r.vertexNormals[a].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(t){return wi.makeRotationX(t),this.applyMatrix4(wi),this},rotateY:function(t){return wi.makeRotationY(t),this.applyMatrix4(wi),this},rotateZ:function(t){return wi.makeRotationZ(t),this.applyMatrix4(wi),this},translate:function(t,e,i){return wi.makeTranslation(t,e,i),this.applyMatrix4(wi),this},scale:function(t,e,i){return wi.makeScale(t,e,i),this.applyMatrix4(wi),this},lookAt:function(t){return bi.lookAt(t),bi.updateMatrix(),this.applyMatrix4(bi.matrix),this},fromBufferGeometry:function(t){var e=this,i=null!==t.index?t.index.array:void 0,n=t.attributes;if(void 0===n.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var r=n.position.array,a=void 0!==n.normal?n.normal.array:void 0,s=void 0!==n.color?n.color.array:void 0,o=void 0!==n.uv?n.uv.array:void 0,l=void 0!==n.uv2?n.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var c=0;c<r.length;c+=3)e.vertices.push((new ot).fromArray(r,c)),void 0!==s&&e.colors.push((new Se).fromArray(s,c));function h(t,i,n,r){var c=void 0===s?[]:[e.colors[t].clone(),e.colors[i].clone(),e.colors[n].clone()],h=new Le(t,i,n,void 0===a?[]:[(new ot).fromArray(a,3*t),(new ot).fromArray(a,3*i),(new ot).fromArray(a,3*n)],c,r);e.faces.push(h),void 0!==o&&e.faceVertexUvs[0].push([(new J).fromArray(o,2*t),(new J).fromArray(o,2*i),(new J).fromArray(o,2*n)]),void 0!==l&&e.faceVertexUvs[1].push([(new J).fromArray(l,2*t),(new J).fromArray(l,2*i),(new J).fromArray(l,2*n)])}var u=t.groups;if(u.length>0)for(c=0;c<u.length;c++)for(var d=u[c],p=d.start,m=p,f=p+d.count;m<f;m+=3)void 0!==i?h(i[m],i[m+1],i[m+2],d.materialIndex):h(m,m+1,m+2,d.materialIndex);else if(void 0!==i)for(c=0;c<i.length;c+=3)h(i[c],i[c+1],i[c+2]);else for(c=0;c<r.length/3;c+=3)h(c,c+1,c+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(_i).negate(),this.translate(_i.x,_i.y,_i.z),this},normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,i=0===e?1:1/e,n=new ft;return n.set(i,0,0,-i*t.x,0,i,0,-i*t.y,0,0,i,-i*t.z,0,0,0,1),this.applyMatrix4(n),this},computeFaceNormals:function(){for(var t=new ot,e=new ot,i=0,n=this.faces.length;i<n;i++){var r=this.faces[i],a=this.vertices[r.a],s=this.vertices[r.b],o=this.vertices[r.c];t.subVectors(o,s),e.subVectors(a,s),t.cross(e),t.normalize(),r.normal.copy(t)}},computeVertexNormals:function(t){var e,i,n,r,a,s;for(void 0===t&&(t=!0),s=new Array(this.vertices.length),e=0,i=this.vertices.length;e<i;e++)s[e]=new ot;if(t){var o,l,c,h=new ot,u=new ot;for(n=0,r=this.faces.length;n<r;n++)a=this.faces[n],o=this.vertices[a.a],l=this.vertices[a.b],c=this.vertices[a.c],h.subVectors(c,l),u.subVectors(o,l),h.cross(u),s[a.a].add(h),s[a.b].add(h),s[a.c].add(h)}else for(this.computeFaceNormals(),n=0,r=this.faces.length;n<r;n++)s[(a=this.faces[n]).a].add(a.normal),s[a.b].add(a.normal),s[a.c].add(a.normal);for(e=0,i=this.vertices.length;e<i;e++)s[e].normalize();for(n=0,r=this.faces.length;n<r;n++){var d=(a=this.faces[n]).vertexNormals;3===d.length?(d[0].copy(s[a.a]),d[1].copy(s[a.b]),d[2].copy(s[a.c])):(d[0]=s[a.a].clone(),d[1]=s[a.b].clone(),d[2]=s[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,i;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var n=(i=this.faces[t]).vertexNormals;3===n.length?(n[0].copy(i.normal),n[1].copy(i.normal),n[2].copy(i.normal)):(n[0]=i.normal.clone(),n[1]=i.normal.clone(),n[2]=i.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,i,n,r;for(i=0,n=this.faces.length;i<n;i++)for((r=this.faces[i]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),t=0,e=r.vertexNormals.length;t<e;t++)r.__originalVertexNormals[t]?r.__originalVertexNormals[t].copy(r.vertexNormals[t]):r.__originalVertexNormals[t]=r.vertexNormals[t].clone();var a=new Mi;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var s=this.morphNormals[t].faceNormals,o=this.morphNormals[t].vertexNormals;for(i=0,n=this.faces.length;i<n;i++)l=new ot,c={a:new ot,b:new ot,c:new ot},s.push(l),o.push(c)}var l,c,h=this.morphNormals[t];for(a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),i=0,n=this.faces.length;i<n;i++)r=this.faces[i],l=h.faceNormals[i],c=h.vertexNormals[i],l.copy(r.normal),c.a.copy(r.vertexNormals[0]),c.b.copy(r.vertexNormals[1]),c.c.copy(r.vertexNormals[2])}for(i=0,n=this.faces.length;i<n;i++)(r=this.faces[i]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Yt),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Qt),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,i){if(t&&t.isGeometry){var n,r=this.vertices.length,a=this.vertices,s=t.vertices,o=this.faces,l=t.faces,c=this.colors,h=t.colors;void 0===i&&(i=0),void 0!==e&&(n=(new Q).getNormalMatrix(e));for(var u=0,d=s.length;u<d;u++){var p=s[u].clone();void 0!==e&&p.applyMatrix4(e),a.push(p)}for(u=0,d=h.length;u<d;u++)c.push(h[u].clone());for(u=0,d=l.length;u<d;u++){var m,f,v,g=l[u],y=g.vertexNormals,x=g.vertexColors;(m=new Le(g.a+r,g.b+r,g.c+r)).normal.copy(g.normal),void 0!==n&&m.normal.applyMatrix3(n).normalize();for(var w=0,b=y.length;w<b;w++)f=y[w].clone(),void 0!==n&&f.applyMatrix3(n).normalize(),m.vertexNormals.push(f);m.color.copy(g.color);for(w=0,b=x.length;w<b;w++)v=x[w],m.vertexColors.push(v.clone());m.materialIndex=g.materialIndex+i,o.push(m)}for(u=0,d=t.faceVertexUvs.length;u<d;u++){var _=t.faceVertexUvs[u];void 0===this.faceVertexUvs[u]&&(this.faceVertexUvs[u]=[]);for(w=0,b=_.length;w<b;w++){for(var M=_[w],S=[],E=0,T=M.length;E<T;E++)S.push(M[E].clone());this.faceVertexUvs[u].push(S)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,i,n,r,a,s,o,l={},c=[],h=[],u=Math.pow(10,4);for(i=0,n=this.vertices.length;i<n;i++)t=this.vertices[i],void 0===l[e=Math.round(t.x*u)+"_"+Math.round(t.y*u)+"_"+Math.round(t.z*u)]?(l[e]=i,c.push(this.vertices[i]),h[i]=c.length-1):h[i]=h[l[e]];var d=[];for(i=0,n=this.faces.length;i<n;i++){(r=this.faces[i]).a=h[r.a],r.b=h[r.b],r.c=h[r.c],a=[r.a,r.b,r.c];for(var p=0;p<3;p++)if(a[p]===a[(p+1)%3]){d.push(i);break}}for(i=d.length-1;i>=0;i--){var m=d[i];for(this.faces.splice(m,1),s=0,o=this.faceVertexUvs.length;s<o;s++)this.faceVertexUvs[s].splice(m,1)}var f=this.vertices.length-c.length;return this.vertices=c,f},setFromPoints:function(t){this.vertices=[];for(var e=0,i=t.length;e<i;e++){var n=t[e];this.vertices.push(new ot(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,i=0;i<e;i++)t[i]._id=i;t.sort((function(t,e){return t.materialIndex-e.materialIndex}));var n,r,a=this.faceVertexUvs[0],s=this.faceVertexUvs[1];a&&a.length===e&&(n=[]),s&&s.length===e&&(r=[]);for(i=0;i<e;i++){var o=t[i]._id;n&&n.push(a[o]),r&&r.push(s[o])}n&&(this.faceVertexUvs[0]=n),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}for(var n=[],r=0;r<this.vertices.length;r++){var a=this.vertices[r];n.push(a.x,a.y,a.z)}var s=[],o=[],l={},c=[],h={},u=[],d={};for(r=0;r<this.faces.length;r++){var p=this.faces[r],m=void 0!==this.faceVertexUvs[0][r],f=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,m),x=M(x,4,f),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),s.push(x),s.push(p.a,p.b,p.c),s.push(p.materialIndex),m){var w=this.faceVertexUvs[0][r];s.push(T(w[0]),T(w[1]),T(w[2]))}if(f&&s.push(S(p.normal)),v){var b=p.vertexNormals;s.push(S(b[0]),S(b[1]),S(b[2]))}if(g&&s.push(E(p.color)),y){var _=p.vertexColors;s.push(E(_[0]),E(_[1]),E(_[2]))}}function M(t,e,i){return i?t|1<<e:t&~(1<<e)}function S(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==l[e]||(l[e]=o.length/3,o.push(t.x,t.y,t.z)),l[e]}function E(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==h[e]||(h[e]=c.length,c.push(t.getHex())),h[e]}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==d[e]||(d[e]=u.length/2,u.push(t.x,t.y)),d[e]}return t.data={},t.data.vertices=n,t.data.normals=o,c.length>0&&(t.data.colors=c),u.length>0&&(t.data.uvs=[u]),t.data.faces=s,t},clone:function(){return(new Mi).copy(this)},copy:function(t){var e,i,n,r,a,s;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var o=t.vertices;for(e=0,i=o.length;e<i;e++)this.vertices.push(o[e].clone());var l=t.colors;for(e=0,i=l.length;e<i;e++)this.colors.push(l[e].clone());var c=t.faces;for(e=0,i=c.length;e<i;e++)this.faces.push(c[e].clone());for(e=0,i=t.faceVertexUvs.length;e<i;e++){var h=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),n=0,r=h.length;n<r;n++){var u=h[n],d=[];for(a=0,s=u.length;a<s;a++){var p=u[a];d.push(p.clone())}this.faceVertexUvs[e].push(d)}}var m=t.morphTargets;for(e=0,i=m.length;e<i;e++){var f={};if(f.name=m[e].name,void 0!==m[e].vertices)for(f.vertices=[],n=0,r=m[e].vertices.length;n<r;n++)f.vertices.push(m[e].vertices[n].clone());if(void 0!==m[e].normals)for(f.normals=[],n=0,r=m[e].normals.length;n<r;n++)f.normals.push(m[e].normals[n].clone());this.morphTargets.push(f)}var v=t.morphNormals;for(e=0,i=v.length;e<i;e++){var g={};if(void 0!==v[e].vertexNormals)for(g.vertexNormals=[],n=0,r=v[e].vertexNormals.length;n<r;n++){var y=v[e].vertexNormals[n],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[e].faceNormals)for(g.faceNormals=[],n=0,r=v[e].faceNormals.length;n<r;n++)g.faceNormals.push(v[e].faceNormals[n].clone());this.morphNormals.push(g)}var w=t.skinWeights;for(e=0,i=w.length;e<i;e++)this.skinWeights.push(w[e].clone());var b=t.skinIndices;for(e=0,i=b.length;e<i;e++)this.skinIndices.push(b[e].clone());var _=t.lineDistances;for(e=0,i=_.length;e<i;e++)this.lineDistances.push(_[e]);var M=t.boundingBox;null!==M&&(this.boundingBox=M.clone());var S=t.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class Si extends Ke{constructor(t,e,i,n,r,a){super(),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:a};var s=this;t=t||1,e=e||1,i=i||1,n=Math.floor(n)||1,r=Math.floor(r)||1,a=Math.floor(a)||1;var o=[],l=[],c=[],h=[],u=0,d=0;function p(t,e,i,n,r,a,p,m,f,v,g){var y,x,w=a/f,b=p/v,_=a/2,M=p/2,S=m/2,E=f+1,T=v+1,A=0,L=0,C=new ot;for(x=0;x<T;x++){var P=x*b-M;for(y=0;y<E;y++){var R=y*w-_;C[t]=R*n,C[e]=P*r,C[i]=S,l.push(C.x,C.y,C.z),C[t]=0,C[e]=0,C[i]=m>0?1:-1,c.push(C.x,C.y,C.z),h.push(y/f),h.push(1-x/v),A+=1}}for(x=0;x<v;x++)for(y=0;y<f;y++){var I=u+y+E*x,O=u+y+E*(x+1),D=u+(y+1)+E*(x+1),N=u+(y+1)+E*x;o.push(I,O,N),o.push(O,D,N),L+=6}s.addGroup(d,L,g),d+=L,u+=A}p("z","y","x",-1,-1,i,e,t,a,r,0),p("z","y","x",1,-1,i,e,-t,a,r,1),p("x","z","y",1,1,t,i,e,n,a,2),p("x","z","y",1,-1,t,i,-e,n,a,3),p("x","y","z",1,-1,t,e,i,n,r,4),p("x","y","z",-1,-1,t,e,-i,n,r,5),this.setIndex(o),this.setAttribute("position",new Ge(l,3)),this.setAttribute("normal",new Ge(c,3)),this.setAttribute("uv",new Ge(h,2))}}function Ei(t){var e={};for(var i in t)for(var n in e[i]={},t[i]){var r=t[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?e[i][n]=r.clone():Array.isArray(r)?e[i][n]=r.slice():e[i][n]=r}return e}function Ti(t){for(var e={},i=0;i<t.length;i++){var n=Ei(t[i]);for(var r in n)e[r]=n[r]}return e}var Ai={clone:Ei,merge:Ti};function Li(t){Pe.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function Ci(){Ot.call(this),this.type="Camera",this.matrixWorldInverse=new ft,this.projectionMatrix=new ft,this.projectionMatrixInverse=new ft}function Pi(t,e,i,n){Ci.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==i?i:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}Li.prototype=Object.create(Pe.prototype),Li.prototype.constructor=Li,Li.prototype.isShaderMaterial=!0,Li.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Ei(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},Li.prototype.toJSON=function(t){var e=Pe.prototype.toJSON.call(this,t);for(var i in e.uniforms={},this.uniforms){var n=this.uniforms[i].value;n&&n.isTexture?e.uniforms[i]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[i]={type:"m4",value:n.toArray()}:e.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;var r={};for(var a in this.extensions)!0===this.extensions[a]&&(r[a]=!0);return Object.keys(r).length>0&&(e.extensions=r),e},Ci.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Ci,isCamera:!0,copy:function(t,e){return Ot.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new ot),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){Ot.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(t,e){Ot.prototype.updateWorldMatrix.call(this,t,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Pi.prototype=Object.assign(Object.create(Ci.prototype),{constructor:Pi,isPerspectiveCamera:!0,copy:function(t,e){return Ci.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*Z.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*Z.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Z.RAD2DEG*Math.atan(Math.tan(.5*Z.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,i,n,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*Z.DEG2RAD*this.fov)/this.zoom,i=2*e,n=this.aspect*i,r=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){var s=a.fullWidth,o=a.fullHeight;r+=a.offsetX*n/s,e-=a.offsetY*i/o,n*=a.width/s,i*=a.height/o}var l=this.filmOffset;0!==l&&(r+=t*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,e,e-i,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Ot.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});function Ri(t,e,i,n){Ot.call(this),this.type="CubeCamera";var r=new Pi(90,1,t,e);r.up.set(0,-1,0),r.lookAt(new ot(1,0,0)),this.add(r);var a=new Pi(90,1,t,e);a.up.set(0,-1,0),a.lookAt(new ot(-1,0,0)),this.add(a);var s=new Pi(90,1,t,e);s.up.set(0,0,1),s.lookAt(new ot(0,1,0)),this.add(s);var o=new Pi(90,1,t,e);o.up.set(0,0,-1),o.lookAt(new ot(0,-1,0)),this.add(o);var l=new Pi(90,1,t,e);l.up.set(0,-1,0),l.lookAt(new ot(0,0,1)),this.add(l);var c=new Pi(90,1,t,e);c.up.set(0,-1,0),c.lookAt(new ot(0,0,-1)),this.add(c),n=n||{format:1022,magFilter:1006,minFilter:1006},this.renderTarget=new Ii(i,n),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var i=t.getRenderTarget(),n=this.renderTarget,h=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,r),t.setRenderTarget(n,1),t.render(e,a),t.setRenderTarget(n,2),t.render(e,s),t.setRenderTarget(n,3),t.render(e,o),t.setRenderTarget(n,4),t.render(e,l),n.texture.generateMipmaps=h,t.setRenderTarget(n,5),t.render(e,c),t.setRenderTarget(i)},this.clear=function(t,e,i,n){for(var r=t.getRenderTarget(),a=this.renderTarget,s=0;s<6;s++)t.setRenderTarget(a,s),t.clear(e,i,n);t.setRenderTarget(r)}}function Ii(t,e,i){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=i),it.call(this,t,t,e)}function Oi(t,e,i,n,r,a,s,o,l,c,h,u){tt.call(this,null,a,s,o,l,c,n,r,h,u),this.image={data:t||null,width:e||1,height:i||1},this.magFilter=void 0!==l?l:1003,this.minFilter=void 0!==c?c:1003,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}Ri.prototype=Object.create(Ot.prototype),Ri.prototype.constructor=Ri,Ii.prototype=Object.create(it.prototype),Ii.prototype.constructor=Ii,Ii.prototype.isWebGLCubeRenderTarget=!0,Ii.prototype.fromEquirectangularTexture=function(t,e){this.texture.type=e.type,this.texture.format=e.format,this.texture.encoding=e.encoding;var i=new Dt,n={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},r=new Li({type:"CubemapFromEquirect",uniforms:Ei(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;var a=new vi(new Si(5,5,5),r);i.add(a);var s=new Ri(1,10,1);return s.renderTarget=this,s.renderTarget.texture.name="CubeCameraTexture",s.update(t,i),a.geometry.dispose(),a.material.dispose(),this},Oi.prototype=Object.create(tt.prototype),Oi.prototype.constructor=Oi,Oi.prototype.isDataTexture=!0;var Di=new Qt,Ni=new ot;function zi(t,e,i,n,r,a){this.planes=[void 0!==t?t:new ce,void 0!==e?e:new ce,void 0!==i?i:new ce,void 0!==n?n:new ce,void 0!==r?r:new ce,void 0!==a?a:new ce]}Object.assign(zi.prototype,{set:function(t,e,i,n,r,a){var s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(i),s[3].copy(n),s[4].copy(r),s[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,i=0;i<6;i++)e[i].copy(t.planes[i]);return this},setFromProjectionMatrix:function(t){var e=this.planes,i=t.elements,n=i[0],r=i[1],a=i[2],s=i[3],o=i[4],l=i[5],c=i[6],h=i[7],u=i[8],d=i[9],p=i[10],m=i[11],f=i[12],v=i[13],g=i[14],y=i[15];return e[0].setComponents(s-n,h-o,m-u,y-f).normalize(),e[1].setComponents(s+n,h+o,m+u,y+f).normalize(),e[2].setComponents(s+r,h+l,m+d,y+v).normalize(),e[3].setComponents(s-r,h-l,m-d,y-v).normalize(),e[4].setComponents(s-a,h-c,m-p,y-g).normalize(),e[5].setComponents(s+a,h+c,m+p,y+g).normalize(),this},intersectsObject:function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Di.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Di)},intersectsSprite:function(t){return Di.center.set(0,0,0),Di.radius=.7071067811865476,Di.applyMatrix4(t.matrixWorld),this.intersectsSphere(Di)},intersectsSphere:function(t){for(var e=this.planes,i=t.center,n=-t.radius,r=0;r<6;r++){if(e[r].distanceToPoint(i)<n)return!1}return!0},intersectsBox:function(t){for(var e=this.planes,i=0;i<6;i++){var n=e[i];if(Ni.x=n.normal.x>0?t.max.x:t.min.x,Ni.y=n.normal.y>0?t.max.y:t.min.y,Ni.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Ni)<0)return!1}return!0},containsPoint:function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}});var Hi={common:{diffuse:{value:new Se(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Q},uv2Transform:{value:new Q},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new J(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Se(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Se(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Q}},sprite:{diffuse:{value:new Se(15658734)},opacity:{value:1},center:{value:new J(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Q}}};function Bi(){var t=null,e=!1,i=null;function n(r,a){!1!==e&&(i(r,a),t.requestAnimationFrame(n))}return{start:function(){!0!==e&&null!==i&&(t.requestAnimationFrame(n),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function Ui(t,e){var i=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);var i=n.get(e);i&&(t.deleteBuffer(i.buffer),n.delete(e))},update:function(e,r){e.isInterleavedBufferAttribute&&(e=e.data);var a=n.get(e);void 0===a?n.set(e,function(e,i){var n=e.array,r=e.usage,a=t.createBuffer();t.bindBuffer(i,a),t.bufferData(i,n,r),e.onUploadCallback();var s=5126;return n instanceof Float32Array?s=5126:n instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):n instanceof Uint16Array?s=5123:n instanceof Int16Array?s=5122:n instanceof Uint32Array?s=5125:n instanceof Int32Array?s=5124:n instanceof Int8Array?s=5120:n instanceof Uint8Array&&(s=5121),{buffer:a,type:s,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version}}(e,r)):a.version<e.version&&(!function(e,n,r){var a=n.array,s=n.updateRange;t.bindBuffer(r,e),-1===s.count?t.bufferSubData(r,0,a):(i?t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1)}(a.buffer,e,r),a.version=e.version)}}}function Fi(t,e,i,n){Mi.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n},this.fromBufferGeometry(new Gi(t,e,i,n)),this.mergeVertices()}function Gi(t,e,i,n){Ke.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};var r,a,s=(t=t||1)/2,o=(e=e||1)/2,l=Math.floor(i)||1,c=Math.floor(n)||1,h=l+1,u=c+1,d=t/l,p=e/c,m=[],f=[],v=[],g=[];for(a=0;a<u;a++){var y=a*p-o;for(r=0;r<h;r++){var x=r*d-s;f.push(x,-y,0),v.push(0,0,1),g.push(r/l),g.push(1-a/c)}}for(a=0;a<c;a++)for(r=0;r<l;r++){var w=r+h*a,b=r+h*(a+1),_=r+1+h*(a+1),M=r+1+h*a;m.push(w,b,M),m.push(b,_,M)}this.setIndex(m),this.setAttribute("position",new Ge(f,3)),this.setAttribute("normal",new Ge(v,3)),this.setAttribute("uv",new Ge(g,2))}Fi.prototype=Object.create(Mi.prototype),Fi.prototype.constructor=Fi,Gi.prototype=Object.create(Ke.prototype),Gi.prototype.constructor=Gi;var ki={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Vi={basic:{uniforms:Ti([Hi.common,Hi.specularmap,Hi.envmap,Hi.aomap,Hi.lightmap,Hi.fog]),vertexShader:ki.meshbasic_vert,fragmentShader:ki.meshbasic_frag},lambert:{uniforms:Ti([Hi.common,Hi.specularmap,Hi.envmap,Hi.aomap,Hi.lightmap,Hi.emissivemap,Hi.fog,Hi.lights,{emissive:{value:new Se(0)}}]),vertexShader:ki.meshlambert_vert,fragmentShader:ki.meshlambert_frag},phong:{uniforms:Ti([Hi.common,Hi.specularmap,Hi.envmap,Hi.aomap,Hi.lightmap,Hi.emissivemap,Hi.bumpmap,Hi.normalmap,Hi.displacementmap,Hi.fog,Hi.lights,{emissive:{value:new Se(0)},specular:{value:new Se(1118481)},shininess:{value:30}}]),vertexShader:ki.meshphong_vert,fragmentShader:ki.meshphong_frag},standard:{uniforms:Ti([Hi.common,Hi.envmap,Hi.aomap,Hi.lightmap,Hi.emissivemap,Hi.bumpmap,Hi.normalmap,Hi.displacementmap,Hi.roughnessmap,Hi.metalnessmap,Hi.fog,Hi.lights,{emissive:{value:new Se(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:ki.meshphysical_vert,fragmentShader:ki.meshphysical_frag},toon:{uniforms:Ti([Hi.common,Hi.specularmap,Hi.aomap,Hi.lightmap,Hi.emissivemap,Hi.bumpmap,Hi.normalmap,Hi.displacementmap,Hi.gradientmap,Hi.fog,Hi.lights,{emissive:{value:new Se(0)},specular:{value:new Se(1118481)},shininess:{value:30}}]),vertexShader:ki.meshtoon_vert,fragmentShader:ki.meshtoon_frag},matcap:{uniforms:Ti([Hi.common,Hi.bumpmap,Hi.normalmap,Hi.displacementmap,Hi.fog,{matcap:{value:null}}]),vertexShader:ki.meshmatcap_vert,fragmentShader:ki.meshmatcap_frag},points:{uniforms:Ti([Hi.points,Hi.fog]),vertexShader:ki.points_vert,fragmentShader:ki.points_frag},dashed:{uniforms:Ti([Hi.common,Hi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ki.linedashed_vert,fragmentShader:ki.linedashed_frag},depth:{uniforms:Ti([Hi.common,Hi.displacementmap]),vertexShader:ki.depth_vert,fragmentShader:ki.depth_frag},normal:{uniforms:Ti([Hi.common,Hi.bumpmap,Hi.normalmap,Hi.displacementmap,{opacity:{value:1}}]),vertexShader:ki.normal_vert,fragmentShader:ki.normal_frag},sprite:{uniforms:Ti([Hi.sprite,Hi.fog]),vertexShader:ki.sprite_vert,fragmentShader:ki.sprite_frag},background:{uniforms:{uvTransform:{value:new Q},t2D:{value:null}},vertexShader:ki.background_vert,fragmentShader:ki.background_frag},cube:{uniforms:Ti([Hi.envmap,{opacity:{value:1}}]),vertexShader:ki.cube_vert,fragmentShader:ki.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ki.equirect_vert,fragmentShader:ki.equirect_frag},distanceRGBA:{uniforms:Ti([Hi.common,Hi.displacementmap,{referencePosition:{value:new ot},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ki.distanceRGBA_vert,fragmentShader:ki.distanceRGBA_frag},shadow:{uniforms:Ti([Hi.lights,Hi.fog,{color:{value:new Se(0)},opacity:{value:1}}]),vertexShader:ki.shadow_vert,fragmentShader:ki.shadow_frag}};function ji(t,e,i,n){var r,a,s=new Se(0),o=0,l=null,c=0,h=null;function u(t,i){e.buffers.color.setClear(t.r,t.g,t.b,i,n)}return{getClearColor:function(){return s},setClearColor:function(t,e){s.set(t),u(s,o=void 0!==e?e:1)},getClearAlpha:function(){return o},setClearAlpha:function(t){u(s,o=t)},render:function(e,n,d,p){var m=n.background,f=t.xr,v=f.getSession&&f.getSession();if(v&&"additive"===v.environmentBlendMode&&(m=null),null===m?u(s,o):m&&m.isColor&&(u(m,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),m&&(m.isCubeTexture||m.isWebGLCubeRenderTarget||306===m.mapping)){void 0===a&&((a=new vi(new Si(1,1,1),new Li({type:"BackgroundCubeMaterial",uniforms:Ei(Vi.cube.uniforms),vertexShader:Vi.cube.vertexShader,fragmentShader:Vi.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),a.geometry.deleteAttribute("uv"),a.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(a.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(a));var g=m.isWebGLCubeRenderTarget?m.texture:m;a.material.uniforms.envMap.value=g,a.material.uniforms.flipEnvMap.value=g.isCubeTexture?-1:1,l===m&&c===g.version&&h===t.toneMapping||(a.material.needsUpdate=!0,l=m,c=g.version,h=t.toneMapping),e.unshift(a,a.geometry,a.material,0,0,null)}else m&&m.isTexture&&(void 0===r&&((r=new vi(new Gi(2,2),new Li({type:"BackgroundMaterial",uniforms:Ei(Vi.background.uniforms),vertexShader:Vi.background.vertexShader,fragmentShader:Vi.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(r.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(r)),r.material.uniforms.t2D.value=m,!0===m.matrixAutoUpdate&&m.updateMatrix(),r.material.uniforms.uvTransform.value.copy(m.matrix),l===m&&c===m.version&&h===t.toneMapping||(r.material.needsUpdate=!0,l=m,c=m.version,h=t.toneMapping),e.unshift(r,r.geometry,r.material,0,0,null))}}}function Wi(t,e,i,n){var r,a=n.isWebGL2;this.setMode=function(t){r=t},this.render=function(e,n){t.drawArrays(r,e,n),i.update(n,r)},this.renderInstances=function(n,s,o,l){if(0!==l){var c,h;if(a)c=t,h="drawArraysInstanced";else if(h="drawArraysInstancedANGLE",null===(c=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[h](r,s,o,l),i.update(o,r,l)}}}function qi(t,e,i){var n;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext,s=void 0!==i.precision?i.precision:"highp",o=r(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);var l=!0===i.logarithmicDepthBuffer,c=t.getParameter(34930),h=t.getParameter(35660),u=t.getParameter(3379),d=t.getParameter(34076),p=t.getParameter(34921),m=t.getParameter(36347),f=t.getParameter(36348),v=t.getParameter(36349),g=h>0,y=a||!!e.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==n)return n;var i=e.get("EXT_texture_filter_anisotropic");return n=null!==i?t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:m,maxVaryings:f,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:a?t.getParameter(36183):0}}function Xi(){var t=this,e=null,i=0,n=!1,r=!1,a=new ce,s=new Q,o={value:null,needsUpdate:!1};function l(){o.value!==e&&(o.value=e,o.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function c(e,i,n,r){var l=null!==e?e.length:0,c=null;if(0!==l){if(c=o.value,!0!==r||null===c){var h=n+4*l,u=i.matrixWorldInverse;s.getNormalMatrix(u),(null===c||c.length<h)&&(c=new Float32Array(h));for(var d=0,p=n;d!==l;++d,p+=4)a.copy(e[d]).applyMatrix4(u,s),a.normal.toArray(c,p),c[p+3]=a.constant}o.value=c,o.needsUpdate=!0}return t.numPlanes=l,t.numIntersection=0,c}this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(t,r,a){var s=0!==t.length||r||0!==i||n;return n=r,e=c(t,a,0),i=t.length,s},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1,l()},this.setState=function(t,a,s,h,u,d){if(!n||null===t||0===t.length||r&&!s)r?c(null):l();else{var p=r?0:i,m=4*p,f=u.clippingState||null;o.value=f,f=c(t,h,m,d);for(var v=0;v!==m;++v)f[v]=e[v];u.clippingState=f,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=p}}}function Yi(t){var e={};return{get:function(i){if(void 0!==e[i])return e[i];var n;switch(i){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(i)}return null===n&&console.warn("THREE.WebGLRenderer: "+i+" extension not supported."),e[i]=n,n}}}function Zi(t,e,i){var n=new WeakMap,r=new WeakMap;function a(t){var s=t.target,o=n.get(s);for(var l in null!==o.index&&e.remove(o.index),o.attributes)e.remove(o.attributes[l]);s.removeEventListener("dispose",a),n.delete(s);var c=r.get(o);c&&(e.remove(c),r.delete(o)),i.memory.geometries--}function s(t){var i=[],n=t.index,a=t.attributes.position,s=0;if(null!==n){var o=n.array;s=n.version;for(var l=0,c=o.length;l<c;l+=3){var h=o[l+0],u=o[l+1],d=o[l+2];i.push(h,u,u,d,d,h)}}else{o=a.array;s=a.version;for(l=0,c=o.length/3-1;l<c;l+=3){h=l+0,u=l+1,d=l+2;i.push(h,u,u,d,d,h)}}var p=new(je(i)>65535?Fe:Be)(i,1);p.version=s,e.update(p,34963);var m=r.get(t);m&&e.remove(m),r.set(t,p)}return{get:function(t,e){var r=n.get(e);return r||(e.addEventListener("dispose",a),e.isBufferGeometry?r=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new Ke).setFromObject(t)),r=e._bufferGeometry),n.set(e,r),i.memory.geometries++,r)},update:function(t){var i=t.index,n=t.attributes;for(var r in null!==i&&e.update(i,34963),n)e.update(n[r],34962);var a=t.morphAttributes;for(var r in a)for(var s=a[r],o=0,l=s.length;o<l;o++)e.update(s[o],34962)},getWireframeAttribute:function(t){var e=r.get(t);if(e){var i=t.index;null!==i&&e.version<i.version&&s(t)}else s(t);return r.get(t)}}}function Ji(t,e,i,n){var r,a,s,o=n.isWebGL2;this.setMode=function(t){r=t},this.setIndex=function(t){a=t.type,s=t.bytesPerElement},this.render=function(e,n){t.drawElements(r,n,a,e*s),i.update(n,r)},this.renderInstances=function(n,l,c,h){if(0!==h){var u,d;if(o)u=t,d="drawElementsInstanced";else if(d="drawElementsInstancedANGLE",null===(u=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");u[d](r,c,a,l*s,h),i.update(c,r,h)}}}function Qi(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(n=n||1,e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function Ki(t,e){return Math.abs(e[1])-Math.abs(t[1])}function $i(t){var e={},i=new Float32Array(8);return{update:function(n,r,a,s){var o=n.morphTargetInfluences,l=void 0===o?0:o.length,c=e[r.id];if(void 0===c){c=[];for(var h=0;h<l;h++)c[h]=[h,0];e[r.id]=c}var u=a.morphTargets&&r.morphAttributes.position,d=a.morphNormals&&r.morphAttributes.normal;for(h=0;h<l;h++){0!==(m=c[h])[1]&&(u&&r.deleteAttribute("morphTarget"+h),d&&r.deleteAttribute("morphNormal"+h))}for(h=0;h<l;h++){(m=c[h])[0]=h,m[1]=o[h]}c.sort(Ki);var p=0;for(h=0;h<8;h++){var m;if(m=c[h]){var f=m[0],v=m[1];if(v){u&&r.setAttribute("morphTarget"+h,u[f]),d&&r.setAttribute("morphNormal"+h,d[f]),i[h]=v,p+=v;continue}}i[h]=0}var g=r.morphTargetsRelative?1:1-p;s.getUniforms().setValue(t,"morphTargetBaseInfluence",g),s.getUniforms().setValue(t,"morphTargetInfluences",i)}}}function tn(t,e,i,n){var r=new WeakMap;return{update:function(t){var a=n.render.frame,s=t.geometry,o=e.get(t,s);return r.get(o)!==a&&(s.isGeometry&&o.updateFromObject(t),e.update(o),r.set(o,a)),t.isInstancedMesh&&i.update(t.instanceMatrix,34962),o},dispose:function(){r=new WeakMap}}}function en(t,e,i,n,r,a,s,o,l,c){t=void 0!==t?t:[],e=void 0!==e?e:301,s=void 0!==s?s:1022,tt.call(this,t,e,i,n,r,a,s,o,l,c),this.flipY=!1}function nn(t,e,i,n){tt.call(this,null),this.image={data:t||null,width:e||1,height:i||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function rn(t,e,i,n){tt.call(this,null),this.image={data:t||null,width:e||1,height:i||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}Vi.physical={uniforms:Ti([Vi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new J(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Se(0)},transparency:{value:0}}]),vertexShader:ki.meshphysical_vert,fragmentShader:ki.meshphysical_frag},en.prototype=Object.create(tt.prototype),en.prototype.constructor=en,en.prototype.isCubeTexture=!0,Object.defineProperty(en.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),nn.prototype=Object.create(tt.prototype),nn.prototype.constructor=nn,nn.prototype.isDataTexture2DArray=!0,rn.prototype=Object.create(tt.prototype),rn.prototype.constructor=rn,rn.prototype.isDataTexture3D=!0;var an=new tt,sn=new nn,on=new rn,ln=new en,cn=[],hn=[],un=new Float32Array(16),dn=new Float32Array(9),pn=new Float32Array(4);function mn(t,e,i){var n=t[0];if(n<=0||n>0)return t;var r=e*i,a=cn[r];if(void 0===a&&(a=new Float32Array(r),cn[r]=a),0!==e){n.toArray(a,0);for(var s=1,o=0;s!==e;++s)o+=i,t[s].toArray(a,o)}return a}function fn(t,e){if(t.length!==e.length)return!1;for(var i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function vn(t,e){for(var i=0,n=e.length;i<n;i++)t[i]=e[i]}function gn(t,e){var i=hn[e];void 0===i&&(i=new Int32Array(e),hn[e]=i);for(var n=0;n!==e;++n)i[n]=t.allocateTextureUnit();return i}function yn(t,e){var i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function xn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(fn(i,e))return;t.uniform2fv(this.addr,e),vn(i,e)}}function wn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(fn(i,e))return;t.uniform3fv(this.addr,e),vn(i,e)}}function bn(t,e){var i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(fn(i,e))return;t.uniform4fv(this.addr,e),vn(i,e)}}function _n(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(fn(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),vn(i,e)}else{if(fn(i,n))return;pn.set(n),t.uniformMatrix2fv(this.addr,!1,pn),vn(i,n)}}function Mn(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(fn(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),vn(i,e)}else{if(fn(i,n))return;dn.set(n),t.uniformMatrix3fv(this.addr,!1,dn),vn(i,n)}}function Sn(t,e){var i=this.cache,n=e.elements;if(void 0===n){if(fn(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),vn(i,e)}else{if(fn(i,n))return;un.set(n),t.uniformMatrix4fv(this.addr,!1,un),vn(i,n)}}function En(t,e,i){var n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.safeSetTexture2D(e||an,r)}function Tn(t,e,i){var n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture2DArray(e||sn,r)}function An(t,e,i){var n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(e||on,r)}function Ln(t,e,i){var n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(t.uniform1i(this.addr,r),n[0]=r),i.safeSetTextureCube(e||ln,r)}function Cn(t,e){var i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function Pn(t,e){var i=this.cache;fn(i,e)||(t.uniform2iv(this.addr,e),vn(i,e))}function Rn(t,e){var i=this.cache;fn(i,e)||(t.uniform3iv(this.addr,e),vn(i,e))}function In(t,e){var i=this.cache;fn(i,e)||(t.uniform4iv(this.addr,e),vn(i,e))}function On(t,e){var i=this.cache;i[0]!==e&&(t.uniform1ui(this.addr,e),i[0]=e)}function Dn(t,e){t.uniform1fv(this.addr,e)}function Nn(t,e){t.uniform1iv(this.addr,e)}function zn(t,e){t.uniform2iv(this.addr,e)}function Hn(t,e){t.uniform3iv(this.addr,e)}function Bn(t,e){t.uniform4iv(this.addr,e)}function Un(t,e){var i=mn(e,this.size,2);t.uniform2fv(this.addr,i)}function Fn(t,e){var i=mn(e,this.size,3);t.uniform3fv(this.addr,i)}function Gn(t,e){var i=mn(e,this.size,4);t.uniform4fv(this.addr,i)}function kn(t,e){var i=mn(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,i)}function Vn(t,e){var i=mn(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,i)}function jn(t,e){var i=mn(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,i)}function Wn(t,e,i){var n=e.length,r=gn(i,n);t.uniform1iv(this.addr,r);for(var a=0;a!==n;++a)i.safeSetTexture2D(e[a]||an,r[a])}function qn(t,e,i){var n=e.length,r=gn(i,n);t.uniform1iv(this.addr,r);for(var a=0;a!==n;++a)i.safeSetTextureCube(e[a]||ln,r[a])}function Xn(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return yn;case 35664:return xn;case 35665:return wn;case 35666:return bn;case 35674:return _n;case 35675:return Mn;case 35676:return Sn;case 5124:case 35670:return Cn;case 35667:case 35671:return Pn;case 35668:case 35672:return Rn;case 35669:case 35673:return In;case 5125:return On;case 35678:case 36198:case 36298:case 36306:case 35682:return En;case 35679:case 36299:case 36307:return An;case 35680:case 36300:case 36308:case 36293:return Ln;case 36289:case 36303:case 36311:case 36292:return Tn}}(e.type)}function Yn(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Dn;case 35664:return Un;case 35665:return Fn;case 35666:return Gn;case 35674:return kn;case 35675:return Vn;case 35676:return jn;case 5124:case 35670:return Nn;case 35667:case 35671:return zn;case 35668:case 35672:return Hn;case 35669:case 35673:return Bn;case 35678:case 36198:case 36298:case 36306:case 35682:return Wn;case 35680:case 36300:case 36308:case 36293:return qn}}(e.type)}function Zn(t){this.id=t,this.seq=[],this.map={}}Yn.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),vn(e,t)},Zn.prototype.setValue=function(t,e,i){for(var n=this.seq,r=0,a=n.length;r!==a;++r){var s=n[r];s.setValue(t,e[s.id],i)}};var Jn=/([\w\d_]+)(\])?(\[|\.)?/g;function Qn(t,e){t.seq.push(e),t.map[e.id]=e}function Kn(t,e,i){var n=t.name,r=n.length;for(Jn.lastIndex=0;;){var a=Jn.exec(n),s=Jn.lastIndex,o=a[1],l="]"===a[2],c=a[3];if(l&&(o|=0),void 0===c||"["===c&&s+2===r){Qn(i,void 0===c?new Xn(o,t,e):new Yn(o,t,e));break}var h=i.map[o];void 0===h&&Qn(i,h=new Zn(o)),i=h}}function $n(t,e){this.seq=[],this.map={};for(var i=t.getProgramParameter(e,35718),n=0;n<i;++n){var r=t.getActiveUniform(e,n);Kn(r,t.getUniformLocation(e,r.name),this)}}function tr(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),n}$n.prototype.setValue=function(t,e,i,n){var r=this.map[e];void 0!==r&&r.setValue(t,i,n)},$n.prototype.setOptional=function(t,e,i){var n=e[i];void 0!==n&&this.setValue(t,i,n)},$n.upload=function(t,e,i,n){for(var r=0,a=e.length;r!==a;++r){var s=e[r],o=i[s.id];!1!==o.needsUpdate&&s.setValue(t,o.value,n)}},$n.seqWithValue=function(t,e){for(var i=[],n=0,r=t.length;n!==r;++n){var a=t[n];a.id in e&&i.push(a)}return i};var er=0;function ir(t){switch(t){case 3e3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+t)}}function nr(t,e,i){var n=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();return n&&""===r?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+i+"\n"+r+function(t){for(var e=t.split("\n"),i=0;i<e.length;i++)e[i]=i+1+": "+e[i];return e.join("\n")}(t.getShaderSource(e))}function rr(t,e){var i=ir(e);return"vec4 "+t+"( vec4 value ) { return "+i[0]+"ToLinear"+i[1]+"; }"}function ar(t,e){var i;switch(e){case 1:i="Linear";break;case 2:i="Reinhard";break;case 3:i="Uncharted2";break;case 4:i="OptimizedCineon";break;case 5:i="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}function sr(t){return""!==t}function or(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function lr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}var cr=/^[ \t]*#include +<([\w\d./]+)>/gm;function hr(t){return t.replace(cr,ur)}function ur(t,e){var i=ki[e];if(void 0===i)throw new Error("Can not resolve #include <"+e+">");return hr(i)}var dr=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,pr=/#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;function mr(t){return t.replace(pr,vr).replace(dr,fr)}function fr(t,e,i,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),vr(t,e,i,n)}function vr(t,e,i,n){for(var r="",a=parseInt(e);a<parseInt(i);a++)r+=n.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return r}function gr(t){var e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function yr(t,e,i){var n,r,a,s,o,l=t.getContext(),c=i.defines,h=i.vertexShader,u=i.fragmentShader,d=function(t){var e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(i),p=function(t){var e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case 301:case 302:e="ENVMAP_TYPE_CUBE";break;case 306:case 307:e="ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:e="ENVMAP_TYPE_EQUIREC";break;case 305:e="ENVMAP_TYPE_SPHERE"}return e}(i),m=function(t){var e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case 302:case 304:e="ENVMAP_MODE_REFRACTION"}return e}(i),f=function(t){var e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(i),v=t.gammaFactor>0?t.gammaFactor:1,g=i.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(sr).join("\n")}(i),y=function(t){var e=[];for(var i in t){var n=t[i];!1!==n&&e.push("#define "+i+" "+n)}return e.join("\n")}(c),x=l.createProgram();if(i.isRawShaderMaterial?((n=[y].filter(sr).join("\n")).length>0&&(n+="\n"),(r=[g,y].filter(sr).join("\n")).length>0&&(r+="\n")):(n=[gr(i),"#define SHADER_NAME "+i.shaderName,y,i.instancing?"#define USE_INSTANCING":"",i.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+v,"#define MAX_BONES "+i.maxBones,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+m:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.displacementMap&&i.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.useVertexTexture?"#define BONE_TEXTURE":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+d:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(sr).join("\n"),r=[g,gr(i),"#define SHADER_NAME "+i.shaderName,y,i.alphaTest?"#define ALPHATEST "+i.alphaTest+(i.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+v,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+p:"",i.envMap?"#define "+m:"",i.envMap?"#define "+f:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.sheen?"#define USE_SHEEN":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+d:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(i.extensionShaderTextureLOD||i.envMap)&&i.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==i.toneMapping?"#define TONE_MAPPING":"",0!==i.toneMapping?ki.tonemapping_pars_fragment:"",0!==i.toneMapping?ar("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.outputEncoding||i.mapEncoding||i.matcapEncoding||i.envMapEncoding||i.emissiveMapEncoding||i.lightMapEncoding?ki.encodings_pars_fragment:"",i.mapEncoding?rr("mapTexelToLinear",i.mapEncoding):"",i.matcapEncoding?rr("matcapTexelToLinear",i.matcapEncoding):"",i.envMapEncoding?rr("envMapTexelToLinear",i.envMapEncoding):"",i.emissiveMapEncoding?rr("emissiveMapTexelToLinear",i.emissiveMapEncoding):"",i.lightMapEncoding?rr("lightMapTexelToLinear",i.lightMapEncoding):"",i.outputEncoding?(a="linearToOutputTexel",s=i.outputEncoding,o=ir(s),"vec4 "+a+"( vec4 value ) { return LinearTo"+o[0]+o[1]+"; }"):"",i.depthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(sr).join("\n")),h=lr(h=or(h=hr(h),i),i),u=lr(u=or(u=hr(u),i),i),h=mr(h),u=mr(u),i.isWebGL2&&!i.isRawShaderMaterial){var w=!1,b=/^\s*#version\s+300\s+es\s*\n/;i.isShaderMaterial&&null!==h.match(b)&&null!==u.match(b)&&(w=!0,h=h.replace(b,""),u=u.replace(b,"")),n=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+n,r=["#version 300 es\n","#define varying in",w?"":"out highp vec4 pc_fragColor;",w?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+r}var _,M,S=r+u,E=tr(l,35633,n+h),T=tr(l,35632,S);if(l.attachShader(x,E),l.attachShader(x,T),void 0!==i.index0AttributeName?l.bindAttribLocation(x,0,i.index0AttributeName):!0===i.morphTargets&&l.bindAttribLocation(x,0,"position"),l.linkProgram(x),t.debug.checkShaderErrors){var A=l.getProgramInfoLog(x).trim(),L=l.getShaderInfoLog(E).trim(),C=l.getShaderInfoLog(T).trim(),P=!0,R=!0;if(!1===l.getProgramParameter(x,35714)){P=!1;var I=nr(l,E,"vertex"),O=nr(l,T,"fragment");console.error("THREE.WebGLProgram: shader error: ",l.getError(),"35715",l.getProgramParameter(x,35715),"gl.getProgramInfoLog",A,I,O)}else""!==A?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",A):""!==L&&""!==C||(R=!1);R&&(this.diagnostics={runnable:P,programLog:A,vertexShader:{log:L,prefix:n},fragmentShader:{log:C,prefix:r}})}return l.detachShader(x,E),l.detachShader(x,T),l.deleteShader(E),l.deleteShader(T),this.getUniforms=function(){return void 0===_&&(_=new $n(l,x)),_},this.getAttributes=function(){return void 0===M&&(M=function(t,e){for(var i={},n=t.getProgramParameter(e,35721),r=0;r<n;r++){var a=t.getActiveAttrib(e,r).name;i[a]=t.getAttribLocation(e,a)}return i}(l,x)),M},this.destroy=function(){l.deleteProgram(x),this.program=void 0},this.name=i.shaderName,this.id=er++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=E,this.fragmentShader=T,this}function xr(t,e,i){var n=[],r=i.isWebGL2,a=i.logarithmicDepthBuffer,s=i.floatVertexTextures,o=i.precision,l=i.maxVertexUniforms,c=i.vertexTextures,h={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},u=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function d(t){var e;return t?t.isTexture?e=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=3e3,e}this.getParameters=function(n,u,p,m,f,v,g){var y=m.fog,x=n.isMeshStandardMaterial?m.environment:null,w=n.envMap||x,b=h[n.type],_=g.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(s)return 1024;var i=l,n=Math.floor((i-20)/4),r=Math.min(n,e.length);return r<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+r+"."),0):r}(g):0;null!==n.precision&&(o=i.getMaxPrecision(n.precision))!==n.precision&&console.warn("THREE.WebGLProgram.getParameters:",n.precision,"not supported, using",o,"instead.");var M=function(t,e){var i;if(e){var n=Vi[e];i={name:t.type,uniforms:Ai.clone(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}}else i={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};return i}(n,b);n.onBeforeCompile(M,t);var S=t.getRenderTarget();return{isWebGL2:r,shaderID:b,shaderName:M.name,uniforms:M.uniforms,vertexShader:M.vertexShader,fragmentShader:M.fragmentShader,defines:n.defines,isRawShaderMaterial:n.isRawShaderMaterial,isShaderMaterial:n.isShaderMaterial,precision:o,instancing:!0===g.isInstancedMesh,supportsVertexTextures:c,outputEncoding:null!==S?d(S.texture):t.outputEncoding,map:!!n.map,mapEncoding:d(n.map),matcap:!!n.matcap,matcapEncoding:d(n.matcap),envMap:!!w,envMapMode:w&&w.mapping,envMapEncoding:d(w),envMapCubeUV:!!w&&(306===w.mapping||307===w.mapping),lightMap:!!n.lightMap,lightMapEncoding:d(n.lightMap),aoMap:!!n.aoMap,emissiveMap:!!n.emissiveMap,emissiveMapEncoding:d(n.emissiveMap),bumpMap:!!n.bumpMap,normalMap:!!n.normalMap,objectSpaceNormalMap:1===n.normalMapType,tangentSpaceNormalMap:0===n.normalMapType,clearcoatMap:!!n.clearcoatMap,clearcoatRoughnessMap:!!n.clearcoatRoughnessMap,clearcoatNormalMap:!!n.clearcoatNormalMap,displacementMap:!!n.displacementMap,roughnessMap:!!n.roughnessMap,metalnessMap:!!n.metalnessMap,specularMap:!!n.specularMap,alphaMap:!!n.alphaMap,gradientMap:!!n.gradientMap,sheen:!!n.sheen,combine:n.combine,vertexTangents:n.normalMap&&n.vertexTangents,vertexColors:n.vertexColors,vertexUvs:!!(n.map||n.bumpMap||n.normalMap||n.specularMap||n.alphaMap||n.emissiveMap||n.roughnessMap||n.metalnessMap||n.clearcoatMap||n.clearcoatRoughnessMap||n.clearcoatNormalMap||n.displacementMap),uvsVertexOnly:!(n.map||n.bumpMap||n.normalMap||n.specularMap||n.alphaMap||n.emissiveMap||n.roughnessMap||n.metalnessMap||n.clearcoatNormalMap||!n.displacementMap),fog:!!y,useFog:n.fog,fogExp2:y&&y.isFogExp2,flatShading:n.flatShading,sizeAttenuation:n.sizeAttenuation,logarithmicDepthBuffer:a,skinning:n.skinning&&_>0,maxBones:_,useVertexTexture:s,morphTargets:n.morphTargets,morphNormals:n.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:u.directional.length,numPointLights:u.point.length,numSpotLights:u.spot.length,numRectAreaLights:u.rectArea.length,numHemiLights:u.hemi.length,numDirLightShadows:u.directionalShadowMap.length,numPointLightShadows:u.pointShadowMap.length,numSpotLightShadows:u.spotShadowMap.length,numClippingPlanes:f,numClipIntersection:v,dithering:n.dithering,shadowMapEnabled:t.shadowMap.enabled&&p.length>0,shadowMapType:t.shadowMap.type,toneMapping:n.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:n.premultipliedAlpha,alphaTest:n.alphaTest,doubleSided:2===n.side,flipSided:1===n.side,depthPacking:void 0!==n.depthPacking&&n.depthPacking,index0AttributeName:n.index0AttributeName,extensionDerivatives:n.extensions&&n.extensions.derivatives,extensionFragDepth:n.extensions&&n.extensions.fragDepth,extensionDrawBuffers:n.extensions&&n.extensions.drawBuffers,extensionShaderTextureLOD:n.extensions&&n.extensions.shaderTextureLOD,rendererExtensionFragDepth:r||null!==e.get("EXT_frag_depth"),rendererExtensionDrawBuffers:r||null!==e.get("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:r||null!==e.get("EXT_shader_texture_lod"),onBeforeCompile:n.onBeforeCompile}},this.getProgramCacheKey=function(e){var i=[];if(e.shaderID?i.push(e.shaderID):(i.push(e.fragmentShader),i.push(e.vertexShader)),void 0!==e.defines)for(var n in e.defines)i.push(n),i.push(e.defines[n]);if(void 0===e.isRawShaderMaterial){for(var r=0;r<u.length;r++)i.push(e[u[r]]);i.push(t.outputEncoding),i.push(t.gammaFactor)}return i.push(e.onBeforeCompile.toString()),i.join()},this.acquireProgram=function(e,i){for(var r,a=0,s=n.length;a<s;a++){var o=n[a];if(o.cacheKey===i){++(r=o).usedTimes;break}}return void 0===r&&(r=new yr(t,i,e),n.push(r)),r},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=n.indexOf(t);n[e]=n[n.length-1],n.pop(),t.destroy()}},this.programs=n}function wr(){var t=new WeakMap;return{get:function(e){var i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function br(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function _r(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Mr(){var t=[],e=0,i=[],n=[],r={id:-1};function a(i,n,a,s,o,l){var c=t[e];return void 0===c?(c={id:i.id,object:i,geometry:n,material:a,program:a.program||r,groupOrder:s,renderOrder:i.renderOrder,z:o,group:l},t[e]=c):(c.id=i.id,c.object=i,c.geometry=n,c.material=a,c.program=a.program||r,c.groupOrder=s,c.renderOrder=i.renderOrder,c.z=o,c.group=l),e++,c}return{opaque:i,transparent:n,init:function(){e=0,i.length=0,n.length=0},push:function(t,e,r,s,o,l){var c=a(t,e,r,s,o,l);(!0===r.transparent?n:i).push(c)},unshift:function(t,e,r,s,o,l){var c=a(t,e,r,s,o,l);(!0===r.transparent?n:i).unshift(c)},finish:function(){for(var i=e,n=t.length;i<n;i++){var r=t[i];if(null===r.id)break;r.id=null,r.object=null,r.geometry=null,r.material=null,r.program=null,r.group=null}},sort:function(t,e){i.length>1&&i.sort(t||br),n.length>1&&n.sort(e||_r)}}}function Sr(){var t=new WeakMap;function e(i){var n=i.target;n.removeEventListener("dispose",e),t.delete(n)}return{get:function(i,n){var r,a=t.get(i);return void 0===a?(r=new Mr,t.set(i,new WeakMap),t.get(i).set(n,r),i.addEventListener("dispose",e)):void 0===(r=a.get(n))&&(r=new Mr,a.set(n,r)),r},dispose:function(){t=new WeakMap}}}function Er(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var i;switch(e.type){case"DirectionalLight":i={direction:new ot,color:new Se};break;case"SpotLight":i={position:new ot,direction:new ot,color:new Se,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new ot,color:new Se,distance:0,decay:0};break;case"HemisphereLight":i={direction:new ot,skyColor:new Se,groundColor:new Se};break;case"RectAreaLight":i={color:new Se,position:new ot,halfWidth:new ot,halfHeight:new ot}}return t[e.id]=i,i}}}var Tr=0;function Ar(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Lr(){for(var t,e=new Er,i=(t={},{get:function(e){if(void 0!==t[e.id])return t[e.id];var i;switch(e.type){case"DirectionalLight":case"SpotLight":i={shadowBias:0,shadowRadius:1,shadowMapSize:new J};break;case"PointLight":i={shadowBias:0,shadowRadius:1,shadowMapSize:new J,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=i,i}}),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},r=0;r<9;r++)n.probe.push(new ot);var a=new ot,s=new ft,o=new ft;return{setup:function(t,r,l){for(var c=0,h=0,u=0,d=0;d<9;d++)n.probe[d].set(0,0,0);var p=0,m=0,f=0,v=0,g=0,y=0,x=0,w=0,b=l.matrixWorldInverse;t.sort(Ar),d=0;for(var _=t.length;d<_;d++){var M=t[d],S=M.color,E=M.intensity,T=M.distance,A=M.shadow&&M.shadow.map?M.shadow.map.texture:null;if(M.isAmbientLight)c+=S.r*E,h+=S.g*E,u+=S.b*E;else if(M.isLightProbe)for(var L=0;L<9;L++)n.probe[L].addScaledVector(M.sh.coefficients[L],E);else if(M.isDirectionalLight){if((R=e.get(M)).color.copy(M.color).multiplyScalar(M.intensity),R.direction.setFromMatrixPosition(M.matrixWorld),a.setFromMatrixPosition(M.target.matrixWorld),R.direction.sub(a),R.direction.transformDirection(b),M.castShadow){var C=M.shadow;(P=i.get(M)).shadowBias=C.bias,P.shadowRadius=C.radius,P.shadowMapSize=C.mapSize,n.directionalShadow[p]=P,n.directionalShadowMap[p]=A,n.directionalShadowMatrix[p]=M.shadow.matrix,y++}n.directional[p]=R,p++}else if(M.isSpotLight){if((R=e.get(M)).position.setFromMatrixPosition(M.matrixWorld),R.position.applyMatrix4(b),R.color.copy(S).multiplyScalar(E),R.distance=T,R.direction.setFromMatrixPosition(M.matrixWorld),a.setFromMatrixPosition(M.target.matrixWorld),R.direction.sub(a),R.direction.transformDirection(b),R.coneCos=Math.cos(M.angle),R.penumbraCos=Math.cos(M.angle*(1-M.penumbra)),R.decay=M.decay,M.castShadow){C=M.shadow;(P=i.get(M)).shadowBias=C.bias,P.shadowRadius=C.radius,P.shadowMapSize=C.mapSize,n.spotShadow[f]=P,n.spotShadowMap[f]=A,n.spotShadowMatrix[f]=M.shadow.matrix,w++}n.spot[f]=R,f++}else if(M.isRectAreaLight){(R=e.get(M)).color.copy(S).multiplyScalar(E),R.position.setFromMatrixPosition(M.matrixWorld),R.position.applyMatrix4(b),o.identity(),s.copy(M.matrixWorld),s.premultiply(b),o.extractRotation(s),R.halfWidth.set(.5*M.width,0,0),R.halfHeight.set(0,.5*M.height,0),R.halfWidth.applyMatrix4(o),R.halfHeight.applyMatrix4(o),n.rectArea[v]=R,v++}else if(M.isPointLight){if((R=e.get(M)).position.setFromMatrixPosition(M.matrixWorld),R.position.applyMatrix4(b),R.color.copy(M.color).multiplyScalar(M.intensity),R.distance=M.distance,R.decay=M.decay,M.castShadow){var P;C=M.shadow;(P=i.get(M)).shadowBias=C.bias,P.shadowRadius=C.radius,P.shadowMapSize=C.mapSize,P.shadowCameraNear=C.camera.near,P.shadowCameraFar=C.camera.far,n.pointShadow[m]=P,n.pointShadowMap[m]=A,n.pointShadowMatrix[m]=M.shadow.matrix,x++}n.point[m]=R,m++}else if(M.isHemisphereLight){var R;(R=e.get(M)).direction.setFromMatrixPosition(M.matrixWorld),R.direction.transformDirection(b),R.direction.normalize(),R.skyColor.copy(M.color).multiplyScalar(E),R.groundColor.copy(M.groundColor).multiplyScalar(E),n.hemi[g]=R,g++}}n.ambient[0]=c,n.ambient[1]=h,n.ambient[2]=u;var I=n.hash;I.directionalLength===p&&I.pointLength===m&&I.spotLength===f&&I.rectAreaLength===v&&I.hemiLength===g&&I.numDirectionalShadows===y&&I.numPointShadows===x&&I.numSpotShadows===w||(n.directional.length=p,n.spot.length=f,n.rectArea.length=v,n.point.length=m,n.hemi.length=g,n.directionalShadow.length=y,n.directionalShadowMap.length=y,n.pointShadow.length=x,n.pointShadowMap.length=x,n.spotShadow.length=w,n.spotShadowMap.length=w,n.directionalShadowMatrix.length=y,n.pointShadowMatrix.length=x,n.spotShadowMatrix.length=w,I.directionalLength=p,I.pointLength=m,I.spotLength=f,I.rectAreaLength=v,I.hemiLength=g,I.numDirectionalShadows=y,I.numPointShadows=x,I.numSpotShadows=w,n.version=Tr++)},state:n}}function Cr(){var t=new Lr,e=[],i=[];return{init:function(){e.length=0,i.length=0},state:{lightsArray:e,shadowsArray:i,lights:t},setupLights:function(n){t.setup(e,i,n)},pushLight:function(t){e.push(t)},pushShadow:function(t){i.push(t)}}}function Pr(){var t=new WeakMap;function e(i){var n=i.target;n.removeEventListener("dispose",e),t.delete(n)}return{get:function(i,n){var r;return!1===t.has(i)?(r=new Cr,t.set(i,new WeakMap),t.get(i).set(n,r),i.addEventListener("dispose",e)):!1===t.get(i).has(n)?(r=new Cr,t.get(i).set(n,r)):r=t.get(i).get(n),r},dispose:function(){t=new WeakMap}}}function Rr(t){Pe.call(this),this.type="MeshDepthMaterial",this.depthPacking=3200,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}function Ir(t){Pe.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new ot,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}Rr.prototype=Object.create(Pe.prototype),Rr.prototype.constructor=Rr,Rr.prototype.isMeshDepthMaterial=!0,Rr.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Ir.prototype=Object.create(Pe.prototype),Ir.prototype.constructor=Ir,Ir.prototype.isMeshDistanceMaterial=!0,Ir.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this};function Or(t,e,i){var n=new zi,r=new J,a=new J,s=new et,o=[],l=[],c={},h={0:1,1:0,2:2},u=new Li({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new J},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),d=u.clone();d.defines.HORIZONAL_PASS=1;var p=new Ke;p.setAttribute("position",new Oe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var m=new vi(p,u),f=this;function v(i,n){var r=e.update(m);u.uniforms.shadow_pass.value=i.map.texture,u.uniforms.resolution.value=i.mapSize,u.uniforms.radius.value=i.radius,t.setRenderTarget(i.mapPass),t.clear(),t.renderBufferDirect(n,null,r,u,m,null),d.uniforms.shadow_pass.value=i.mapPass.texture,d.uniforms.resolution.value=i.mapSize,d.uniforms.radius.value=i.radius,t.setRenderTarget(i.map),t.clear(),t.renderBufferDirect(n,null,r,d,m,null)}function g(t,e,i){var n=t<<0|e<<1|i<<2,r=o[n];return void 0===r&&(r=new Rr({depthPacking:3201,morphTargets:t,skinning:e}),o[n]=r),r}function y(t,e,i){var n=t<<0|e<<1|i<<2,r=l[n];return void 0===r&&(r=new Ir({morphTargets:t,skinning:e}),l[n]=r),r}function x(e,i,n,r,a,s){var o=e.geometry,l=null,u=g,d=e.customDepthMaterial;if(!0===n.isPointLight&&(u=y,d=e.customDistanceMaterial),void 0===d){var p=!1;!0===i.morphTargets&&(!0===o.isBufferGeometry?p=o.morphAttributes&&o.morphAttributes.position&&o.morphAttributes.position.length>0:!0===o.isGeometry&&(p=o.morphTargets&&o.morphTargets.length>0));var m=!1;!0===e.isSkinnedMesh&&(!0===i.skinning?m=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e)),l=u(p,m,!0===e.isInstancedMesh)}else l=d;if(t.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){var f=l.uuid,v=i.uuid,x=c[f];void 0===x&&(x={},c[f]=x);var w=x[v];void 0===w&&(w=l.clone(),x[v]=w),l=w}return l.visible=i.visible,l.wireframe=i.wireframe,l.side=3===s?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:h[i.side],l.clipShadows=i.clipShadows,l.clippingPlanes=i.clippingPlanes,l.clipIntersection=i.clipIntersection,l.wireframeLinewidth=i.wireframeLinewidth,l.linewidth=i.linewidth,!0===n.isPointLight&&!0===l.isMeshDistanceMaterial&&(l.referencePosition.setFromMatrixPosition(n.matrixWorld),l.nearDistance=r,l.farDistance=a),l}function w(i,r,a,s,o){if(!1!==i.visible){if(i.layers.test(r.layers)&&(i.isMesh||i.isLine||i.isPoints)&&(i.castShadow||i.receiveShadow&&3===o)&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,i.matrixWorld);var l=e.update(i),c=i.material;if(Array.isArray(c))for(var h=l.groups,u=0,d=h.length;u<d;u++){var p=h[u],m=c[p.materialIndex];if(m&&m.visible){var f=x(i,m,s,a.near,a.far,o);t.renderBufferDirect(a,null,l,f,i,p)}}else if(c.visible){f=x(i,c,s,a.near,a.far,o);t.renderBufferDirect(a,null,l,f,i,null)}}for(var v=i.children,g=0,y=v.length;g<y;g++)w(v[g],r,a,s,o)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,o,l){if(!1!==f.enabled&&(!1!==f.autoUpdate||!1!==f.needsUpdate)&&0!==e.length){var c=t.getRenderTarget(),h=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,m=e.length;p<m;p++){var g=e[p],y=g.shadow;if(void 0!==y){r.copy(y.mapSize);var x=y.getFrameExtents();if(r.multiply(x),a.copy(y.mapSize),(r.x>i||r.y>i)&&(console.warn("THREE.WebGLShadowMap:",g,"has shadow exceeding max texture size, reducing"),r.x>i&&(a.x=Math.floor(i/x.x),r.x=a.x*x.x,y.mapSize.x=a.x),r.y>i&&(a.y=Math.floor(i/x.y),r.y=a.y*x.y,y.mapSize.y=a.y)),null===y.map&&!y.isPointLightShadow&&3===this.type){var b={minFilter:1006,magFilter:1006,format:1023};y.map=new it(r.x,r.y,b),y.map.texture.name=g.name+".shadowMap",y.mapPass=new it(r.x,r.y,b),y.camera.updateProjectionMatrix()}if(null===y.map){b={minFilter:1003,magFilter:1003,format:1023};y.map=new it(r.x,r.y,b),y.map.texture.name=g.name+".shadowMap",y.camera.updateProjectionMatrix()}t.setRenderTarget(y.map),t.clear();for(var _=y.getViewportCount(),M=0;M<_;M++){var S=y.getViewport(M);s.set(a.x*S.x,a.y*S.y,a.x*S.z,a.y*S.w),d.viewport(s),y.updateMatrices(g,M),n=y.getFrustum(),w(o,l,y.camera,g,this.type)}y.isPointLightShadow||3!==this.type||v(y,l)}else console.warn("THREE.WebGLShadowMap:",g,"has no shadow.")}f.needsUpdate=!1,t.setRenderTarget(c,h,u)}}}function Dr(t,e,i){var n=i.isWebGL2;var r=new function(){var e=!1,i=new et,n=null,r=new et(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,a,s,o){!0===o&&(e*=s,n*=s,a*=s),i.set(e,n,a,s),!1===r.equals(i)&&(t.clearColor(e,n,a,s),r.copy(i))},reset:function(){e=!1,n=null,r.set(-1,0,0,0)}}},a=new function(){var e=!1,i=null,n=null,r=null;return{setTest:function(t){t?B(2929):U(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,i=null,n=null,r=null}}},s=new function(){var e=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?B(2960):U(2960))},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,s){n===e&&r===i&&a===s||(t.stencilFunc(e,i,s),n=e,r=i,a=s)},setOp:function(e,i,n){s===e&&o===i&&l===n||(t.stencilOp(e,i,n),s=e,o=i,l=n)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,c=null}}},o=t.getParameter(34921),l=new Uint8Array(o),c=new Uint8Array(o),h=new Uint8Array(o),u={},d=null,p=null,m=null,f=null,v=null,g=null,y=null,x=null,w=null,b=!1,_=null,M=null,S=null,E=null,T=null,A=t.getParameter(35661),L=!1,C=0,P=t.getParameter(7938);-1!==P.indexOf("WebGL")?(C=parseFloat(/^WebGL\ ([0-9])/.exec(P)[1]),L=C>=1):-1!==P.indexOf("OpenGL ES")&&(C=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(P)[1]),L=C>=2);var R=null,I={},O=new et,D=new et;function N(e,i,n){var r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var s=0;s<n;s++)t.texImage2D(i+s,0,6408,1,1,0,6408,5121,r);return a}var z={};function H(i,r){(l[i]=1,0===c[i]&&(t.enableVertexAttribArray(i),c[i]=1),h[i]!==r)&&((n?t:e.get("ANGLE_instanced_arrays"))[n?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,r),h[i]=r)}function B(e){!0!==u[e]&&(t.enable(e),u[e]=!0)}function U(e){!1!==u[e]&&(t.disable(e),u[e]=!1)}z[3553]=N(3553,3553,1),z[34067]=N(34067,34069,6),r.setClear(0,0,0,1),a.setClear(1),s.setClear(0),B(2929),a.setFunc(3),j(!1),W(1),B(2884),V(0);var F={100:32774,101:32778,102:32779};if(n)F[103]=32775,F[104]=32776;else{var G=e.get("EXT_blend_minmax");null!==G&&(F[103]=G.MIN_EXT,F[104]=G.MAX_EXT)}var k={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function V(e,i,n,r,a,s,o,l){if(0!==e){if(p||(B(3042),p=!0),5===e)a=a||i,s=s||n,o=o||r,i===f&&a===y||(t.blendEquationSeparate(F[i],F[a]),f=i,y=a),n===v&&r===g&&s===x&&o===w||(t.blendFuncSeparate(k[n],k[r],k[s],k[o]),v=n,g=r,x=s,w=o),m=e,b=null;else if(e!==m||l!==b){if(100===f&&100===y||(t.blendEquation(32774),f=100,y=100),l)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,0,769,771);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFunc(0,769);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}v=null,g=null,x=null,w=null,m=e,b=l}}else p&&(U(3042),p=!1)}function j(e){_!==e&&(e?t.frontFace(2304):t.frontFace(2305),_=e)}function W(e){0!==e?(B(2884),e!==M&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):U(2884),M=e}function q(e,i,n){e?(B(32823),E===i&&T===n||(t.polygonOffset(i,n),E=i,T=n)):U(32823)}function X(e){void 0===e&&(e=33984+A-1),R!==e&&(t.activeTexture(e),R=e)}return{buffers:{color:r,depth:a,stencil:s},initAttributes:function(){for(var t=0,e=l.length;t<e;t++)l[t]=0},enableAttribute:function(t){H(t,0)},enableAttributeAndDivisor:H,disableUnusedAttributes:function(){for(var e=0,i=c.length;e!==i;++e)c[e]!==l[e]&&(t.disableVertexAttribArray(e),c[e]=0)},enable:B,disable:U,useProgram:function(e){return d!==e&&(t.useProgram(e),d=e,!0)},setBlending:V,setMaterial:function(t,e){2===t.side?U(2884):B(2884);var i=1===t.side;e&&(i=!i),j(i),1===t.blending&&!1===t.transparent?V(0):V(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);var n=t.stencilWrite;s.setTest(n),n&&(s.setMask(t.stencilWriteMask),s.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),s.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),q(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:j,setCullFace:W,setLineWidth:function(e){e!==S&&(L&&t.lineWidth(e),S=e)},setPolygonOffset:q,setScissorTest:function(t){t?B(3089):U(3089)},activeTexture:X,bindTexture:function(e,i){null===R&&X();var n=I[R];void 0===n&&(n={type:void 0,texture:void 0},I[R]=n),n.type===e&&n.texture===i||(t.bindTexture(e,i||z[e]),n.type=e,n.texture=i)},unbindTexture:function(){var e=I[R];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===O.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),O.copy(e))},viewport:function(e){!1===D.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),D.copy(e))},reset:function(){for(var e=0;e<c.length;e++)1===c[e]&&(t.disableVertexAttribArray(e),c[e]=0);u={},R=null,I={},d=null,m=null,_=null,M=null,r.reset(),a.reset(),s.reset()}}}function Nr(t,e,i,n,r,a,s){var o,l=r.isWebGL2,c=r.maxTextures,h=r.maxCubemapSize,u=r.maxTextureSize,d=r.maxSamples,p=new WeakMap,m=!1;try{m="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function f(t,e){return m?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function v(t,e,i,n){var r=1;if((t.width>n||t.height>n)&&(r=n/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){var a=e?Z.floorPowerOfTwo:Math.floor,s=a(r*t.width),l=a(r*t.height);void 0===o&&(o=f(s,l));var c=i?f(s,l):o;return c.width=s,c.height=l,c.getContext("2d").drawImage(t,0,0,s,l),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+l+")."),c}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function g(t){return Z.isPowerOfTwo(t.width)&&Z.isPowerOfTwo(t.height)}function y(t,e){return t.generateMipmaps&&e&&1003!==t.minFilter&&1006!==t.minFilter}function x(e,i,r,a){t.generateMipmap(e),n.get(i).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function w(i,n,r){if(!1===l)return n;if(null!==i){if(void 0!==t[i])return t[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}var a=n;return 6403===n&&(5126===r&&(a=33326),5131===r&&(a=33325),5121===r&&(a=33321)),6407===n&&(5126===r&&(a=34837),5131===r&&(a=34843),5121===r&&(a=32849)),6408===n&&(5126===r&&(a=34836),5131===r&&(a=34842),5121===r&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||e.get("EXT_color_buffer_float"),a}function b(t){return 1003===t||1004===t||1005===t?9728:9729}function _(e){var i=e.target;i.removeEventListener("dispose",_),function(e){var i=n.get(e);if(void 0===i.__webglInit)return;t.deleteTexture(i.__webglTexture),n.remove(e)}(i),i.isVideoTexture&&p.delete(i),s.memory.textures--}function M(e){var i=e.target;i.removeEventListener("dispose",M),function(e){var i=n.get(e),r=n.get(e.texture);if(!e)return;void 0!==r.__webglTexture&&t.deleteTexture(r.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(var a=0;a<6;a++)t.deleteFramebuffer(i.__webglFramebuffer[a]),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer[a]);else t.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer),i.__webglMultisampledFramebuffer&&t.deleteFramebuffer(i.__webglMultisampledFramebuffer),i.__webglColorRenderbuffer&&t.deleteRenderbuffer(i.__webglColorRenderbuffer),i.__webglDepthRenderbuffer&&t.deleteRenderbuffer(i.__webglDepthRenderbuffer);n.remove(e.texture),n.remove(e)}(i),s.memory.textures--}var S=0;function E(t,e){var r=n.get(t);if(t.isVideoTexture&&function(t){var e=s.render.frame;p.get(t)!==e&&(p.set(t,e),t.update())}(t),t.version>0&&r.__version!==t.version){var a=t.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void I(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}i.activeTexture(33984+e),i.bindTexture(3553,r.__webglTexture)}function T(e,r){if(6===e.image.length){var s=n.get(e);if(e.version>0&&s.__version!==e.version){R(s,e),i.activeTexture(33984+r),i.bindTexture(34067,s.__webglTexture),t.pixelStorei(37440,e.flipY);for(var o=e&&(e.isCompressedTexture||e.image[0].isCompressedTexture),c=e.image[0]&&e.image[0].isDataTexture,u=[],d=0;d<6;d++)u[d]=o||c?c?e.image[d].image:e.image[d]:v(e.image[d],!1,!0,h);var p,m=u[0],f=g(m)||l,b=a.convert(e.format),_=a.convert(e.type),M=w(e.internalFormat,b,_);if(P(34067,e,f),o){for(d=0;d<6;d++){p=u[d].mipmaps;for(var S=0;S<p.length;S++){var E=p[S];1023!==e.format&&1022!==e.format?null!==b?i.compressedTexImage2D(34069+d,S,M,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):i.texImage2D(34069+d,S,M,E.width,E.height,0,b,_,E.data)}}s.__maxMipLevel=p.length-1}else{p=e.mipmaps;for(d=0;d<6;d++)if(c){i.texImage2D(34069+d,0,M,u[d].width,u[d].height,0,b,_,u[d].data);for(S=0;S<p.length;S++){var T=(E=p[S]).image[d].image;i.texImage2D(34069+d,S+1,M,T.width,T.height,0,b,_,T.data)}}else{i.texImage2D(34069+d,0,M,b,_,u[d]);for(S=0;S<p.length;S++){E=p[S];i.texImage2D(34069+d,S+1,M,b,_,E.image[d])}}s.__maxMipLevel=p.length}y(e,f)&&x(34067,e,m.width,m.height),s.__version=e.version,e.onUpdate&&e.onUpdate(e)}else i.activeTexture(33984+r),i.bindTexture(34067,s.__webglTexture)}}function A(t,e){i.activeTexture(33984+e),i.bindTexture(34067,n.get(t).__webglTexture)}var L={1e3:10497,1001:33071,1002:33648},C={1003:9728,1004:9984,1005:9986,1006:9729,1007:9985,1008:9987};function P(i,a,s){s?(t.texParameteri(i,10242,L[a.wrapS]),t.texParameteri(i,10243,L[a.wrapT]),32879!==i&&35866!==i||t.texParameteri(i,32882,L[a.wrapR]),t.texParameteri(i,10240,C[a.magFilter]),t.texParameteri(i,10241,C[a.minFilter])):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),32879!==i&&35866!==i||t.texParameteri(i,32882,33071),1001===a.wrapS&&1001===a.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(i,10240,b(a.magFilter)),t.texParameteri(i,10241,b(a.minFilter)),1003!==a.minFilter&&1006!==a.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));var o=e.get("EXT_texture_filter_anisotropic");if(o){if(1015===a.type&&null===e.get("OES_texture_float_linear"))return;if(1016===a.type&&null===(l||e.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||n.get(a).__currentAnisotropy)&&(t.texParameterf(i,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy)}}function R(e,i){void 0===e.__webglInit&&(e.__webglInit=!0,i.addEventListener("dispose",_),e.__webglTexture=t.createTexture(),s.memory.textures++)}function I(e,n,r){var s=3553;n.isDataTexture2DArray&&(s=35866),n.isDataTexture3D&&(s=32879),R(e,n),i.activeTexture(33984+r),i.bindTexture(s,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment);var o=function(t){return!l&&(1001!==t.wrapS||1001!==t.wrapT||1003!==t.minFilter&&1006!==t.minFilter)}(n)&&!1===g(n.image),c=v(n.image,o,!1,u),h=g(c)||l,d=a.convert(n.format),p=a.convert(n.type),m=w(n.internalFormat,d,p);P(s,n,h);var f,b=n.mipmaps;if(n.isDepthTexture)m=6402,l?m=1015===n.type?36012:1014===n.type?33190:1020===n.type?35056:33189:1015===n.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===n.format&&6402===m&&1012!==n.type&&1014!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=1012,p=a.convert(n.type)),1027===n.format&&6402===m&&(m=34041,1020!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=1020,p=a.convert(n.type))),i.texImage2D(3553,0,m,c.width,c.height,0,d,p,null);else if(n.isDataTexture)if(b.length>0&&h){for(var _=0,M=b.length;_<M;_++)f=b[_],i.texImage2D(3553,_,m,f.width,f.height,0,d,p,f.data);n.generateMipmaps=!1,e.__maxMipLevel=b.length-1}else i.texImage2D(3553,0,m,c.width,c.height,0,d,p,c.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(_=0,M=b.length;_<M;_++)f=b[_],1023!==n.format&&1022!==n.format?null!==d?i.compressedTexImage2D(3553,_,m,f.width,f.height,0,f.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):i.texImage2D(3553,_,m,f.width,f.height,0,d,p,f.data);e.__maxMipLevel=b.length-1}else if(n.isDataTexture2DArray)i.texImage3D(35866,0,m,c.width,c.height,c.depth,0,d,p,c.data),e.__maxMipLevel=0;else if(n.isDataTexture3D)i.texImage3D(32879,0,m,c.width,c.height,c.depth,0,d,p,c.data),e.__maxMipLevel=0;else if(b.length>0&&h){for(_=0,M=b.length;_<M;_++)f=b[_],i.texImage2D(3553,_,m,d,p,f);n.generateMipmaps=!1,e.__maxMipLevel=b.length-1}else i.texImage2D(3553,0,m,d,p,c),e.__maxMipLevel=0;y(n,h)&&x(s,n,c.width,c.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function O(e,r,s,o){var l=a.convert(r.texture.format),c=a.convert(r.texture.type),h=w(r.texture.internalFormat,l,c);i.texImage2D(o,0,h,r.width,r.height,0,l,c,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,s,o,n.get(r.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function D(e,i,n){if(t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer){var r=33189;if(n){var s=i.depthTexture;s&&s.isDepthTexture&&(1015===s.type?r=36012:1014===s.type&&(r=33190));var o=z(i);t.renderbufferStorageMultisample(36161,o,r,i.width,i.height)}else t.renderbufferStorage(36161,r,i.width,i.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(i.depthBuffer&&i.stencilBuffer){if(n){o=z(i);t.renderbufferStorageMultisample(36161,o,35056,i.width,i.height)}else t.renderbufferStorage(36161,34041,i.width,i.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{var l=a.convert(i.texture.format),c=a.convert(i.texture.type);r=w(i.texture.internalFormat,l,c);if(n){o=z(i);t.renderbufferStorageMultisample(36161,o,r,i.width,i.height)}else t.renderbufferStorage(36161,r,i.width,i.height)}t.bindRenderbuffer(36161,null)}function N(e){var i=n.get(e),r=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),E(i.depthTexture,0);var r=n.get(i.depthTexture).__webglTexture;if(1026===i.depthTexture.format)t.framebufferTexture2D(36160,36096,3553,r,0);else{if(1027!==i.depthTexture.format)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,r,0)}}(i.__webglFramebuffer,e)}else if(r){i.__webglDepthbuffer=[];for(var a=0;a<6;a++)t.bindFramebuffer(36160,i.__webglFramebuffer[a]),i.__webglDepthbuffer[a]=t.createRenderbuffer(),D(i.__webglDepthbuffer[a],e,!1)}else t.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),D(i.__webglDepthbuffer,e,!1);t.bindFramebuffer(36160,null)}function z(t){return l&&t.isWebGLMultisampleRenderTarget?Math.min(d,t.samples):0}var H=!1,B=!1;this.allocateTextureUnit=function(){var t=S;return t>=c&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+c),S+=1,t},this.resetTextureUnits=function(){S=0},this.setTexture2D=E,this.setTexture2DArray=function(t,e){var r=n.get(t);t.version>0&&r.__version!==t.version?I(r,t,e):(i.activeTexture(33984+e),i.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){var r=n.get(t);t.version>0&&r.__version!==t.version?I(r,t,e):(i.activeTexture(33984+e),i.bindTexture(32879,r.__webglTexture))},this.setTextureCube=T,this.setTextureCubeDynamic=A,this.setupRenderTarget=function(e){var r=n.get(e),o=n.get(e.texture);e.addEventListener("dispose",M),o.__webglTexture=t.createTexture(),s.memory.textures++;var c=!0===e.isWebGLCubeRenderTarget,h=!0===e.isWebGLMultisampleRenderTarget,u=g(e)||l;if(!l||1022!==e.texture.format||1015!==e.texture.type&&1016!==e.texture.type||(e.texture.format=1023,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),c){r.__webglFramebuffer=[];for(var d=0;d<6;d++)r.__webglFramebuffer[d]=t.createFramebuffer()}else if(r.__webglFramebuffer=t.createFramebuffer(),h)if(l){r.__webglMultisampledFramebuffer=t.createFramebuffer(),r.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,r.__webglColorRenderbuffer);var p=a.convert(e.texture.format),m=a.convert(e.texture.type),f=w(e.texture.internalFormat,p,m),v=z(e);t.renderbufferStorageMultisample(36161,v,f,e.width,e.height),t.bindFramebuffer(36160,r.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,r.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(r.__webglDepthRenderbuffer=t.createRenderbuffer(),D(r.__webglDepthRenderbuffer,e,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(c){i.bindTexture(34067,o.__webglTexture),P(34067,e.texture,u);for(d=0;d<6;d++)O(r.__webglFramebuffer[d],e,36064,34069+d);y(e.texture,u)&&x(34067,e.texture,e.width,e.height),i.bindTexture(34067,null)}else i.bindTexture(3553,o.__webglTexture),P(3553,e.texture,u),O(r.__webglFramebuffer,e,36064,3553),y(e.texture,u)&&x(3553,e.texture,e.width,e.height),i.bindTexture(3553,null);e.depthBuffer&&N(e)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(y(e,g(t)||l)){var r=t.isWebGLCubeRenderTarget?34067:3553,a=n.get(e).__webglTexture;i.bindTexture(r,a),x(r,e,t.width,t.height),i.bindTexture(r,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(l){var i=n.get(e);t.bindFramebuffer(36008,i.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,i.__webglFramebuffer);var r=e.width,a=e.height,s=16384;e.depthBuffer&&(s|=256),e.stencilBuffer&&(s|=1024),t.blitFramebuffer(0,0,r,a,0,0,r,a,s,9728),t.bindFramebuffer(36160,i.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===H&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),H=!0),t=t.texture),E(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===B&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),B=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?T(t,e):A(t,e)}}function zr(t,e,i){var n=i.isWebGL2;return{convert:function(t){var i;if(1009===t)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1019===t)return 33635;if(1010===t)return 5120;if(1011===t)return 5122;if(1012===t)return 5123;if(1013===t)return 5124;if(1014===t)return 5125;if(1015===t)return 5126;if(1016===t)return n?5131:null!==(i=e.get("OES_texture_half_float"))?i.HALF_FLOAT_OES:null;if(1021===t)return 6406;if(1022===t)return 6407;if(1023===t)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(1026===t)return 6402;if(1027===t)return 34041;if(1028===t)return 6403;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1032===t)return 36248;if(1033===t)return 36249;if(33776===t||33777===t||33778===t||33779===t){if(null===(i=e.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===t)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===t)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===t)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===t)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(null===(i=e.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===t)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return null!==(i=e.get("WEBGL_compressed_texture_etc1"))?i.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===t||37496===t)&&null!==(i=e.get("WEBGL_compressed_texture_etc"))){if(37492===t)return i.COMPRESSED_RGB8_ETC2;if(37496===t)return i.COMPRESSED_RGBA8_ETC2_EAC}return 37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t||37840===t||37841===t||37842===t||37843===t||37844===t||37845===t||37846===t||37847===t||37848===t||37849===t||37850===t||37851===t||37852===t||37853===t?null!==(i=e.get("WEBGL_compressed_texture_astc"))?t:null:36492===t?null!==(i=e.get("EXT_texture_compression_bptc"))?t:null:1020===t?n?34042:null!==(i=e.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}function Hr(t){Pi.call(this),this.cameras=t||[]}function Br(){Ot.call(this),this.type="Group"}function Ur(t,e){var i=this,n=null,r=1,a=null,s="local-floor",o=null,l=[],c=new Map,h=new Pi;h.layers.enable(1),h.viewport=new et;var u=new Pi;u.layers.enable(2),u.viewport=new et;var d=new Hr([h,u]);d.layers.enable(1),d.layers.enable(2);var p=null,m=null;function f(t){var e=c.get(t.inputSource);e&&(e.targetRay&&e.targetRay.dispatchEvent({type:t.type}),e.grip&&e.grip.dispatchEvent({type:t.type}))}function v(){c.forEach((function(t,e){t.targetRay&&(t.targetRay.dispatchEvent({type:"disconnected",data:e}),t.targetRay.visible=!1),t.grip&&(t.grip.dispatchEvent({type:"disconnected",data:e}),t.grip.visible=!1)})),c.clear(),t.setFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),M.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}function g(t){a=t,M.setContext(n),M.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}function y(t){for(var e=n.inputSources,i=0;i<l.length;i++)c.set(e[i],l[i]);for(i=0;i<t.removed.length;i++){var r=t.removed[i];(a=c.get(r))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"disconnected",data:r}),a.grip&&a.grip.dispatchEvent({type:"disconnected",data:r}),c.delete(r))}for(i=0;i<t.added.length;i++){var a;r=t.added[i];(a=c.get(r))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"connected",data:r}),a.grip&&a.grip.dispatchEvent({type:"connected",data:r}))}}this.enabled=!1,this.isPresenting=!1,this.getController=function(t){var e=l[t];return void 0===e&&(e={},l[t]=e),void 0===e.targetRay&&(e.targetRay=new Br,e.targetRay.matrixAutoUpdate=!1,e.targetRay.visible=!1),e.targetRay},this.getControllerGrip=function(t){var e=l[t];return void 0===e&&(e={},l[t]=e),void 0===e.grip&&(e.grip=new Br,e.grip.matrixAutoUpdate=!1,e.grip.visible=!1),e.grip},this.setFramebufferScaleFactor=function(t){r=t,1==i.isPresenting&&console.warn("WebXRManager: Cannot change framebuffer scale while presenting VR content")},this.setReferenceSpaceType=function(t){s=t},this.getReferenceSpace=function(){return a},this.getSession=function(){return n},this.setSession=function(t){if(null!==(n=t)){n.addEventListener("select",f),n.addEventListener("selectstart",f),n.addEventListener("selectend",f),n.addEventListener("squeeze",f),n.addEventListener("squeezestart",f),n.addEventListener("squeezeend",f),n.addEventListener("end",v);var i=e.getContextAttributes(),a={antialias:i.antialias,alpha:i.alpha,depth:i.depth,stencil:i.stencil,framebufferScaleFactor:r},o=new XRWebGLLayer(n,e,a);n.updateRenderState({baseLayer:o}),n.requestReferenceSpace(s).then(g),n.addEventListener("inputsourceschange",y)}};var x=new ot,w=new ot;function b(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}this.getCamera=function(t){d.near=u.near=h.near=t.near,d.far=u.far=h.far=t.far,p===d.near&&m===d.far||(n.updateRenderState({depthNear:d.near,depthFar:d.far}),p=d.near,m=d.far);var e=t.parent,i=d.cameras;b(d,e);for(var r=0;r<i.length;r++)b(i[r],e);t.matrixWorld.copy(d.matrixWorld);for(var a=t.children,s=(r=0,a.length);r<s;r++)a[r].updateMatrixWorld(!0);return function(t,e,i){x.setFromMatrixPosition(e.matrixWorld),w.setFromMatrixPosition(i.matrixWorld);var n=x.distanceTo(w),r=e.projectionMatrix.elements,a=i.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,m=n/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var v=s+m,g=o+m,y=d-f,b=p+(n-f),_=l*o/g*v,M=c*o/g*v;t.projectionMatrix.makePerspective(y,b,_,M,v,g)}(d,h,u),d};var _=null;var M=new Bi;M.setAnimationLoop((function(e,i){if(null!==(o=i.getViewerPose(a))){var r=o.views,s=n.renderState.baseLayer;t.setFramebuffer(s.framebuffer);for(var c=0;c<r.length;c++){var h=r[c],u=s.getViewport(h),p=d.cameras[c];p.matrix.fromArray(h.transform.matrix),p.projectionMatrix.fromArray(h.projectionMatrix),p.viewport.set(u.x,u.y,u.width,u.height),0===c&&d.matrix.copy(p.matrix)}}var m=n.inputSources;for(c=0;c<l.length;c++){var f=l[c],v=m[c],g=null,y=null;v&&(f.targetRay&&null!==(g=i.getPose(v.targetRaySpace,a))&&(f.targetRay.matrix.fromArray(g.transform.matrix),f.targetRay.matrix.decompose(f.targetRay.position,f.targetRay.rotation,f.targetRay.scale)),f.grip&&v.gripSpace&&null!==(y=i.getPose(v.gripSpace,a))&&(f.grip.matrix.fromArray(y.transform.matrix),f.grip.matrix.decompose(f.grip.position,f.grip.rotation,f.grip.scale))),f.targetRay&&(f.targetRay.visible=null!==g),f.grip&&(f.grip.visible=null!==y)}_&&_(e,i)})),this.setAnimationLoop=function(t){_=t},this.dispose=function(){}}function Fr(t){var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),i=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,o=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,c=void 0!==t.powerPreference?t.powerPreference:"default",h=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat,u=null,d=null;this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=3e3,this.physicallyCorrectLights=!1,this.toneMapping=1,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var p,m,f,v,g,y,x,w,b,_,M,S,E,T,A,L,C,P,R=this,I=!1,O=null,D=0,N=0,z=null,H=null,B=-1,U={geometry:null,program:null,wireframe:!1},F=null,G=null,k=new et,V=new et,j=null,W=e.width,q=e.height,X=1,Y=null,Q=null,K=new et(0,0,W,q),$=new et(0,0,W,q),tt=!1,it=new zi,nt=new Xi,rt=!1,at=!1,st=new ft,lt=new ot;function ct(){return null===z?X:1}try{var ht={alpha:n,depth:r,stencil:a,antialias:s,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h,xrCompatible:!0};if(e.addEventListener("webglcontextlost",mt,!1),e.addEventListener("webglcontextrestored",vt,!1),null===(p=i||e.getContext("webgl",ht)||e.getContext("experimental-webgl",ht)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===p.getShaderPrecisionFormat&&(p.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function ut(){m=new Yi(p),!1===(f=new qi(p,m,t)).isWebGL2&&(m.get("WEBGL_depth_texture"),m.get("OES_texture_float"),m.get("OES_texture_half_float"),m.get("OES_texture_half_float_linear"),m.get("OES_standard_derivatives"),m.get("OES_element_index_uint"),m.get("ANGLE_instanced_arrays")),m.get("OES_texture_float_linear"),P=new zr(p,m,f),(v=new Dr(p,m,f)).scissor(V.copy($).multiplyScalar(X).floor()),v.viewport(k.copy(K).multiplyScalar(X).floor()),g=new Qi(p),y=new wr,x=new Nr(p,m,v,y,f,P,g),w=new Ui(p,f),b=new Zi(p,w,g),_=new tn(p,b,w,g),A=new $i(p),M=new xr(R,m,f),S=new Sr,E=new Pr,T=new ji(R,v,_,o),L=new Wi(p,m,g,f),C=new Ji(p,m,g,f),g.programs=M.programs,R.capabilities=f,R.extensions=m,R.properties=y,R.renderLists=S,R.state=v,R.info=g}ut();var dt=new Ur(R,p);this.xr=dt;var pt=new Or(R,_,f.maxTextureSize);function mt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),I=!0}function vt(){console.log("THREE.WebGLRenderer: Context Restored."),I=!1,ut()}function gt(t){var e=t.target;e.removeEventListener("dispose",gt),function(t){yt(t),y.remove(t)}(e)}function yt(t){var e=y.get(t).program;t.program=void 0,void 0!==e&&M.releaseProgram(e)}this.shadowMap=pt,this.getContext=function(){return p},this.getContextAttributes=function(){return p.getContextAttributes()},this.forceContextLoss=function(){var t=m.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=m.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(t){void 0!==t&&(X=t,this.setSize(W,q,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new J),t.set(W,q)},this.setSize=function(t,i,n){dt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=t,q=i,e.width=Math.floor(t*X),e.height=Math.floor(i*X),!1!==n&&(e.style.width=t+"px",e.style.height=i+"px"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new J),t.set(W*X,q*X).floor()},this.setDrawingBufferSize=function(t,i,n){W=t,q=i,X=n,e.width=Math.floor(t*n),e.height=Math.floor(i*n),this.setViewport(0,0,t,i)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new et),t.copy(k)},this.getViewport=function(t){return t.copy(K)},this.setViewport=function(t,e,i,n){t.isVector4?K.set(t.x,t.y,t.z,t.w):K.set(t,e,i,n),v.viewport(k.copy(K).multiplyScalar(X).floor())},this.getScissor=function(t){return t.copy($)},this.setScissor=function(t,e,i,n){t.isVector4?$.set(t.x,t.y,t.z,t.w):$.set(t,e,i,n),v.scissor(V.copy($).multiplyScalar(X).floor())},this.getScissorTest=function(){return tt},this.setScissorTest=function(t){v.setScissorTest(tt=t)},this.setOpaqueSort=function(t){Y=t},this.setTransparentSort=function(t){Q=t},this.getClearColor=function(){return T.getClearColor()},this.setClearColor=function(){T.setClearColor.apply(T,arguments)},this.getClearAlpha=function(){return T.getClearAlpha()},this.setClearAlpha=function(){T.setClearAlpha.apply(T,arguments)},this.clear=function(t,e,i){var n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===i||i)&&(n|=1024),p.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",mt,!1),e.removeEventListener("webglcontextrestored",vt,!1),S.dispose(),E.dispose(),y.dispose(),_.dispose(),dt.dispose(),bt.stop(),this.forceContextLoss()},this.renderBufferImmediate=function(t,e){v.initAttributes();var i=y.get(t);t.hasPositions&&!i.position&&(i.position=p.createBuffer()),t.hasNormals&&!i.normal&&(i.normal=p.createBuffer()),t.hasUvs&&!i.uv&&(i.uv=p.createBuffer()),t.hasColors&&!i.color&&(i.color=p.createBuffer());var n=e.getAttributes();t.hasPositions&&(p.bindBuffer(34962,i.position),p.bufferData(34962,t.positionArray,35048),v.enableAttribute(n.position),p.vertexAttribPointer(n.position,3,5126,!1,0,0)),t.hasNormals&&(p.bindBuffer(34962,i.normal),p.bufferData(34962,t.normalArray,35048),v.enableAttribute(n.normal),p.vertexAttribPointer(n.normal,3,5126,!1,0,0)),t.hasUvs&&(p.bindBuffer(34962,i.uv),p.bufferData(34962,t.uvArray,35048),v.enableAttribute(n.uv),p.vertexAttribPointer(n.uv,2,5126,!1,0,0)),t.hasColors&&(p.bindBuffer(34962,i.color),p.bufferData(34962,t.colorArray,35048),v.enableAttribute(n.color),p.vertexAttribPointer(n.color,3,5126,!1,0,0)),v.disableUnusedAttributes(),p.drawArrays(4,0,t.count),t.count=0};var xt=new Dt;this.renderBufferDirect=function(t,e,i,n,r,a){null===e&&(e=xt);var s=r.isMesh&&r.matrixWorld.determinant()<0,o=Tt(t,e,n,r);v.setMaterial(n,s);var l=!1;U.geometry===i.id&&U.program===o.id&&U.wireframe===(!0===n.wireframe)||(U.geometry=i.id,U.program=o.id,U.wireframe=!0===n.wireframe,l=!0),(n.morphTargets||n.morphNormals)&&(A.update(r,i,n,o),l=!0);var c=i.index,h=i.attributes.position;if(null===c){if(void 0===h||0===h.count)return}else if(0===c.count)return;var u,d=1;!0===n.wireframe&&(c=b.getWireframeAttribute(i),d=2);var g=L;null!==c&&(u=w.get(c),(g=C).setIndex(u)),l&&(!function(t,e,i,n){if(!1===f.isWebGL2&&(t.isInstancedMesh||e.isInstancedBufferGeometry)&&null===m.get("ANGLE_instanced_arrays"))return;v.initAttributes();var r=e.attributes,a=n.getAttributes(),s=i.defaultAttributeValues;for(var o in a){var l=a[o];if(l>=0){var c=r[o];if(void 0!==c){var h=c.normalized,u=c.itemSize;if(void 0===(M=w.get(c)))continue;var d=M.buffer,g=M.type,y=M.bytesPerElement;if(c.isInterleavedBufferAttribute){var x=c.data,b=x.stride,_=c.offset;x&&x.isInstancedInterleavedBuffer?(v.enableAttributeAndDivisor(l,x.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=x.meshPerAttribute*x.count)):v.enableAttribute(l),p.bindBuffer(34962,d),p.vertexAttribPointer(l,u,g,h,b*y,_*y)}else c.isInstancedBufferAttribute?(v.enableAttributeAndDivisor(l,c.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=c.meshPerAttribute*c.count)):v.enableAttribute(l),p.bindBuffer(34962,d),p.vertexAttribPointer(l,u,g,h,0,0)}else if("instanceMatrix"===o){var M;if(void 0===(M=w.get(t.instanceMatrix)))continue;d=M.buffer,g=M.type;v.enableAttributeAndDivisor(l+0,1),v.enableAttributeAndDivisor(l+1,1),v.enableAttributeAndDivisor(l+2,1),v.enableAttributeAndDivisor(l+3,1),p.bindBuffer(34962,d),p.vertexAttribPointer(l+0,4,g,!1,64,0),p.vertexAttribPointer(l+1,4,g,!1,64,16),p.vertexAttribPointer(l+2,4,g,!1,64,32),p.vertexAttribPointer(l+3,4,g,!1,64,48)}else if(void 0!==s){var S=s[o];if(void 0!==S)switch(S.length){case 2:p.vertexAttrib2fv(l,S);break;case 3:p.vertexAttrib3fv(l,S);break;case 4:p.vertexAttrib4fv(l,S);break;default:p.vertexAttrib1fv(l,S)}}}}v.disableUnusedAttributes()}(r,i,n,o),null!==c&&p.bindBuffer(34963,u.buffer));var y=null!==c?c.count:h.count,x=i.drawRange.start*d,_=i.drawRange.count*d,M=null!==a?a.start*d:0,S=null!==a?a.count*d:1/0,E=Math.max(x,M),T=Math.min(y,x+_,M+S)-1,P=Math.max(0,T-E+1);if(0!==P){if(r.isMesh)!0===n.wireframe?(v.setLineWidth(n.wireframeLinewidth*ct()),g.setMode(1)):g.setMode(4);else if(r.isLine){var R=n.linewidth;void 0===R&&(R=1),v.setLineWidth(R*ct()),r.isLineSegments?g.setMode(1):r.isLineLoop?g.setMode(2):g.setMode(3)}else r.isPoints?g.setMode(0):r.isSprite&&g.setMode(4);r.isInstancedMesh?g.renderInstances(i,E,P,r.count):i.isInstancedBufferGeometry?g.renderInstances(i,E,P,i.maxInstancedCount):g.render(E,P)}},this.compile=function(t,e){(d=E.get(t,e)).init(),t.traverse((function(t){t.isLight&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(e);var i={};t.traverse((function(e){if(e.material)if(Array.isArray(e.material))for(var n=0;n<e.material.length;n++)e.material[n].uuid in i==!1&&(Et(e.material[n],t,e),i[e.material[n].uuid]=!0);else e.material.uuid in i==!1&&(Et(e.material,t,e),i[e.material.uuid]=!0)}))};var wt=null;var bt=new Bi;function _t(t,e,i,n){if(!1!==t.visible){if(t.layers.test(e.layers))if(t.isGroup)i=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||it.intersectsSprite(t)){n&&lt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(st);var r=_.update(t);(a=t.material).visible&&u.push(t,r,a,i,lt.z,null)}}else if(t.isImmediateRenderObject)n&&lt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(st),u.push(t,null,t.material,i,lt.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==g.render.frame&&(t.skeleton.update(),t.skeleton.frame=g.render.frame),!t.frustumCulled||it.intersectsObject(t))){n&&lt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(st);r=_.update(t);var a=t.material;if(Array.isArray(a))for(var s=r.groups,o=0,l=s.length;o<l;o++){var c=s[o],h=a[c.materialIndex];h&&h.visible&&u.push(t,r,h,i,lt.z,c)}else a.visible&&u.push(t,r,a,i,lt.z,null)}var p=t.children;for(o=0,l=p.length;o<l;o++)_t(p[o],e,i,n)}}function Mt(t,e,i,n){for(var r=0,a=t.length;r<a;r++){var s=t[r],o=s.object,l=s.geometry,c=void 0===n?s.material:n,h=s.group;if(i.isArrayCamera){G=i;for(var u=i.cameras,p=0,m=u.length;p<m;p++){var f=u[p];o.layers.test(f.layers)&&(v.viewport(k.copy(f.viewport)),d.setupLights(f),St(o,e,f,l,c,h))}}else G=null,St(o,e,i,l,c,h)}}function St(t,e,i,n,r,a){if(t.onBeforeRender(R,e,i,n,r,a),d=E.get(e,G||i),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){var s=Tt(i,e,r,t);v.setMaterial(r),U.geometry=null,U.program=null,U.wireframe=!1,function(t,e){t.render((function(t){R.renderBufferImmediate(t,e)}))}(t,s)}else R.renderBufferDirect(i,e,n,r,t,a);t.onAfterRender(R,e,i,n,r,a),d=E.get(e,G||i)}function Et(t,e,i){var n=y.get(t),r=d.state.lights,a=d.state.shadowsArray,s=r.state.version,o=M.getParameters(t,r.state,a,e,nt.numPlanes,nt.numIntersection,i),l=M.getProgramCacheKey(o),c=n.program,h=!0;if(void 0===c)t.addEventListener("dispose",gt);else if(c.cacheKey!==l)yt(t);else if(n.lightsStateVersion!==s)n.lightsStateVersion=s,h=!1;else{if(void 0!==o.shaderID)return;h=!1}h&&(c=M.acquireProgram(o,l),n.program=c,n.uniforms=o.uniforms,n.environment=t.isMeshStandardMaterial?e.environment:null,n.outputEncoding=R.outputEncoding,t.program=c);var u=c.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var p=0;p<R.maxMorphTargets;p++)u["morphTarget"+p]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(p=0;p<R.maxMorphNormals;p++)u["morphNormal"+p]>=0&&t.numSupportedMorphNormals++}var m=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(n.numClippingPlanes=nt.numPlanes,n.numIntersection=nt.numIntersection,m.clippingPlanes=nt.uniform),n.fog=e.fog,n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=s,n.needsLights&&(m.ambientLightColor.value=r.state.ambient,m.lightProbe.value=r.state.probe,m.directionalLights.value=r.state.directional,m.directionalLightShadows.value=r.state.directionalShadow,m.spotLights.value=r.state.spot,m.spotLightShadows.value=r.state.spotShadow,m.rectAreaLights.value=r.state.rectArea,m.pointLights.value=r.state.point,m.pointLightShadows.value=r.state.pointShadow,m.hemisphereLights.value=r.state.hemi,m.directionalShadowMap.value=r.state.directionalShadowMap,m.directionalShadowMatrix.value=r.state.directionalShadowMatrix,m.spotShadowMap.value=r.state.spotShadowMap,m.spotShadowMatrix.value=r.state.spotShadowMatrix,m.pointShadowMap.value=r.state.pointShadowMap,m.pointShadowMatrix.value=r.state.pointShadowMatrix);var f=n.program.getUniforms(),v=$n.seqWithValue(f.seq,m);n.uniformsList=v}function Tt(t,e,i,n){x.resetTextureUnits();var r=e.fog,a=i.isMeshStandardMaterial?e.environment:null,s=y.get(i),o=d.state.lights;if(rt&&(at||t!==F)){var l=t===F&&i.id===B;nt.setState(i.clippingPlanes,i.clipIntersection,i.clipShadows,t,s,l)}i.version===s.__version?void 0===s.program||i.fog&&s.fog!==r||s.environment!==a||s.needsLights&&s.lightsStateVersion!==o.state.version?Et(i,e,n):void 0===s.numClippingPlanes||s.numClippingPlanes===nt.numPlanes&&s.numIntersection===nt.numIntersection?s.outputEncoding!==R.outputEncoding&&Et(i,e,n):Et(i,e,n):(Et(i,e,n),s.__version=i.version);var c=!1,h=!1,u=!1,m=s.program,g=m.getUniforms(),w=s.uniforms;if(v.useProgram(m.program)&&(c=!0,h=!0,u=!0),i.id!==B&&(B=i.id,h=!0),c||F!==t){if(g.setValue(p,"projectionMatrix",t.projectionMatrix),f.logarithmicDepthBuffer&&g.setValue(p,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),F!==t&&(F=t,h=!0,u=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){var b=g.map.cameraPosition;void 0!==b&&b.setValue(p,lt.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&g.setValue(p,"isOrthographic",!0===t.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.skinning)&&g.setValue(p,"viewMatrix",t.matrixWorldInverse)}if(i.skinning){g.setOptional(p,n,"bindMatrix"),g.setOptional(p,n,"bindMatrixInverse");var _=n.skeleton;if(_){var M=_.bones;if(f.floatVertexTextures){if(void 0===_.boneTexture){var S=Math.sqrt(4*M.length);S=Z.ceilPowerOfTwo(S),S=Math.max(S,4);var E=new Float32Array(S*S*4);E.set(_.boneMatrices);var T=new Oi(E,S,S,1023,1015);_.boneMatrices=E,_.boneTexture=T,_.boneTextureSize=S}g.setValue(p,"boneTexture",_.boneTexture,x),g.setValue(p,"boneTextureSize",_.boneTextureSize)}else g.setOptional(p,_,"boneMatrices")}}return(h||s.receiveShadow!==n.receiveShadow)&&(s.receiveShadow=n.receiveShadow,g.setValue(p,"receiveShadow",n.receiveShadow)),h&&(g.setValue(p,"toneMappingExposure",R.toneMappingExposure),g.setValue(p,"toneMappingWhitePoint",R.toneMappingWhitePoint),s.needsLights&&function(t,e){t.ambientLightColor.needsUpdate=e,t.lightProbe.needsUpdate=e,t.directionalLights.needsUpdate=e,t.directionalLightShadows.needsUpdate=e,t.pointLights.needsUpdate=e,t.pointLightShadows.needsUpdate=e,t.spotLights.needsUpdate=e,t.spotLightShadows.needsUpdate=e,t.rectAreaLights.needsUpdate=e,t.hemisphereLights.needsUpdate=e}(w,u),r&&i.fog&&function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(w,r),i.isMeshBasicMaterial?At(w,i):i.isMeshLambertMaterial?(At(w,i),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(w,i)):i.isMeshToonMaterial?(At(w,i),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.gradientMap&&(t.gradientMap.value=e.gradientMap);e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshPhongMaterial?(At(w,i),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshStandardMaterial?(At(w,i,a),i.isMeshPhysicalMaterial?function(t,e,i){Lt(t,e,i),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap);e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate());t.transparency.value=e.transparency}(w,i,a):Lt(w,i,a)):i.isMeshMatcapMaterial?(At(w,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDepthMaterial?(At(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isMeshDistanceMaterial?(At(w,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(w,i)):i.isMeshNormalMaterial?(At(w,i),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,i)):i.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(w,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(w,i)):i.isPointsMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*X,t.scale.value=.5*q,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var i;e.map?i=e.map:e.alphaMap&&(i=e.alphaMap);void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(w,i):i.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var i;e.map?i=e.map:e.alphaMap&&(i=e.alphaMap);void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(w,i):i.isShadowMaterial&&(w.color.value.copy(i.color),w.opacity.value=i.opacity),void 0!==w.ltc_1&&(w.ltc_1.value=Hi.LTC_1),void 0!==w.ltc_2&&(w.ltc_2.value=Hi.LTC_2),$n.upload(p,s.uniformsList,w,x),i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&($n.upload(p,s.uniformsList,w,x),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&g.setValue(p,"center",n.center),g.setValue(p,"modelViewMatrix",n.modelViewMatrix),g.setValue(p,"normalMatrix",n.normalMatrix),g.setValue(p,"modelMatrix",n.matrixWorld),m}function At(t,e,i){t.opacity.value=e.opacity,e.color&&t.diffuse.value.copy(e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap);var n,r,a=e.envMap||i;a&&(t.envMap.value=a,t.flipEnvMap.value=a.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=y.get(a).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix)),e.aoMap?r=e.aoMap:e.lightMap&&(r=e.lightMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uv2Transform.value.copy(r.matrix))}function Lt(t,e,i){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),(e.envMap||i)&&(t.envMapIntensity.value=e.envMapIntensity)}bt.setAnimationLoop((function(t){dt.isPresenting||wt&&wt(t)})),"undefined"!=typeof window&&bt.setContext(window),this.setAnimationLoop=function(t){wt=t,dt.setAnimationLoop(t),bt.start()},this.render=function(t,e){var i,n;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),i=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),n=arguments[3]),e&&e.isCamera){if(!I){U.geometry=null,U.program=null,U.wireframe=!1,B=-1,F=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),dt.enabled&&dt.isPresenting&&(e=dt.getCamera(e)),(d=E.get(t,e)).init(),t.onBeforeRender(R,t,e,i||z),st.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),it.setFromProjectionMatrix(st),at=this.localClippingEnabled,rt=nt.init(this.clippingPlanes,at,e),(u=S.get(t,e)).init(),_t(t,e,0,R.sortObjects),u.finish(),!0===R.sortObjects&&u.sort(Y,Q),rt&&nt.beginShadows();var r=d.state.shadowsArray;pt.render(r,t,e),d.setupLights(e),rt&&nt.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==i&&this.setRenderTarget(i),T.render(u,t,e,n);var a=u.opaque,s=u.transparent;if(t.overrideMaterial){var o=t.overrideMaterial;a.length&&Mt(a,t,e,o),s.length&&Mt(s,t,e,o)}else a.length&&Mt(a,t,e),s.length&&Mt(s,t,e);t.onAfterRender(R,t,e),null!==z&&(x.updateRenderTargetMipmap(z),x.updateMultisampleRenderTarget(z)),v.buffers.depth.setTest(!0),v.buffers.depth.setMask(!0),v.buffers.color.setMask(!0),v.setPolygonOffset(!1),u=null,d=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(t){O!==t&&null===z&&p.bindFramebuffer(36160,t),O=t},this.getActiveCubeFace=function(){return D},this.getActiveMipmapLevel=function(){return N},this.getRenderTarget=function(){return z},this.setRenderTarget=function(t,e,i){z=t,D=e,N=i,t&&void 0===y.get(t).__webglFramebuffer&&x.setupRenderTarget(t);var n=O,r=!1;if(t){var a=y.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(n=a[e||0],r=!0):n=t.isWebGLMultisampleRenderTarget?y.get(t).__webglMultisampledFramebuffer:a,k.copy(t.viewport),V.copy(t.scissor),j=t.scissorTest}else k.copy(K).multiplyScalar(X).floor(),V.copy($).multiplyScalar(X).floor(),j=tt;if(H!==n&&(p.bindFramebuffer(36160,n),H=n),v.viewport(k),v.scissor(V),v.setScissorTest(j),r){var s=y.get(t.texture);p.framebufferTexture2D(36160,36064,34069+(e||0),s.__webglTexture,i||0)}},this.readRenderTargetPixels=function(t,e,i,n,r,a,s){if(t&&t.isWebGLRenderTarget){var o=y.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){var l=!1;o!==H&&(p.bindFramebuffer(36160,o),l=!0);try{var c=t.texture,h=c.format,u=c.type;if(1023!==h&&P.convert(h)!==p.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(1009===u||P.convert(u)===p.getParameter(35738)||1015===u&&(f.isWebGL2||m.get("OES_texture_float")||m.get("WEBGL_color_buffer_float"))||1016===u&&(f.isWebGL2?m.get("EXT_color_buffer_float"):m.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===p.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&i>=0&&i<=t.height-r&&p.readPixels(e,i,n,r,P.convert(h),P.convert(u),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{l&&p.bindFramebuffer(36160,H)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,i){void 0===i&&(i=0);var n=Math.pow(2,-i),r=Math.floor(e.image.width*n),a=Math.floor(e.image.height*n),s=P.convert(e.format);x.setTexture2D(e,0),p.copyTexImage2D(3553,i,s,t.x,t.y,r,a,0),v.unbindTexture()},this.copyTextureToTexture=function(t,e,i,n){var r=e.image.width,a=e.image.height,s=P.convert(i.format),o=P.convert(i.type);x.setTexture2D(i,0),e.isDataTexture?p.texSubImage2D(3553,n||0,t.x,t.y,r,a,s,o,e.image.data):p.texSubImage2D(3553,n||0,t.x,t.y,s,o,e.image),v.unbindTexture()},this.initTexture=function(t){x.setTexture2D(t,0),v.unbindTexture()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function Gr(t,e){this.name="",this.color=new Se(t),this.density=void 0!==e?e:25e-5}function kr(t,e,i){this.name="",this.color=new Se(t),this.near=void 0!==e?e:1,this.far=void 0!==i?i:1e3}function Vr(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}Hr.prototype=Object.assign(Object.create(Pi.prototype),{constructor:Hr,isArrayCamera:!0}),Br.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Br,isGroup:!0}),Object.assign(Ur.prototype,W.prototype),Object.assign(Gr.prototype,{isFogExp2:!0,clone:function(){return new Gr(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(kr.prototype,{isFog:!0,clone:function(){return new kr(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(Vr.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Vr.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this},copyAt:function(t,e,i){t*=this.stride,i*=e.stride;for(var n=0,r=this.stride;n<r;n++)this.array[t+n]=e.array[i+n];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}});var jr,Wr=new ot;function qr(t,e,i,n){this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}function Xr(t){Pe.call(this),this.type="SpriteMaterial",this.color=new Se(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}Object.defineProperties(qr.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(qr.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(t){for(var e=0,i=this.data.count;e<i;e++)Wr.x=this.getX(e),Wr.y=this.getY(e),Wr.z=this.getZ(e),Wr.applyMatrix4(t),this.setXYZ(e,Wr.x,Wr.y,Wr.z);return this},setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this},setXYZW:function(t,e,i,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=r,this}}),Xr.prototype=Object.create(Pe.prototype),Xr.prototype.constructor=Xr,Xr.prototype.isSpriteMaterial=!0,Xr.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this};var Yr=new ot,Zr=new ot,Jr=new ot,Qr=new J,Kr=new J,$r=new ft,ta=new ot,ea=new ot,ia=new ot,na=new J,ra=new J,aa=new J;function sa(t){if(Ot.call(this),this.type="Sprite",void 0===jr){jr=new Ke;var e=new Vr(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);jr.setIndex([0,1,2,0,2,3]),jr.setAttribute("position",new qr(e,3,0,!1)),jr.setAttribute("uv",new qr(e,2,3,!1))}this.geometry=jr,this.material=void 0!==t?t:new Xr,this.center=new J(.5,.5)}function oa(t,e,i,n,r,a){Qr.subVectors(t,i).addScalar(.5).multiply(n),void 0!==r?(Kr.x=a*Qr.x-r*Qr.y,Kr.y=r*Qr.x+a*Qr.y):Kr.copy(Qr),t.copy(e),t.x+=Kr.x,t.y+=Kr.y,t.applyMatrix4($r)}sa.prototype=Object.assign(Object.create(Ot.prototype),{constructor:sa,isSprite:!0,raycast:function(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Zr.setFromMatrixScale(this.matrixWorld),$r.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Jr.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Zr.multiplyScalar(-Jr.z);var i,n,r=this.material.rotation;0!==r&&(n=Math.cos(r),i=Math.sin(r));var a=this.center;oa(ta.set(-.5,-.5,0),Jr,a,Zr,i,n),oa(ea.set(.5,-.5,0),Jr,a,Zr,i,n),oa(ia.set(.5,.5,0),Jr,a,Zr,i,n),na.set(0,0),ra.set(1,0),aa.set(1,1);var s=t.ray.intersectTriangle(ta,ea,ia,!1,Yr);if(null!==s||(oa(ea.set(-.5,.5,0),Jr,a,Zr,i,n),ra.set(0,1),null!==(s=t.ray.intersectTriangle(ta,ia,ea,!1,Yr)))){var o=t.ray.origin.distanceTo(Yr);o<t.near||o>t.far||e.push({distance:o,point:Yr.clone(),uv:we.getUV(Yr,ta,ea,ia,na,ra,aa,new J),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Ot.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}});var la=new ot,ca=new ot;function ha(){Ot.call(this),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function ua(t,e){t&&t.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),vi.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new ft,this.bindMatrixInverse=new ft}ha.prototype=Object.assign(Object.create(Ot.prototype),{constructor:ha,isLOD:!0,copy:function(t){Ot.prototype.copy.call(this,t,!1);for(var e=t.levels,i=0,n=e.length;i<n;i++){var r=e[i];this.addLevel(r.object.clone(),r.distance)}return this.autoUpdate=t.autoUpdate,this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var i=this.levels,n=0;n<i.length&&!(e<i[n].distance);n++);return i.splice(n,0,{distance:e,object:t}),this.add(t),this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(t){var e=this.levels;if(e.length>0){for(var i=1,n=e.length;i<n&&!(t<e[i].distance);i++);return e[i-1].object}return null},raycast:function(t,e){if(this.levels.length>0){la.setFromMatrixPosition(this.matrixWorld);var i=t.ray.origin.distanceTo(la);this.getObjectForDistance(i).raycast(t,e)}},update:function(t){var e=this.levels;if(e.length>1){la.setFromMatrixPosition(t.matrixWorld),ca.setFromMatrixPosition(this.matrixWorld);var i=la.distanceTo(ca)/t.zoom;e[0].object.visible=!0;for(var n=1,r=e.length;n<r&&i>=e[n].distance;n++)e[n-1].object.visible=!1,e[n].object.visible=!0;for(this._currentLevel=n-1;n<r;n++)e[n].object.visible=!1}},toJSON:function(t){var e=Ot.prototype.toJSON.call(this,t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];for(var i=this.levels,n=0,r=i.length;n<r;n++){var a=i[n];e.object.levels.push({object:a.object.uuid,distance:a.distance})}return e}}),ua.prototype=Object.assign(Object.create(vi.prototype),{constructor:ua,isSkinnedMesh:!0,bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var t=new et,e=this.geometry.attributes.skinWeight,i=0,n=e.count;i<n;i++){t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.w=e.getW(i);var r=1/t.manhattanLength();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){vi.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var da=new ft,pa=new ft;function ma(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var i=0,n=this.bones.length;i<n;i++)this.boneInverses.push(new ft)}}function fa(){Ot.call(this),this.type="Bone"}Object.assign(ma.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var i=new ft;this.bones[t]&&i.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(i)}},pose:function(){var t,e,i;for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,i=this.bones.length;e<i;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:function(){for(var t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture,r=0,a=t.length;r<a;r++){var s=t[r]?t[r].matrixWorld:pa;da.multiplyMatrices(s,e[r]),da.toArray(i,16*r)}void 0!==n&&(n.needsUpdate=!0)},clone:function(){return new ma(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,i=this.bones.length;e<i;e++){var n=this.bones[e];if(n.name===t)return n}},dispose:function(){this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=void 0)}}),fa.prototype=Object.assign(Object.create(Ot.prototype),{constructor:fa,isBone:!0});var va=new ft,ga=new ft,ya=[],xa=new vi;function wa(t,e,i){vi.call(this,t,e),this.instanceMatrix=new Oe(new Float32Array(16*i),16),this.count=i,this.frustumCulled=!1}function ba(t){Pe.call(this),this.type="LineBasicMaterial",this.color=new Se(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}wa.prototype=Object.assign(Object.create(vi.prototype),{constructor:wa,isInstancedMesh:!0,getMatrixAt:function(t,e){e.fromArray(this.instanceMatrix.array,16*t)},raycast:function(t,e){var i=this.matrixWorld,n=this.count;if(xa.geometry=this.geometry,xa.material=this.material,void 0!==xa.material)for(var r=0;r<n;r++)this.getMatrixAt(r,va),ga.multiplyMatrices(i,va),xa.matrixWorld=ga,xa.raycast(t,ya),ya.length>0&&(ya[0].instanceId=r,ya[0].object=this,e.push(ya[0]),ya.length=0)},setMatrixAt:function(t,e){e.toArray(this.instanceMatrix.array,16*t)},updateMorphTargets:function(){}}),ba.prototype=Object.create(Pe.prototype),ba.prototype.constructor=ba,ba.prototype.isLineBasicMaterial=!0,ba.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this};var _a=new ot,Ma=new ot,Sa=new ft,Ea=new ae,Ta=new Qt;function Aa(t,e,i){1===i&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Ot.call(this),this.type="Line",this.geometry=void 0!==t?t:new Ke,this.material=void 0!==e?e:new ba}Aa.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Aa,isLine:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,i=[0],n=1,r=e.count;n<r;n++)_a.fromBufferAttribute(e,n-1),Ma.fromBufferAttribute(e,n),i[n]=i[n-1],i[n]+=_a.distanceTo(Ma);t.setAttribute("lineDistance",new Ge(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;(i=t.lineDistances)[0]=0;for(n=1,r=a.length;n<r;n++)i[n]=i[n-1],i[n]+=a[n-1].distanceTo(a[n])}return this},raycast:function(t,e){var i=this.geometry,n=this.matrixWorld,r=t.params.Line.threshold;if(null===i.boundingSphere&&i.computeBoundingSphere(),Ta.copy(i.boundingSphere),Ta.applyMatrix4(n),Ta.radius+=r,!1!==t.ray.intersectsSphere(Ta)){Sa.getInverse(n),Ea.copy(t.ray).applyMatrix4(Sa);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),s=a*a,o=new ot,l=new ot,c=new ot,h=new ot,u=this&&this.isLineSegments?2:1;if(i.isBufferGeometry){var d=i.index,p=i.attributes.position.array;if(null!==d)for(var m=d.array,f=0,v=m.length-1;f<v;f+=u){var g=m[f],y=m[f+1];if(o.fromArray(p,3*g),l.fromArray(p,3*y),!(Ea.distanceSqToSegment(o,l,h,c)>s))h.applyMatrix4(this.matrixWorld),(b=t.ray.origin.distanceTo(h))<t.near||b>t.far||e.push({distance:b,point:c.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}else for(f=0,v=p.length/3-1;f<v;f+=u){if(o.fromArray(p,3*f),l.fromArray(p,3*f+3),!(Ea.distanceSqToSegment(o,l,h,c)>s))h.applyMatrix4(this.matrixWorld),(b=t.ray.origin.distanceTo(h))<t.near||b>t.far||e.push({distance:b,point:c.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}}else if(i.isGeometry){var x=i.vertices,w=x.length;for(f=0;f<w-1;f+=u){var b;if(!(Ea.distanceSqToSegment(x[f],x[f+1],h,c)>s))h.applyMatrix4(this.matrixWorld),(b=t.ray.origin.distanceTo(h))<t.near||b>t.far||e.push({distance:b,point:c.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var La=new ot,Ca=new ot;function Pa(t,e){Aa.call(this,t,e),this.type="LineSegments"}function Ra(t,e){Aa.call(this,t,e),this.type="LineLoop"}function Ia(t){Pe.call(this),this.type="PointsMaterial",this.color=new Se(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}Pa.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Pa,isLineSegments:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,i=[],n=0,r=e.count;n<r;n+=2)La.fromBufferAttribute(e,n),Ca.fromBufferAttribute(e,n+1),i[n]=0===n?0:i[n-1],i[n+1]=i[n]+La.distanceTo(Ca);t.setAttribute("lineDistance",new Ge(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;for(i=t.lineDistances,n=0,r=a.length;n<r;n+=2)La.copy(a[n]),Ca.copy(a[n+1]),i[n]=0===n?0:i[n-1],i[n+1]=i[n]+La.distanceTo(Ca)}return this}}),Ra.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Ra,isLineLoop:!0}),Ia.prototype=Object.create(Pe.prototype),Ia.prototype.constructor=Ia,Ia.prototype.isPointsMaterial=!0,Ia.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this};var Oa=new ft,Da=new ae,Na=new Qt,za=new ot;function Ha(t,e){Ot.call(this),this.type="Points",this.geometry=void 0!==t?t:new Ke,this.material=void 0!==e?e:new Ia,this.updateMorphTargets()}function Ba(t,e,i,n,r,a,s){var o=Da.distanceSqToPoint(t);if(o<i){var l=new ot;Da.closestPointToPoint(t,l),l.applyMatrix4(n);var c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;a.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,object:s})}}function Ua(t,e,i,n,r,a,s,o,l){tt.call(this,t,e,i,n,r,a,s,o,l),this.format=void 0!==s?s:1022,this.minFilter=void 0!==a?a:1006,this.magFilter=void 0!==r?r:1006,this.generateMipmaps=!1}function Fa(t,e,i,n,r,a,s,o,l,c,h,u){tt.call(this,null,a,s,o,l,c,n,r,h,u),this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Ga(t,e,i,n,r,a,s,o,l){tt.call(this,t,e,i,n,r,a,s,o,l),this.needsUpdate=!0}function ka(t,e,i,n,r,a,s,o,l,c){if(1026!==(c=void 0!==c?c:1026)&&1027!==c)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&1026===c&&(i=1012),void 0===i&&1027===c&&(i=1020),tt.call(this,null,n,r,a,s,o,c,i,l),this.image={width:t,height:e},this.magFilter=void 0!==s?s:1003,this.minFilter=void 0!==o?o:1003,this.flipY=!1,this.generateMipmaps=!1}function Va(t){Ke.call(this),this.type="WireframeGeometry";var e,i,n,r,a,s,o,l,c,h,u=[],d=[0,0],p={},m=["a","b","c"];if(t&&t.isGeometry){var f=t.faces;for(e=0,n=f.length;e<n;e++){var v=f[e];for(i=0;i<3;i++)o=v[m[i]],l=v[m[(i+1)%3]],d[0]=Math.min(o,l),d[1]=Math.max(o,l),void 0===p[c=d[0]+","+d[1]]&&(p[c]={index1:d[0],index2:d[1]})}for(c in p)s=p[c],h=t.vertices[s.index1],u.push(h.x,h.y,h.z),h=t.vertices[s.index2],u.push(h.x,h.y,h.z)}else if(t&&t.isBufferGeometry){var g,y,x,w,b,_,M;if(h=new ot,null!==t.index){for(g=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),r=0,a=x.length;r<a;++r)for(e=b=(w=x[r]).start,n=b+w.count;e<n;e+=3)for(i=0;i<3;i++)o=y.getX(e+i),l=y.getX(e+(i+1)%3),d[0]=Math.min(o,l),d[1]=Math.max(o,l),void 0===p[c=d[0]+","+d[1]]&&(p[c]={index1:d[0],index2:d[1]});for(c in p)s=p[c],h.fromBufferAttribute(g,s.index1),u.push(h.x,h.y,h.z),h.fromBufferAttribute(g,s.index2),u.push(h.x,h.y,h.z)}else for(e=0,n=(g=t.attributes.position).count/3;e<n;e++)for(i=0;i<3;i++)_=3*e+i,h.fromBufferAttribute(g,_),u.push(h.x,h.y,h.z),M=3*e+(i+1)%3,h.fromBufferAttribute(g,M),u.push(h.x,h.y,h.z)}this.setAttribute("position",new Ge(u,3))}function ja(t,e,i){Mi.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:i},this.fromBufferGeometry(new Wa(t,e,i)),this.mergeVertices()}function Wa(t,e,i){Ke.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:i};var n,r,a=[],s=[],o=[],l=[],c=1e-5,h=new ot,u=new ot,d=new ot,p=new ot,m=new ot;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var f=e+1;for(n=0;n<=i;n++){var v=n/i;for(r=0;r<=e;r++){var g=r/e;t(g,v,u),s.push(u.x,u.y,u.z),g-c>=0?(t(g-c,v,d),p.subVectors(u,d)):(t(g+c,v,d),p.subVectors(d,u)),v-c>=0?(t(g,v-c,d),m.subVectors(u,d)):(t(g,v+c,d),m.subVectors(d,u)),h.crossVectors(p,m).normalize(),o.push(h.x,h.y,h.z),l.push(g,v)}}for(n=0;n<i;n++)for(r=0;r<e;r++){var y=n*f+r,x=n*f+r+1,w=(n+1)*f+r+1,b=(n+1)*f+r;a.push(y,x,b),a.push(x,w,b)}this.setIndex(a),this.setAttribute("position",new Ge(s,3)),this.setAttribute("normal",new Ge(o,3)),this.setAttribute("uv",new Ge(l,2))}function qa(t,e,i,n){Mi.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n},this.fromBufferGeometry(new Xa(t,e,i,n)),this.mergeVertices()}function Xa(t,e,i,n){Ke.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n},i=i||1;var r=[],a=[];function s(t,e,i,n){var r,a,s=Math.pow(2,n),l=[];for(r=0;r<=s;r++){l[r]=[];var c=t.clone().lerp(i,r/s),h=e.clone().lerp(i,r/s),u=s-r;for(a=0;a<=u;a++)l[r][a]=0===a&&r===s?c:c.clone().lerp(h,a/u)}for(r=0;r<s;r++)for(a=0;a<2*(s-r)-1;a++){var d=Math.floor(a/2);a%2==0?(o(l[r][d+1]),o(l[r+1][d]),o(l[r][d])):(o(l[r][d+1]),o(l[r+1][d+1]),o(l[r+1][d]))}}function o(t){r.push(t.x,t.y,t.z)}function l(e,i){var n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function c(t,e,i,n){n<0&&1===t.x&&(a[e]=t.x-1),0===i.x&&0===i.z&&(a[e]=n/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){for(var i=new ot,n=new ot,r=new ot,a=0;a<e.length;a+=3)l(e[a+0],i),l(e[a+1],n),l(e[a+2],r),s(i,n,r,t)}(n=n||0),function(t){for(var e=new ot,i=0;i<r.length;i+=3)e.x=r[i+0],e.y=r[i+1],e.z=r[i+2],e.normalize().multiplyScalar(t),r[i+0]=e.x,r[i+1]=e.y,r[i+2]=e.z}(i),function(){for(var t=new ot,e=0;e<r.length;e+=3){t.x=r[e+0],t.y=r[e+1],t.z=r[e+2];var i=h(t)/2/Math.PI+.5,n=(s=t,Math.atan2(-s.y,Math.sqrt(s.x*s.x+s.z*s.z))/Math.PI+.5);a.push(i,1-n)}var s;(function(){for(var t=new ot,e=new ot,i=new ot,n=new ot,s=new J,o=new J,l=new J,u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),s.set(a[d+0],a[d+1]),o.set(a[d+2],a[d+3]),l.set(a[d+4],a[d+5]),n.copy(t).add(e).add(i).divideScalar(3);var p=h(n);c(s,d+0,t,p),c(o,d+2,e,p),c(l,d+4,i,p)}})(),function(){for(var t=0;t<a.length;t+=6){var e=a[t+0],i=a[t+2],n=a[t+4],r=Math.max(e,i,n),s=Math.min(e,i,n);r>.9&&s<.1&&(e<.2&&(a[t+0]+=1),i<.2&&(a[t+2]+=1),n<.2&&(a[t+4]+=1))}}()}(),this.setAttribute("position",new Ge(r,3)),this.setAttribute("normal",new Ge(r.slice(),3)),this.setAttribute("uv",new Ge(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}function Ya(t,e){Mi.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Za(t,e)),this.mergeVertices()}function Za(t,e){Xa.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ja(t,e){Mi.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Qa(t,e)),this.mergeVertices()}function Qa(t,e){Xa.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ka(t,e){Mi.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new $a(t,e)),this.mergeVertices()}function $a(t,e){var i=(1+Math.sqrt(5))/2,n=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1];Xa.call(this,n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function ts(t,e){Mi.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new es(t,e)),this.mergeVertices()}function es(t,e){var i=(1+Math.sqrt(5))/2,n=1/i,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n];Xa.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function is(t,e,i,n,r,a){Mi.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var s=new ns(t,e,i,n,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals,this.fromBufferGeometry(s),this.mergeVertices()}function ns(t,e,i,n,r){Ke.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:r},e=e||64,i=i||1,n=n||8,r=r||!1;var a=t.computeFrenetFrames(e,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var s,o,l=new ot,c=new ot,h=new J,u=new ot,d=[],p=[],m=[],f=[];function v(r){u=t.getPointAt(r/e,u);var s=a.normals[r],h=a.binormals[r];for(o=0;o<=n;o++){var m=o/n*Math.PI*2,f=Math.sin(m),v=-Math.cos(m);c.x=v*s.x+f*h.x,c.y=v*s.y+f*h.y,c.z=v*s.z+f*h.z,c.normalize(),p.push(c.x,c.y,c.z),l.x=u.x+i*c.x,l.y=u.y+i*c.y,l.z=u.z+i*c.z,d.push(l.x,l.y,l.z)}}!function(){for(s=0;s<e;s++)v(s);v(!1===r?e:0),function(){for(s=0;s<=e;s++)for(o=0;o<=n;o++)h.x=s/e,h.y=o/n,m.push(h.x,h.y)}(),function(){for(o=1;o<=e;o++)for(s=1;s<=n;s++){var t=(n+1)*(o-1)+(s-1),i=(n+1)*o+(s-1),r=(n+1)*o+s,a=(n+1)*(o-1)+s;f.push(t,i,a),f.push(i,r,a)}}()}(),this.setIndex(f),this.setAttribute("position",new Ge(d,3)),this.setAttribute("normal",new Ge(p,3)),this.setAttribute("uv",new Ge(m,2))}function rs(t,e,i,n,r,a,s){Mi.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:a},void 0!==s&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new as(t,e,i,n,r,a)),this.mergeVertices()}function as(t,e,i,n,r,a){Ke.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:r,q:a},t=t||1,e=e||.4,i=Math.floor(i)||64,n=Math.floor(n)||8,r=r||2,a=a||3;var s,o,l=[],c=[],h=[],u=[],d=new ot,p=new ot,m=new ot,f=new ot,v=new ot,g=new ot,y=new ot;for(s=0;s<=i;++s){var x=s/i*r*Math.PI*2;for(A(x,r,a,t,m),A(x+.01,r,a,t,f),g.subVectors(f,m),y.addVectors(f,m),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),o=0;o<=n;++o){var w=o/n*Math.PI*2,b=-e*Math.cos(w),_=e*Math.sin(w);d.x=m.x+(b*y.x+_*v.x),d.y=m.y+(b*y.y+_*v.y),d.z=m.z+(b*y.z+_*v.z),c.push(d.x,d.y,d.z),p.subVectors(d,m).normalize(),h.push(p.x,p.y,p.z),u.push(s/i),u.push(o/n)}}for(o=1;o<=i;o++)for(s=1;s<=n;s++){var M=(n+1)*(o-1)+(s-1),S=(n+1)*o+(s-1),E=(n+1)*o+s,T=(n+1)*(o-1)+s;l.push(M,S,T),l.push(S,E,T)}function A(t,e,i,n,r){var a=Math.cos(t),s=Math.sin(t),o=i/e*t,l=Math.cos(o);r.x=n*(2+l)*.5*a,r.y=n*(2+l)*s*.5,r.z=n*Math.sin(o)*.5}this.setIndex(l),this.setAttribute("position",new Ge(c,3)),this.setAttribute("normal",new Ge(h,3)),this.setAttribute("uv",new Ge(u,2))}function ss(t,e,i,n,r){Mi.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},this.fromBufferGeometry(new os(t,e,i,n,r)),this.mergeVertices()}function os(t,e,i,n,r){Ke.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:r},t=t||1,e=e||.4,i=Math.floor(i)||8,n=Math.floor(n)||6,r=r||2*Math.PI;var a,s,o=[],l=[],c=[],h=[],u=new ot,d=new ot,p=new ot;for(a=0;a<=i;a++)for(s=0;s<=n;s++){var m=s/n*r,f=a/i*Math.PI*2;d.x=(t+e*Math.cos(f))*Math.cos(m),d.y=(t+e*Math.cos(f))*Math.sin(m),d.z=e*Math.sin(f),l.push(d.x,d.y,d.z),u.x=t*Math.cos(m),u.y=t*Math.sin(m),p.subVectors(d,u).normalize(),c.push(p.x,p.y,p.z),h.push(s/n),h.push(a/i)}for(a=1;a<=i;a++)for(s=1;s<=n;s++){var v=(n+1)*a+s-1,g=(n+1)*(a-1)+s-1,y=(n+1)*(a-1)+s,x=(n+1)*a+s;o.push(v,g,x),o.push(g,y,x)}this.setIndex(o),this.setAttribute("position",new Ge(l,3)),this.setAttribute("normal",new Ge(c,3)),this.setAttribute("uv",new Ge(h,2))}Ha.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Ha,isPoints:!0,raycast:function(t,e){var i=this.geometry,n=this.matrixWorld,r=t.params.Points.threshold;if(null===i.boundingSphere&&i.computeBoundingSphere(),Na.copy(i.boundingSphere),Na.applyMatrix4(n),Na.radius+=r,!1!==t.ray.intersectsSphere(Na)){Oa.getInverse(n),Da.copy(t.ray).applyMatrix4(Oa);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),s=a*a;if(i.isBufferGeometry){var o=i.index,l=i.attributes.position.array;if(null!==o)for(var c=o.array,h=0,u=c.length;h<u;h++){var d=c[h];za.fromArray(l,3*d),Ba(za,d,s,n,t,e,this)}else{h=0;for(var p=l.length/3;h<p;h++)za.fromArray(l,3*h),Ba(za,h,s,n,t,e,this)}}else{var m=i.vertices;for(h=0,p=m.length;h<p;h++)Ba(m[h],h,s,n,t,e,this)}}},updateMorphTargets:function(){var t,e,i,n=this.geometry;if(n.isBufferGeometry){var r=n.morphAttributes,a=Object.keys(r);if(a.length>0){var s=r[a[0]];if(void 0!==s)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)i=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}else{var o=n.morphTargets;void 0!==o&&o.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ua.prototype=Object.assign(Object.create(tt.prototype),{constructor:Ua,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Fa.prototype=Object.create(tt.prototype),Fa.prototype.constructor=Fa,Fa.prototype.isCompressedTexture=!0,Ga.prototype=Object.create(tt.prototype),Ga.prototype.constructor=Ga,Ga.prototype.isCanvasTexture=!0,ka.prototype=Object.create(tt.prototype),ka.prototype.constructor=ka,ka.prototype.isDepthTexture=!0,Va.prototype=Object.create(Ke.prototype),Va.prototype.constructor=Va,ja.prototype=Object.create(Mi.prototype),ja.prototype.constructor=ja,Wa.prototype=Object.create(Ke.prototype),Wa.prototype.constructor=Wa,qa.prototype=Object.create(Mi.prototype),qa.prototype.constructor=qa,Xa.prototype=Object.create(Ke.prototype),Xa.prototype.constructor=Xa,Ya.prototype=Object.create(Mi.prototype),Ya.prototype.constructor=Ya,Za.prototype=Object.create(Xa.prototype),Za.prototype.constructor=Za,Ja.prototype=Object.create(Mi.prototype),Ja.prototype.constructor=Ja,Qa.prototype=Object.create(Xa.prototype),Qa.prototype.constructor=Qa,Ka.prototype=Object.create(Mi.prototype),Ka.prototype.constructor=Ka,$a.prototype=Object.create(Xa.prototype),$a.prototype.constructor=$a,ts.prototype=Object.create(Mi.prototype),ts.prototype.constructor=ts,es.prototype=Object.create(Xa.prototype),es.prototype.constructor=es,is.prototype=Object.create(Mi.prototype),is.prototype.constructor=is,ns.prototype=Object.create(Ke.prototype),ns.prototype.constructor=ns,ns.prototype.toJSON=function(){var t=Ke.prototype.toJSON.call(this);return t.path=this.parameters.path.toJSON(),t},rs.prototype=Object.create(Mi.prototype),rs.prototype.constructor=rs,as.prototype=Object.create(Ke.prototype),as.prototype.constructor=as,ss.prototype=Object.create(Mi.prototype),ss.prototype.constructor=ss,os.prototype=Object.create(Ke.prototype),os.prototype.constructor=os;var ls=function(t,e,i){i=i||2;var n,r,a,s,o,l,c,h=e&&e.length,u=h?e[0]*i:t.length,d=cs(t,0,u,i,!0),p=[];if(!d||d.next===d.prev)return p;if(h&&(d=function(t,e,i,n){var r,a,s,o,l,c=[];for(r=0,a=e.length;r<a;r++)s=e[r]*n,o=r<a-1?e[r+1]*n:t.length,(l=cs(t,s,o,n,!1))===l.next&&(l.steiner=!0),c.push(xs(l));for(c.sort(vs),r=0;r<c.length;r++)gs(c[r],i),i=hs(i,i.next);return i}(t,e,d,i)),t.length>80*i){n=a=t[0],r=s=t[1];for(var m=i;m<u;m+=i)(o=t[m])<n&&(n=o),(l=t[m+1])<r&&(r=l),o>a&&(a=o),l>s&&(s=l);c=0!==(c=Math.max(a-n,s-r))?1/c:0}return us(d,p,i,n,r,c),p};function cs(t,e,i,n,r){var a,s;if(r===function(t,e,i,n){for(var r=0,a=e,s=i-n;a<i;a+=n)r+=(t[s]-t[a])*(t[a+1]+t[s+1]),s=a;return r}(t,e,i,n)>0)for(a=e;a<i;a+=n)s=As(a,t[a],t[a+1],s);else for(a=i-n;a>=e;a-=n)s=As(a,t[a],t[a+1],s);return s&&Ms(s,s.next)&&(Ls(s),s=s.next),s}function hs(t,e){if(!t)return t;e||(e=t);var i,n=t;do{if(i=!1,n.steiner||!Ms(n,n.next)&&0!==_s(n.prev,n,n.next))n=n.next;else{if(Ls(n),(n=e=n.prev)===n.next)break;i=!0}}while(i||n!==e);return e}function us(t,e,i,n,r,a,s){if(t){!s&&a&&function(t,e,i,n){var r=t;do{null===r.z&&(r.z=ys(r.x,r.y,e,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,i,n,r,a,s,o,l,c=1;do{for(i=t,t=null,a=null,s=0;i;){for(s++,n=i,o=0,e=0;e<c&&(o++,n=n.nextZ);e++);for(l=c;o>0||l>0&&n;)0!==o&&(0===l||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,l--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;i=n}a.nextZ=null,c*=2}while(s>1)}(r)}(t,n,r,a);for(var o,l,c=t;t.prev!==t.next;)if(o=t.prev,l=t.next,a?ps(t,n,r,a):ds(t))e.push(o.i/i),e.push(t.i/i),e.push(l.i/i),Ls(t),t=l.next,c=l.next;else if((t=l)===c){s?1===s?us(t=ms(t,e,i),e,i,n,r,a,2):2===s&&fs(t,e,i,n,r,a):us(hs(t),e,i,n,r,a,1);break}}}function ds(t){var e=t.prev,i=t,n=t.next;if(_s(e,i,n)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(ws(e.x,e.y,i.x,i.y,n.x,n.y,r.x,r.y)&&_s(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function ps(t,e,i,n){var r=t.prev,a=t,s=t.next;if(_s(r,a,s)>=0)return!1;for(var o=r.x<a.x?r.x<s.x?r.x:s.x:a.x<s.x?a.x:s.x,l=r.y<a.y?r.y<s.y?r.y:s.y:a.y<s.y?a.y:s.y,c=r.x>a.x?r.x>s.x?r.x:s.x:a.x>s.x?a.x:s.x,h=r.y>a.y?r.y>s.y?r.y:s.y:a.y>s.y?a.y:s.y,u=ys(o,l,e,i,n),d=ys(c,h,e,i,n),p=t.prevZ,m=t.nextZ;p&&p.z>=u&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&ws(r.x,r.y,a.x,a.y,s.x,s.y,p.x,p.y)&&_s(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&ws(r.x,r.y,a.x,a.y,s.x,s.y,m.x,m.y)&&_s(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=u;){if(p!==t.prev&&p!==t.next&&ws(r.x,r.y,a.x,a.y,s.x,s.y,p.x,p.y)&&_s(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&ws(r.x,r.y,a.x,a.y,s.x,s.y,m.x,m.y)&&_s(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function ms(t,e,i){var n=t;do{var r=n.prev,a=n.next.next;!Ms(r,a)&&Ss(r,n,n.next,a)&&Es(r,a)&&Es(a,r)&&(e.push(r.i/i),e.push(n.i/i),e.push(a.i/i),Ls(n),Ls(n.next),n=t=a),n=n.next}while(n!==t);return n}function fs(t,e,i,n,r,a){var s=t;do{for(var o=s.next.next;o!==s.prev;){if(s.i!==o.i&&bs(s,o)){var l=Ts(s,o);return s=hs(s,s.next),l=hs(l,l.next),us(s,e,i,n,r,a),void us(l,e,i,n,r,a)}o=o.next}s=s.next}while(s!==t)}function vs(t,e){return t.x-e.x}function gs(t,e){if(e=function(t,e){var i,n=e,r=t.x,a=t.y,s=-1/0;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){var o=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(o<=r&&o>s){if(s=o,o===r){if(a===n.y)return n;if(a===n.next.y)return n.next}i=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!i)return null;if(r===s)return i.prev;var l,c=i,h=i.x,u=i.y,d=1/0;n=i.next;for(;n!==c;)r>=n.x&&n.x>=h&&r!==n.x&&ws(a<u?r:s,a,h,u,a<u?s:r,a,n.x,n.y)&&((l=Math.abs(a-n.y)/(r-n.x))<d||l===d&&n.x>i.x)&&Es(n,t)&&(i=n,d=l),n=n.next;return i}(t,e)){var i=Ts(e,t);hs(i,i.next)}}function ys(t,e,i,n,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function xs(t){var e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function ws(t,e,i,n,r,a,s,o){return(r-s)*(e-o)-(t-s)*(a-o)>=0&&(t-s)*(n-o)-(i-s)*(e-o)>=0&&(i-s)*(a-o)-(r-s)*(n-o)>=0}function bs(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&Ss(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&Es(t,e)&&Es(e,t)&&function(t,e){var i=t,n=!1,r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{i.y>a!=i.next.y>a&&i.next.y!==i.y&&r<(i.next.x-i.x)*(a-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)}function _s(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function Ms(t,e){return t.x===e.x&&t.y===e.y}function Ss(t,e,i,n){return!!(Ms(t,i)&&Ms(e,n)||Ms(t,n)&&Ms(i,e))||_s(t,e,i)>0!=_s(t,e,n)>0&&_s(i,n,t)>0!=_s(i,n,e)>0}function Es(t,e){return _s(t.prev,t,t.next)<0?_s(t,e,t.next)>=0&&_s(t,t.prev,e)>=0:_s(t,e,t.prev)<0||_s(t,t.next,e)<0}function Ts(t,e){var i=new Cs(t.i,t.x,t.y),n=new Cs(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,i.next=r,r.prev=i,n.next=i,i.prev=n,a.next=n,n.prev=a,n}function As(t,e,i,n){var r=new Cs(t,e,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function Ls(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Cs(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Ps={area:function(t){for(var e=t.length,i=0,n=e-1,r=0;r<e;n=r++)i+=t[n].x*t[r].y-t[r].x*t[n].y;return.5*i},isClockWise:function(t){return Ps.area(t)<0},triangulateShape:function(t,e){var i=[],n=[],r=[];Rs(t),Is(i,t);var a=t.length;e.forEach(Rs);for(var s=0;s<e.length;s++)n.push(a),a+=e[s].length,Is(i,e[s]);var o=ls(i,n);for(s=0;s<o.length;s+=3)r.push(o.slice(s,s+3));return r}};function Rs(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Is(t,e){for(var i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}function Os(t,e){Mi.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new Ds(t,e)),this.mergeVertices()}function Ds(t,e){Ke.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var i=this,n=[],r=[],a=0,s=t.length;a<s;a++){o(t[a])}function o(t){var a=[],s=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1,l=void 0!==e.depth?e.depth:100,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:h-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3,m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:Ns;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),l=e.amount);var v,g,y,x,w,b,_,M,S=!1;m&&(v=m.getSpacedPoints(o),S=!0,c=!1,g=m.computeFrenetFrames(o,!1),y=new ot,x=new ot,w=new ot),c||(p=0,h=0,u=0,d=0);var E=t.extractPoints(s),T=E.shape,A=E.holes;if(!Ps.isClockWise(T))for(T=T.reverse(),_=0,M=A.length;_<M;_++)b=A[_],Ps.isClockWise(b)&&(A[_]=b.reverse());var L=Ps.triangulateShape(T,A),C=T;for(_=0,M=A.length;_<M;_++)b=A[_],T=T.concat(b);function P(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(i).add(t)}var R,I,O,D,N,z,H=T.length,B=L.length;function U(t,e,i){var n,r,a,s=t.x-e.x,o=t.y-e.y,l=i.x-t.x,c=i.y-t.y,h=s*s+o*o,u=s*c-o*l;if(Math.abs(u)>Number.EPSILON){var d=Math.sqrt(h),p=Math.sqrt(l*l+c*c),m=e.x-o/d,f=e.y+s/d,v=((i.x-c/p-m)*c-(i.y+l/p-f)*l)/(s*c-o*l),g=(n=m+s*v-t.x)*n+(r=f+o*v-t.y)*r;if(g<=2)return new J(n,r);a=Math.sqrt(g/2)}else{var y=!1;s>Number.EPSILON?l>Number.EPSILON&&(y=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(y=!0):Math.sign(o)===Math.sign(c)&&(y=!0),y?(n=-o,r=s,a=Math.sqrt(h)):(n=s,r=o,a=Math.sqrt(h/2))}return new J(n/a,r/a)}for(var F=[],G=0,k=C.length,V=k-1,j=G+1;G<k;G++,V++,j++)V===k&&(V=0),j===k&&(j=0),F[G]=U(C[G],C[V],C[j]);var W,q,X=[],Y=F.concat();for(_=0,M=A.length;_<M;_++){for(b=A[_],W=[],G=0,V=(k=b.length)-1,j=G+1;G<k;G++,V++,j++)V===k&&(V=0),j===k&&(j=0),W[G]=U(b[G],b[V],b[j]);X.push(W),Y=Y.concat(W)}for(R=0;R<p;R++){for(O=R/p,D=h*Math.cos(O*Math.PI/2),I=u*Math.sin(O*Math.PI/2)+d,G=0,k=C.length;G<k;G++)Q((N=P(C[G],F[G],I)).x,N.y,-D);for(_=0,M=A.length;_<M;_++)for(b=A[_],W=X[_],G=0,k=b.length;G<k;G++)Q((N=P(b[G],W[G],I)).x,N.y,-D)}for(I=u+d,G=0;G<H;G++)N=c?P(T[G],Y[G],I):T[G],S?(x.copy(g.normals[0]).multiplyScalar(N.x),y.copy(g.binormals[0]).multiplyScalar(N.y),w.copy(v[0]).add(x).add(y),Q(w.x,w.y,w.z)):Q(N.x,N.y,0);for(q=1;q<=o;q++)for(G=0;G<H;G++)N=c?P(T[G],Y[G],I):T[G],S?(x.copy(g.normals[q]).multiplyScalar(N.x),y.copy(g.binormals[q]).multiplyScalar(N.y),w.copy(v[q]).add(x).add(y),Q(w.x,w.y,w.z)):Q(N.x,N.y,l/o*q);for(R=p-1;R>=0;R--){for(O=R/p,D=h*Math.cos(O*Math.PI/2),I=u*Math.sin(O*Math.PI/2)+d,G=0,k=C.length;G<k;G++)Q((N=P(C[G],F[G],I)).x,N.y,l+D);for(_=0,M=A.length;_<M;_++)for(b=A[_],W=X[_],G=0,k=b.length;G<k;G++)N=P(b[G],W[G],I),S?Q(N.x,N.y+v[o-1].y,v[o-1].x+D):Q(N.x,N.y,l+D)}function Z(t,e){var i,n;for(G=t.length;--G>=0;){i=G,(n=G-1)<0&&(n=t.length-1);var r=0,a=o+2*p;for(r=0;r<a;r++){var s=H*r,l=H*(r+1);$(e+i+s,e+n+s,e+n+l,e+i+l)}}}function Q(t,e,i){a.push(t),a.push(e),a.push(i)}function K(t,e,r){tt(t),tt(e),tt(r);var a=n.length/3,s=f.generateTopUV(i,n,a-3,a-2,a-1);et(s[0]),et(s[1]),et(s[2])}function $(t,e,r,a){tt(t),tt(e),tt(a),tt(e),tt(r),tt(a);var s=n.length/3,o=f.generateSideWallUV(i,n,s-6,s-3,s-2,s-1);et(o[0]),et(o[1]),et(o[3]),et(o[1]),et(o[2]),et(o[3])}function tt(t){n.push(a[3*t+0]),n.push(a[3*t+1]),n.push(a[3*t+2])}function et(t){r.push(t.x),r.push(t.y)}!function(){var t=n.length/3;if(c){var e=0,r=H*e;for(G=0;G<B;G++)K((z=L[G])[2]+r,z[1]+r,z[0]+r);for(r=H*(e=o+2*p),G=0;G<B;G++)K((z=L[G])[0]+r,z[1]+r,z[2]+r)}else{for(G=0;G<B;G++)K((z=L[G])[2],z[1],z[0]);for(G=0;G<B;G++)K((z=L[G])[0]+H*o,z[1]+H*o,z[2]+H*o)}i.addGroup(t,n.length/3-t,0)}(),function(){var t=n.length/3,e=0;for(Z(C,e),e+=C.length,_=0,M=A.length;_<M;_++)Z(b=A[_],e),e+=b.length;i.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Ge(n,3)),this.setAttribute("uv",new Ge(r,2)),this.computeVertexNormals()}Os.prototype=Object.create(Mi.prototype),Os.prototype.constructor=Os,Os.prototype.toJSON=function(){var t=Mi.prototype.toJSON.call(this);return zs(this.parameters.shapes,this.parameters.options,t)},Ds.prototype=Object.create(Ke.prototype),Ds.prototype.constructor=Ds,Ds.prototype.toJSON=function(){var t=Ke.prototype.toJSON.call(this);return zs(this.parameters.shapes,this.parameters.options,t)};var Ns={generateTopUV:function(t,e,i,n,r){var a=e[3*i],s=e[3*i+1],o=e[3*n],l=e[3*n+1],c=e[3*r],h=e[3*r+1];return[new J(a,s),new J(o,l),new J(c,h)]},generateSideWallUV:function(t,e,i,n,r,a){var s=e[3*i],o=e[3*i+1],l=e[3*i+2],c=e[3*n],h=e[3*n+1],u=e[3*n+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*a],v=e[3*a+1],g=e[3*a+2];return Math.abs(o-h)<.01?[new J(s,1-l),new J(c,1-u),new J(d,1-m),new J(f,1-g)]:[new J(o,1-l),new J(h,1-u),new J(p,1-m),new J(v,1-g)]}};function zs(t,e,i){if(i.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var a=t[n];i.shapes.push(a.uuid)}else i.shapes.push(t.uuid);return void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON()),i}function Hs(t,e){Mi.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Bs(t,e)),this.mergeVertices()}function Bs(t,e){var i=(e=e||{}).font;if(!i||!i.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Mi;var n=i.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),Ds.call(this,n,e),this.type="TextBufferGeometry"}function Us(t,e,i,n,r,a,s){Mi.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new Fs(t,e,i,n,r,a,s)),this.mergeVertices()}function Fs(t,e,i,n,r,a,s){Ke.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:s},t=t||1,e=Math.max(3,Math.floor(e)||8),i=Math.max(2,Math.floor(i)||6),n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI,a=void 0!==a?a:0,s=void 0!==s?s:Math.PI;var o,l,c=Math.min(a+s,Math.PI),h=0,u=[],d=new ot,p=new ot,m=[],f=[],v=[],g=[];for(l=0;l<=i;l++){var y=[],x=l/i,w=0;for(0==l&&0==a?w=.5/e:l==i&&c==Math.PI&&(w=-.5/e),o=0;o<=e;o++){var b=o/e;d.x=-t*Math.cos(n+b*r)*Math.sin(a+x*s),d.y=t*Math.cos(a+x*s),d.z=t*Math.sin(n+b*r)*Math.sin(a+x*s),f.push(d.x,d.y,d.z),p.copy(d).normalize(),v.push(p.x,p.y,p.z),g.push(b+w,1-x),y.push(h++)}u.push(y)}for(l=0;l<i;l++)for(o=0;o<e;o++){var _=u[l][o+1],M=u[l][o],S=u[l+1][o],E=u[l+1][o+1];(0!==l||a>0)&&m.push(_,M,E),(l!==i-1||c<Math.PI)&&m.push(M,S,E)}this.setIndex(m),this.setAttribute("position",new Ge(f,3)),this.setAttribute("normal",new Ge(v,3)),this.setAttribute("uv",new Ge(g,2))}function Gs(t,e,i,n,r,a){Mi.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new ks(t,e,i,n,r,a)),this.mergeVertices()}function ks(t,e,i,n,r,a){Ke.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},t=t||.5,e=e||1,r=void 0!==r?r:0,a=void 0!==a?a:2*Math.PI,i=void 0!==i?Math.max(3,i):8;var s,o,l,c=[],h=[],u=[],d=[],p=t,m=(e-t)/(n=void 0!==n?Math.max(1,n):1),f=new ot,v=new J;for(o=0;o<=n;o++){for(l=0;l<=i;l++)s=r+l/i*a,f.x=p*Math.cos(s),f.y=p*Math.sin(s),h.push(f.x,f.y,f.z),u.push(0,0,1),v.x=(f.x/e+1)/2,v.y=(f.y/e+1)/2,d.push(v.x,v.y);p+=m}for(o=0;o<n;o++){var g=o*(i+1);for(l=0;l<i;l++){var y=s=l+g,x=s+i+1,w=s+i+2,b=s+1;c.push(y,x,b),c.push(x,w,b)}}this.setIndex(c),this.setAttribute("position",new Ge(h,3)),this.setAttribute("normal",new Ge(u,3)),this.setAttribute("uv",new Ge(d,2))}function Vs(t,e,i,n){Mi.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},this.fromBufferGeometry(new js(t,e,i,n)),this.mergeVertices()}function js(t,e,i,n){Ke.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e)||12,i=i||0,n=n||2*Math.PI,n=Z.clamp(n,0,2*Math.PI);var r,a,s,o=[],l=[],c=[],h=1/e,u=new ot,d=new J;for(a=0;a<=e;a++){var p=i+a*h*n,m=Math.sin(p),f=Math.cos(p);for(s=0;s<=t.length-1;s++)u.x=t[s].x*m,u.y=t[s].y,u.z=t[s].x*f,l.push(u.x,u.y,u.z),d.x=a/e,d.y=s/(t.length-1),c.push(d.x,d.y)}for(a=0;a<e;a++)for(s=0;s<t.length-1;s++){var v=r=s+a*t.length,g=r+t.length,y=r+t.length+1,x=r+1;o.push(v,g,x),o.push(g,y,x)}if(this.setIndex(o),this.setAttribute("position",new Ge(l,3)),this.setAttribute("uv",new Ge(c,2)),this.computeVertexNormals(),n===2*Math.PI){var w=this.attributes.normal.array,b=new ot,_=new ot,M=new ot;for(r=e*t.length*3,a=0,s=0;a<t.length;a++,s+=3)b.x=w[s+0],b.y=w[s+1],b.z=w[s+2],_.x=w[r+s+0],_.y=w[r+s+1],_.z=w[r+s+2],M.addVectors(b,_).normalize(),w[s+0]=w[r+s+0]=M.x,w[s+1]=w[r+s+1]=M.y,w[s+2]=w[r+s+2]=M.z}}function Ws(t,e){Mi.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new qs(t,e)),this.mergeVertices()}function qs(t,e){Ke.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var i=[],n=[],r=[],a=[],s=0,o=0;if(!1===Array.isArray(t))c(t);else for(var l=0;l<t.length;l++)c(t[l]),this.addGroup(s,o,l),s+=o,o=0;function c(t){var s,l,c,h=n.length/3,u=t.extractPoints(e),d=u.shape,p=u.holes;for(!1===Ps.isClockWise(d)&&(d=d.reverse()),s=0,l=p.length;s<l;s++)c=p[s],!0===Ps.isClockWise(c)&&(p[s]=c.reverse());var m=Ps.triangulateShape(d,p);for(s=0,l=p.length;s<l;s++)c=p[s],d=d.concat(c);for(s=0,l=d.length;s<l;s++){var f=d[s];n.push(f.x,f.y,0),r.push(0,0,1),a.push(f.x,f.y)}for(s=0,l=m.length;s<l;s++){var v=m[s],g=v[0]+h,y=v[1]+h,x=v[2]+h;i.push(g,y,x),o+=3}}this.setIndex(i),this.setAttribute("position",new Ge(n,3)),this.setAttribute("normal",new Ge(r,3)),this.setAttribute("uv",new Ge(a,2))}function Xs(t,e){if(e.shapes=[],Array.isArray(t))for(var i=0,n=t.length;i<n;i++){var r=t[i];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}function Ys(t,e){Ke.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var i,n,r,a,s=[],o=Math.cos(Z.DEG2RAD*e),l=[0,0],c={},h=["a","b","c"];t.isBufferGeometry?(a=new Mi).fromBufferGeometry(t):a=t.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,d=a.faces,p=0,m=d.length;p<m;p++)for(var f=d[p],v=0;v<3;v++)i=f[h[v]],n=f[h[(v+1)%3]],l[0]=Math.min(i,n),l[1]=Math.max(i,n),void 0===c[r=l[0]+","+l[1]]?c[r]={index1:l[0],index2:l[1],face1:p,face2:void 0}:c[r].face2=p;for(r in c){var g=c[r];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=o){var y=u[g.index1];s.push(y.x,y.y,y.z),y=u[g.index2],s.push(y.x,y.y,y.z)}}this.setAttribute("position",new Ge(s,3))}function Zs(t,e,i,n,r,a,s,o){Mi.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:s,thetaLength:o},this.fromBufferGeometry(new Js(t,e,i,n,r,a,s,o)),this.mergeVertices()}function Js(t,e,i,n,r,a,s,o){Ke.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:s,thetaLength:o};var l=this;t=void 0!==t?t:1,e=void 0!==e?e:1,i=i||1,n=Math.floor(n)||8,r=Math.floor(r)||1,a=void 0!==a&&a,s=void 0!==s?s:0,o=void 0!==o?o:2*Math.PI;var c=[],h=[],u=[],d=[],p=0,m=[],f=i/2,v=0;function g(i){var r,a,m,g=new J,y=new ot,x=0,w=!0===i?t:e,b=!0===i?1:-1;for(a=p,r=1;r<=n;r++)h.push(0,f*b,0),u.push(0,b,0),d.push(.5,.5),p++;for(m=p,r=0;r<=n;r++){var _=r/n*o+s,M=Math.cos(_),S=Math.sin(_);y.x=w*S,y.y=f*b,y.z=w*M,h.push(y.x,y.y,y.z),u.push(0,b,0),g.x=.5*M+.5,g.y=.5*S*b+.5,d.push(g.x,g.y),p++}for(r=0;r<n;r++){var E=a+r,T=m+r;!0===i?c.push(T,T+1,E):c.push(T+1,T,E),x+=3}l.addGroup(v,x,!0===i?1:2),v+=x}!function(){var a,g,y=new ot,x=new ot,w=0,b=(e-t)/i;for(g=0;g<=r;g++){var _=[],M=g/r,S=M*(e-t)+t;for(a=0;a<=n;a++){var E=a/n,T=E*o+s,A=Math.sin(T),L=Math.cos(T);x.x=S*A,x.y=-M*i+f,x.z=S*L,h.push(x.x,x.y,x.z),y.set(A,b,L).normalize(),u.push(y.x,y.y,y.z),d.push(E,1-M),_.push(p++)}m.push(_)}for(a=0;a<n;a++)for(g=0;g<r;g++){var C=m[g][a],P=m[g+1][a],R=m[g+1][a+1],I=m[g][a+1];c.push(C,P,I),c.push(P,R,I),w+=6}l.addGroup(v,w,0),v+=w}(),!1===a&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(c),this.setAttribute("position",new Ge(h,3)),this.setAttribute("normal",new Ge(u,3)),this.setAttribute("uv",new Ge(d,2))}function Qs(t,e,i,n,r,a,s){Zs.call(this,0,t,e,i,n,r,a,s),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:s}}function Ks(t,e,i,n,r,a,s){Js.call(this,0,t,e,i,n,r,a,s),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:s}}function $s(t,e,i,n){Mi.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},this.fromBufferGeometry(new to(t,e,i,n)),this.mergeVertices()}function to(t,e,i,n){Ke.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},t=t||1,e=void 0!==e?Math.max(3,e):8,i=void 0!==i?i:0,n=void 0!==n?n:2*Math.PI;var r,a,s=[],o=[],l=[],c=[],h=new ot,u=new J;for(o.push(0,0,0),l.push(0,0,1),c.push(.5,.5),a=0,r=3;a<=e;a++,r+=3){var d=i+a/e*n;h.x=t*Math.cos(d),h.y=t*Math.sin(d),o.push(h.x,h.y,h.z),l.push(0,0,1),u.x=(o[r]/t+1)/2,u.y=(o[r+1]/t+1)/2,c.push(u.x,u.y)}for(r=1;r<=e;r++)s.push(r,r+1,0);this.setIndex(s),this.setAttribute("position",new Ge(o,3)),this.setAttribute("normal",new Ge(l,3)),this.setAttribute("uv",new Ge(c,2))}Hs.prototype=Object.create(Mi.prototype),Hs.prototype.constructor=Hs,Bs.prototype=Object.create(Ds.prototype),Bs.prototype.constructor=Bs,Us.prototype=Object.create(Mi.prototype),Us.prototype.constructor=Us,Fs.prototype=Object.create(Ke.prototype),Fs.prototype.constructor=Fs,Gs.prototype=Object.create(Mi.prototype),Gs.prototype.constructor=Gs,ks.prototype=Object.create(Ke.prototype),ks.prototype.constructor=ks,Vs.prototype=Object.create(Mi.prototype),Vs.prototype.constructor=Vs,js.prototype=Object.create(Ke.prototype),js.prototype.constructor=js,Ws.prototype=Object.create(Mi.prototype),Ws.prototype.constructor=Ws,Ws.prototype.toJSON=function(){var t=Mi.prototype.toJSON.call(this);return Xs(this.parameters.shapes,t)},qs.prototype=Object.create(Ke.prototype),qs.prototype.constructor=qs,qs.prototype.toJSON=function(){var t=Ke.prototype.toJSON.call(this);return Xs(this.parameters.shapes,t)},Ys.prototype=Object.create(Ke.prototype),Ys.prototype.constructor=Ys,Zs.prototype=Object.create(Mi.prototype),Zs.prototype.constructor=Zs,Js.prototype=Object.create(Ke.prototype),Js.prototype.constructor=Js,Qs.prototype=Object.create(Zs.prototype),Qs.prototype.constructor=Qs,Ks.prototype=Object.create(Js.prototype),Ks.prototype.constructor=Ks,$s.prototype=Object.create(Mi.prototype),$s.prototype.constructor=$s,to.prototype=Object.create(Ke.prototype),to.prototype.constructor=to;var eo=Object.freeze({__proto__:null,WireframeGeometry:Va,ParametricGeometry:ja,ParametricBufferGeometry:Wa,TetrahedronGeometry:Ya,TetrahedronBufferGeometry:Za,OctahedronGeometry:Ja,OctahedronBufferGeometry:Qa,IcosahedronGeometry:Ka,IcosahedronBufferGeometry:$a,DodecahedronGeometry:ts,DodecahedronBufferGeometry:es,PolyhedronGeometry:qa,PolyhedronBufferGeometry:Xa,TubeGeometry:is,TubeBufferGeometry:ns,TorusKnotGeometry:rs,TorusKnotBufferGeometry:as,TorusGeometry:ss,TorusBufferGeometry:os,TextGeometry:Hs,TextBufferGeometry:Bs,SphereGeometry:Us,SphereBufferGeometry:Fs,RingGeometry:Gs,RingBufferGeometry:ks,PlaneGeometry:Fi,PlaneBufferGeometry:Gi,LatheGeometry:Vs,LatheBufferGeometry:js,ShapeGeometry:Ws,ShapeBufferGeometry:qs,ExtrudeGeometry:Os,ExtrudeBufferGeometry:Ds,EdgesGeometry:Ys,ConeGeometry:Qs,ConeBufferGeometry:Ks,CylinderGeometry:Zs,CylinderBufferGeometry:Js,CircleGeometry:$s,CircleBufferGeometry:to,BoxGeometry:class extends Mi{constructor(t,e,i,n,r,a){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:r,depthSegments:a},this.fromBufferGeometry(new Si(t,e,i,n,r,a)),this.mergeVertices()}},BoxBufferGeometry:Si});function io(t){Pe.call(this),this.type="ShadowMaterial",this.color=new Se(0),this.transparent=!0,this.setValues(t)}function no(t){Li.call(this,t),this.type="RawShaderMaterial"}function ro(t){Pe.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Se(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Se(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.vertexTangents=!1,this.setValues(t)}function ao(t){ro.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new J(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,this.sheen=null,this.transparency=0,this.setValues(t)}function so(t){Pe.call(this),this.type="MeshPhongMaterial",this.color=new Se(16777215),this.specular=new Se(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Se(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function oo(t){Pe.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Se(16777215),this.specular=new Se(1118481),this.shininess=30,this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Se(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function lo(t){Pe.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function co(t){Pe.call(this),this.type="MeshLambertMaterial",this.color=new Se(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Se(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function ho(t){Pe.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Se(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function uo(t){ba.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}io.prototype=Object.create(Pe.prototype),io.prototype.constructor=io,io.prototype.isShadowMaterial=!0,io.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this},no.prototype=Object.create(Li.prototype),no.prototype.constructor=no,no.prototype.isRawShaderMaterial=!0,ro.prototype=Object.create(Pe.prototype),ro.prototype.constructor=ro,ro.prototype.isMeshStandardMaterial=!0,ro.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.vertexTangents=t.vertexTangents,this},ao.prototype=Object.create(ro.prototype),ao.prototype.constructor=ao,ao.prototype.isMeshPhysicalMaterial=!0,ao.prototype.copy=function(t){return ro.prototype.copy.call(this,t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,t.sheen?this.sheen=(this.sheen||new Se).copy(t.sheen):this.sheen=null,this.transparency=t.transparency,this},so.prototype=Object.create(Pe.prototype),so.prototype.constructor=so,so.prototype.isMeshPhongMaterial=!0,so.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},oo.prototype=Object.create(Pe.prototype),oo.prototype.constructor=oo,oo.prototype.isMeshToonMaterial=!0,oo.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},lo.prototype=Object.create(Pe.prototype),lo.prototype.constructor=lo,lo.prototype.isMeshNormalMaterial=!0,lo.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},co.prototype=Object.create(Pe.prototype),co.prototype.constructor=co,co.prototype.isMeshLambertMaterial=!0,co.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},ho.prototype=Object.create(Pe.prototype),ho.prototype.constructor=ho,ho.prototype.isMeshMatcapMaterial=!0,ho.prototype.copy=function(t){return Pe.prototype.copy.call(this,t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},uo.prototype=Object.create(ba.prototype),uo.prototype.constructor=uo,uo.prototype.isLineDashedMaterial=!0,uo.prototype.copy=function(t){return ba.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var po=Object.freeze({__proto__:null,ShadowMaterial:io,SpriteMaterial:Xr,RawShaderMaterial:no,ShaderMaterial:Li,PointsMaterial:Ia,MeshPhysicalMaterial:ao,MeshStandardMaterial:ro,MeshPhongMaterial:so,MeshToonMaterial:oo,MeshNormalMaterial:lo,MeshLambertMaterial:co,MeshDepthMaterial:Rr,MeshDistanceMaterial:Ir,MeshBasicMaterial:Re,MeshMatcapMaterial:ho,LineDashedMaterial:uo,LineBasicMaterial:ba,Material:Pe}),mo={arraySlice:function(t,e,i){return mo.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)},convertArray:function(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,i=new Array(e),n=0;n!==e;++n)i[n]=n;return i.sort((function(e,i){return t[e]-t[i]})),i},sortedArray:function(t,e,i){for(var n=t.length,r=new t.constructor(n),a=0,s=0;s!==n;++a)for(var o=i[a]*e,l=0;l!==e;++l)r[s++]=t[o+l];return r},flattenJSON:function(t,e,i,n){for(var r=1,a=t[0];void 0!==a&&void 0===a[n];)a=t[r++];if(void 0!==a){var s=a[n];if(void 0!==s)if(Array.isArray(s))do{void 0!==(s=a[n])&&(e.push(a.time),i.push.apply(i,s)),a=t[r++]}while(void 0!==a);else if(void 0!==s.toArray)do{void 0!==(s=a[n])&&(e.push(a.time),s.toArray(i,i.length)),a=t[r++]}while(void 0!==a);else do{void 0!==(s=a[n])&&(e.push(a.time),i.push(s)),a=t[r++]}while(void 0!==a)}},subclip:function(t,e,i,n,r){r=r||30;var a=t.clone();a.name=e;for(var s=[],o=0;o<a.tracks.length;++o){for(var l=a.tracks[o],c=l.getValueSize(),h=[],u=[],d=0;d<l.times.length;++d){var p=l.times[d]*r;if(!(p<i||p>=n)){h.push(l.times[d]);for(var m=0;m<c;++m)u.push(l.values[d*c+m])}}0!==h.length&&(l.times=mo.convertArray(h,l.times.constructor),l.values=mo.convertArray(u,l.values.constructor),s.push(l))}a.tracks=s;var f=1/0;for(o=0;o<a.tracks.length;++o)f>a.tracks[o].times[0]&&(f=a.tracks[o].times[0]);for(o=0;o<a.tracks.length;++o)a.tracks[o].shift(-1*f);return a.resetDuration(),a}};function fo(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i}function vo(t,e,i,n){fo.call(this,t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function go(t,e,i,n){fo.call(this,t,e,i,n)}function yo(t,e,i,n){fo.call(this,t,e,i,n)}function xo(t,e,i,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=mo.convertArray(e,this.TimeBufferType),this.values=mo.convertArray(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}function wo(t,e,i){xo.call(this,t,e,i)}function bo(t,e,i,n){xo.call(this,t,e,i,n)}function _o(t,e,i,n){xo.call(this,t,e,i,n)}function Mo(t,e,i,n){fo.call(this,t,e,i,n)}function So(t,e,i,n){xo.call(this,t,e,i,n)}function Eo(t,e,i,n){xo.call(this,t,e,i,n)}function To(t,e,i,n){xo.call(this,t,e,i,n)}function Ao(t,e,i){this.name=t,this.tracks=i,this.duration=void 0!==e?e:-1,this.uuid=Z.generateUUID(),this.duration<0&&this.resetDuration()}function Lo(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return _o;case"vector":case"vector2":case"vector3":case"vector4":return To;case"color":return bo;case"quaternion":return So;case"bool":case"boolean":return wo;case"string":return Eo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){var i=[],n=[];mo.flattenJSON(t.keys,i,n,"value"),t.times=i,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(fo.prototype,{evaluate:function(t){var e=this.parameterPositions,i=this._cachedIndex,n=e[i],r=e[i-1];t:{e:{var a;i:{n:if(!(t<n)){for(var s=i+2;;){if(void 0===n){if(t<r)break n;return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,t,r)}if(i===s)break;if(r=n,t<(n=e[++i]))break e}a=e.length;break i}if(t>=r)break t;var o=e[1];t<o&&(i=2,r=o);for(s=i-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(i===s)break;if(n=r,t>=(r=e[--i-1]))break e}a=i,i=0}for(;i<a;){var l=i+a>>>1;t<e[l]?a=l:i=l+1}if(n=e[i],void 0===(r=e[i-1]))return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,r,t)}this._cachedIndex=i,this.intervalChanged_(i,r,n)}return this.interpolate_(i,r,t,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=t*n,a=0;a!==n;++a)e[a]=i[r+a];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(fo.prototype,{beforeStart_:fo.prototype.copySampleValue_,afterEnd_:fo.prototype.copySampleValue_}),vo.prototype=Object.assign(Object.create(fo.prototype),{constructor:vo,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(t,e,i){var n=this.parameterPositions,r=t-2,a=t+1,s=n[r],o=n[a];if(void 0===s)switch(this.getSettings_().endingStart){case 2401:r=t,s=2*e-i;break;case 2402:s=e+n[r=n.length-2]-n[r+1];break;default:r=t,s=i}if(void 0===o)switch(this.getSettings_().endingEnd){case 2401:a=t,o=2*i-e;break;case 2402:a=1,o=i+n[1]-n[0];break;default:a=t-1,o=e}var l=.5*(i-e),c=this.valueSize;this._weightPrev=l/(e-s),this._weightNext=l/(o-i),this._offsetPrev=r*c,this._offsetNext=a*c},interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(i-e)/(n-e),m=p*p,f=m*p,v=-u*f+2*u*m-u*p,g=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,y=(-1-d)*f+(1.5+d)*m+.5*p,x=d*f-d*m,w=0;w!==s;++w)r[w]=v*a[c+w]+g*a[l+w]+y*a[o+w]+x*a[h+w];return r}}),go.prototype=Object.assign(Object.create(fo.prototype),{constructor:go,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(i-e)/(n-e),h=1-c,u=0;u!==s;++u)r[u]=a[l+u]*h+a[o+u]*c;return r}}),yo.prototype=Object.assign(Object.create(fo.prototype),{constructor:yo,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(xo,{toJSON:function(t){var e,i=t.constructor;if(void 0!==i.toJSON)e=i.toJSON(t);else{e={name:t.name,times:mo.convertArray(t.times,Array),values:mo.convertArray(t.values,Array)};var n=t.getInterpolation();n!==t.DefaultInterpolation&&(e.interpolation=n)}return e.type=t.ValueTypeName,e}}),Object.assign(xo.prototype,{constructor:xo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(t){return new yo(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new go(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new vo(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case 2300:e=this.InterpolantFactoryMethodDiscrete;break;case 2301:e=this.InterpolantFactoryMethodLinear;break;case 2302:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(i);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,i=0,n=e.length;i!==n;++i)e[i]*=t;return this},trim:function(t,e){for(var i=this.times,n=i.length,r=0,a=n-1;r!==n&&i[r]<t;)++r;for(;-1!==a&&i[a]>e;)--a;if(++a,0!==r||a!==n){r>=a&&(r=(a=Math.max(a,1))-1);var s=this.getValueSize();this.times=mo.arraySlice(i,r,a),this.values=mo.arraySlice(this.values,r*s,a*s)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var a=null,s=0;s!==r;s++){var o=i[s];if("number"==typeof o&&isNaN(o)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,s,o),t=!1;break}if(null!==a&&a>o){console.error("THREE.KeyframeTrack: Out of order keys.",this,s,o,a),t=!1;break}a=o}if(void 0!==n&&mo.isTypedArray(n)){s=0;for(var l=n.length;s!==l;++s){var c=n[s];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,s,c),t=!1;break}}}return t},optimize:function(){for(var t=mo.arraySlice(this.times),e=mo.arraySlice(this.values),i=this.getValueSize(),n=2302===this.getInterpolation(),r=1,a=t.length-1,s=1;s<a;++s){var o=!1,l=t[s];if(l!==t[s+1]&&(1!==s||l!==l[0]))if(n)o=!0;else for(var c=s*i,h=c-i,u=c+i,d=0;d!==i;++d){var p=e[c+d];if(p!==e[h+d]||p!==e[u+d]){o=!0;break}}if(o){if(s!==r){t[r]=t[s];var m=s*i,f=r*i;for(d=0;d!==i;++d)e[f+d]=e[m+d]}++r}}if(a>0){t[r]=t[a];for(m=a*i,f=r*i,d=0;d!==i;++d)e[f+d]=e[m+d];++r}return r!==t.length?(this.times=mo.arraySlice(t,0,r),this.values=mo.arraySlice(e,0,r*i)):(this.times=t,this.values=e),this},clone:function(){var t=mo.arraySlice(this.times,0),e=mo.arraySlice(this.values,0),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}),wo.prototype=Object.assign(Object.create(xo.prototype),{constructor:wo,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),bo.prototype=Object.assign(Object.create(xo.prototype),{constructor:bo,ValueTypeName:"color"}),_o.prototype=Object.assign(Object.create(xo.prototype),{constructor:_o,ValueTypeName:"number"}),Mo.prototype=Object.assign(Object.create(fo.prototype),{constructor:Mo,interpolate_:function(t,e,i,n){for(var r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=(i-e)/(n-e),c=o+s;o!==c;o+=4)rt.slerpFlat(r,0,a,o-s,a,o,l);return r}}),So.prototype=Object.assign(Object.create(xo.prototype),{constructor:So,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(t){return new Mo(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),Eo.prototype=Object.assign(Object.create(xo.prototype),{constructor:Eo,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),To.prototype=Object.assign(Object.create(xo.prototype),{constructor:To,ValueTypeName:"vector"}),Object.assign(Ao,{parse:function(t){for(var e=[],i=t.tracks,n=1/(t.fps||1),r=0,a=i.length;r!==a;++r)e.push(Lo(i[r]).scale(n));return new Ao(t.name,t.duration,e)},toJSON:function(t){for(var e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},r=0,a=i.length;r!==a;++r)e.push(xo.toJSON(i[r]));return n},CreateFromMorphTargetSequence:function(t,e,i,n){for(var r=e.length,a=[],s=0;s<r;s++){var o=[],l=[];o.push((s+r-1)%r,s,(s+1)%r),l.push(0,1,0);var c=mo.getKeyframeOrder(o);o=mo.sortedArray(o,1,c),l=mo.sortedArray(l,1,c),n||0!==o[0]||(o.push(r),l.push(l[0])),a.push(new _o(".morphTargetInfluences["+e[s].name+"]",o,l).scale(1/i))}return new Ao(t,-1,a)},findByName:function(t,e){var i=t;if(!Array.isArray(t)){var n=t;i=n.geometry&&n.geometry.animations||n.animations}for(var r=0;r<i.length;r++)if(i[r].name===e)return i[r];return null},CreateClipsFromMorphTargetSequences:function(t,e,i){for(var n={},r=/^([\w-]*?)([\d]+)$/,a=0,s=t.length;a<s;a++){var o=t[a],l=o.name.match(r);if(l&&l.length>1){var c=n[u=l[1]];c||(n[u]=c=[]),c.push(o)}}var h=[];for(var u in n)h.push(Ao.CreateFromMorphTargetSequence(u,n[u],e,i));return h},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var i=function(t,e,i,n,r){if(0!==i.length){var a=[],s=[];mo.flattenJSON(i,a,s,n),0!==a.length&&r.push(new t(e,a,s))}},n=[],r=t.name||"default",a=t.length||-1,s=t.fps||30,o=t.hierarchy||[],l=0;l<o.length;l++){var c=o[l].keys;if(c&&0!==c.length)if(c[0].morphTargets){for(var h={},u=0;u<c.length;u++)if(c[u].morphTargets)for(var d=0;d<c[u].morphTargets.length;d++)h[c[u].morphTargets[d]]=-1;for(var p in h){var m=[],f=[];for(d=0;d!==c[u].morphTargets.length;++d){var v=c[u];m.push(v.time),f.push(v.morphTarget===p?1:0)}n.push(new _o(".morphTargetInfluence["+p+"]",m,f))}a=h.length*(s||1)}else{var g=".bones["+e[l].name+"]";i(To,g+".position",c,"pos",n),i(So,g+".quaternion",c,"rot",n),i(To,g+".scale",c,"scl",n)}}return 0===n.length?null:new Ao(r,a,n)}}),Object.assign(Ao.prototype,{resetDuration:function(){for(var t=0,e=0,i=this.tracks.length;e!==i;++e){var n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this},clone:function(){for(var t=[],e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new Ao(this.name,this.duration,t)}});var Co={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function Po(t,e,i){var n=this,r=!1,a=0,s=0,o=void 0,l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){s++,!1===r&&void 0!==n.onStart&&n.onStart(t,a,s),r=!0},this.itemEnd=function(t){a++,void 0!==n.onProgress&&n.onProgress(t,a,s),a===s&&(r=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return o?o(t):t},this.setURLModifier=function(t){return o=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){var e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(var e=0,i=l.length;e<i;e+=2){var n=l[e],r=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return r}return null}}var Ro=new Po;function Io(t){this.manager=void 0!==t?t:Ro,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(Io.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this}});var Oo={};function Do(t){Io.call(this,t)}function No(t){Io.call(this,t)}function zo(t){Io.call(this,t)}function Ho(t){Io.call(this,t)}function Bo(t){Io.call(this,t)}function Uo(t){Io.call(this,t)}function Fo(t){Io.call(this,t)}function Go(){this.type="Curve",this.arcLengthDivisions=200}function ko(t,e,i,n,r,a,s,o){Go.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=i||1,this.yRadius=n||1,this.aStartAngle=r||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=s||!1,this.aRotation=o||0}function Vo(t,e,i,n,r,a){ko.call(this,t,e,i,i,n,r,a),this.type="ArcCurve"}function jo(){var t=0,e=0,i=0,n=0;function r(r,a,s,o){t=r,e=s,i=-3*r+3*a-2*s-o,n=2*r-2*a+s+o}return{initCatmullRom:function(t,e,i,n,a){r(e,i,a*(i-t),a*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,a,s,o){var l=(e-t)/a-(i-t)/(a+s)+(i-e)/s,c=(i-e)/s-(n-e)/(s+o)+(n-i)/o;r(e,i,l*=s,c*=s)},calc:function(r){var a=r*r;return t+e*r+i*a+n*(a*r)}}}Do.prototype=Object.assign(Object.create(Io.prototype),{constructor:Do,load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=Co.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;if(void 0===Oo[t]){var s=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(s){var o=s[1],l=!!s[2],c=s[3];c=decodeURIComponent(c),l&&(c=atob(c));try{var h,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var d=new Uint8Array(c.length),p=0;p<c.length;p++)d[p]=c.charCodeAt(p);h="blob"===u?new Blob([d.buffer],{type:o}):d.buffer;break;case"document":var m=new DOMParser;h=m.parseFromString(c,o);break;case"json":h=JSON.parse(c);break;default:h=c}setTimeout((function(){e&&e(h),r.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}),0)}}else{Oo[t]=[],Oo[t].push({onLoad:e,onProgress:i,onError:n});var f=new XMLHttpRequest;for(var v in f.open("GET",t,!0),f.addEventListener("load",(function(e){var i=this.response,n=Oo[t];if(delete Oo[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Co.add(t,i);for(var a=0,s=n.length;a<s;a++){(o=n[a]).onLoad&&o.onLoad(i)}r.manager.itemEnd(t)}else{for(a=0,s=n.length;a<s;a++){var o;(o=n[a]).onError&&o.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}}),!1),f.addEventListener("progress",(function(e){for(var i=Oo[t],n=0,r=i.length;n<r;n++){var a=i[n];a.onProgress&&a.onProgress(e)}}),!1),f.addEventListener("error",(function(e){var i=Oo[t];delete Oo[t];for(var n=0,a=i.length;n<a;n++){var s=i[n];s.onError&&s.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),f.addEventListener("abort",(function(e){var i=Oo[t];delete Oo[t];for(var n=0,a=i.length;n<a;n++){var s=i[n];s.onError&&s.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(f.responseType=this.responseType),void 0!==this.withCredentials&&(f.withCredentials=this.withCredentials),f.overrideMimeType&&f.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)f.setRequestHeader(v,this.requestHeader[v]);f.send(null)}return r.manager.itemStart(t),f}Oo[t].push({onLoad:e,onProgress:i,onError:n})},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),No.prototype=Object.assign(Object.create(Io.prototype),{constructor:No,load:function(t,e,i,n){var r=this,a=new Do(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),i,n)},parse:function(t){for(var e=[],i=0;i<t.length;i++){var n=Ao.parse(t[i]);e.push(n)}return e}}),zo.prototype=Object.assign(Object.create(Io.prototype),{constructor:zo,load:function(t,e,i,n){var r=this,a=[],s=new Fa;s.image=a;var o=new Do(this.manager);function l(l){o.load(t[l],(function(t){var i=r.parse(t,!0);a[l]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},6===(c+=1)&&(1===i.mipmapCount&&(s.minFilter=1006),s.format=i.format,s.needsUpdate=!0,e&&e(s))}),i,n)}if(o.setPath(this.path),o.setResponseType("arraybuffer"),Array.isArray(t))for(var c=0,h=0,u=t.length;h<u;++h)l(h);else o.load(t,(function(t){var i=r.parse(t,!0);if(i.isCubemap)for(var n=i.mipmaps.length/i.mipmapCount,o=0;o<n;o++){a[o]={mipmaps:[]};for(var l=0;l<i.mipmapCount;l++)a[o].mipmaps.push(i.mipmaps[o*i.mipmapCount+l]),a[o].format=i.format,a[o].width=i.width,a[o].height=i.height}else s.image.width=i.width,s.image.height=i.height,s.mipmaps=i.mipmaps;1===i.mipmapCount&&(s.minFilter=1006),s.format=i.format,s.needsUpdate=!0,e&&e(s)}),i,n);return s}}),Ho.prototype=Object.assign(Object.create(Io.prototype),{constructor:Ho,load:function(t,e,i,n){var r=this,a=new Oi,s=new Do(this.manager);return s.setResponseType("arraybuffer"),s.setPath(this.path),s.load(t,(function(t){var i=r.parse(t);i&&(void 0!==i.image?a.image=i.image:void 0!==i.data&&(a.image.width=i.width,a.image.height=i.height,a.image.data=i.data),a.wrapS=void 0!==i.wrapS?i.wrapS:1001,a.wrapT=void 0!==i.wrapT?i.wrapT:1001,a.magFilter=void 0!==i.magFilter?i.magFilter:1006,a.minFilter=void 0!==i.minFilter?i.minFilter:1006,a.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.format&&(a.format=i.format),void 0!==i.type&&(a.type=i.type),void 0!==i.mipmaps&&(a.mipmaps=i.mipmaps,a.minFilter=1008),1===i.mipmapCount&&(a.minFilter=1006),a.needsUpdate=!0,e&&e(a,i))}),i,n),a}}),Bo.prototype=Object.assign(Object.create(Io.prototype),{constructor:Bo,load:function(t,e,i,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=Co.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;var s=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){s.removeEventListener("load",o,!1),s.removeEventListener("error",l,!1),Co.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){s.removeEventListener("load",o,!1),s.removeEventListener("error",l,!1),n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)}return s.addEventListener("load",o,!1),s.addEventListener("error",l,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(t),s.src=t,s}}),Uo.prototype=Object.assign(Object.create(Io.prototype),{constructor:Uo,load:function(t,e,i,n){var r=new en,a=new Bo(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var s=0;function o(i){a.load(t[i],(function(t){r.images[i]=t,6===++s&&(r.needsUpdate=!0,e&&e(r))}),void 0,n)}for(var l=0;l<t.length;++l)o(l);return r}}),Fo.prototype=Object.assign(Object.create(Io.prototype),{constructor:Fo,load:function(t,e,i,n){var r=new tt,a=new Bo(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(i){r.image=i;var n=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);r.format=n?1022:1023,r.needsUpdate=!0,void 0!==e&&e(r)}),i,n),r}}),Object.assign(Go.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var i=this.getUtoTmapping(t);return this.getPoint(i,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,i,n=[],r=this.getPoint(0),a=0;for(n.push(0),i=1;i<=t;i++)a+=(e=this.getPoint(i/t)).distanceTo(r),n.push(a),r=e;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var i,n=this.getLengths(),r=0,a=n.length;i=e||t*n[a-1];for(var s,o=0,l=a-1;o<=l;)if((s=n[r=Math.floor(o+(l-o)/2)]-i)<0)o=r+1;else{if(!(s>0)){l=r;break}l=r-1}if(n[r=l]===i)return r/(a-1);var c=n[r];return(r+(i-c)/(n[r+1]-c))/(a-1)},getTangent:function(t){var e=t-1e-4,i=t+1e-4;e<0&&(e=0),i>1&&(i=1);var n=this.getPoint(e);return this.getPoint(i).clone().sub(n).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var i,n,r,a=new ot,s=[],o=[],l=[],c=new ot,h=new ft;for(i=0;i<=t;i++)n=i/t,s[i]=this.getTangentAt(n),s[i].normalize();o[0]=new ot,l[0]=new ot;var u=Number.MAX_VALUE,d=Math.abs(s[0].x),p=Math.abs(s[0].y),m=Math.abs(s[0].z);for(d<=u&&(u=d,a.set(1,0,0)),p<=u&&(u=p,a.set(0,1,0)),m<=u&&a.set(0,0,1),c.crossVectors(s[0],a).normalize(),o[0].crossVectors(s[0],c),l[0].crossVectors(s[0],o[0]),i=1;i<=t;i++)o[i]=o[i-1].clone(),l[i]=l[i-1].clone(),c.crossVectors(s[i-1],s[i]),c.length()>Number.EPSILON&&(c.normalize(),r=Math.acos(Z.clamp(s[i-1].dot(s[i]),-1,1)),o[i].applyMatrix4(h.makeRotationAxis(c,r))),l[i].crossVectors(s[i],o[i]);if(!0===e)for(r=Math.acos(Z.clamp(o[0].dot(o[t]),-1,1)),r/=t,s[0].dot(c.crossVectors(o[0],o[t]))>0&&(r=-r),i=1;i<=t;i++)o[i].applyMatrix4(h.makeRotationAxis(s[i],r*i)),l[i].crossVectors(s[i],o[i]);return{tangents:s,normals:o,binormals:l}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),ko.prototype=Object.create(Go.prototype),ko.prototype.constructor=ko,ko.prototype.isEllipseCurve=!0,ko.prototype.getPoint=function(t,e){for(var i=e||new J,n=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=a?0:n),!0!==this.aClockwise||a||(r===n?r=-n:r-=n);var s=this.aStartAngle+t*r,o=this.aX+this.xRadius*Math.cos(s),l=this.aY+this.yRadius*Math.sin(s);if(0!==this.aRotation){var c=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=o-this.aX,d=l-this.aY;o=u*c-d*h+this.aX,l=u*h+d*c+this.aY}return i.set(o,l)},ko.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},ko.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},ko.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Vo.prototype=Object.create(ko.prototype),Vo.prototype.constructor=Vo,Vo.prototype.isArcCurve=!0;var Wo=new ot,qo=new jo,Xo=new jo,Yo=new jo;function Zo(t,e,i,n){Go.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=i||"centripetal",this.tension=n||.5}function Jo(t,e,i,n,r){var a=.5*(n-e),s=.5*(r-i),o=t*t;return(2*i-2*n+a+s)*(t*o)+(-3*i+3*n-2*a-s)*o+a*t+i}function Qo(t,e,i,n){return function(t,e){var i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function Ko(t,e,i,n,r){return function(t,e){var i=1-t;return i*i*i*e}(t,e)+function(t,e){var i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,r)}function $o(t,e,i,n){Go.call(this),this.type="CubicBezierCurve",this.v0=t||new J,this.v1=e||new J,this.v2=i||new J,this.v3=n||new J}function tl(t,e,i,n){Go.call(this),this.type="CubicBezierCurve3",this.v0=t||new ot,this.v1=e||new ot,this.v2=i||new ot,this.v3=n||new ot}function el(t,e){Go.call(this),this.type="LineCurve",this.v1=t||new J,this.v2=e||new J}function il(t,e){Go.call(this),this.type="LineCurve3",this.v1=t||new ot,this.v2=e||new ot}function nl(t,e,i){Go.call(this),this.type="QuadraticBezierCurve",this.v0=t||new J,this.v1=e||new J,this.v2=i||new J}function rl(t,e,i){Go.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new ot,this.v1=e||new ot,this.v2=i||new ot}function al(t){Go.call(this),this.type="SplineCurve",this.points=t||[]}Zo.prototype=Object.create(Go.prototype),Zo.prototype.constructor=Zo,Zo.prototype.isCatmullRomCurve3=!0,Zo.prototype.getPoint=function(t,e){var i,n,r,a,s=e||new ot,o=this.points,l=o.length,c=(l-(this.closed?0:1))*t,h=Math.floor(c),u=c-h;if(this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/l)+1)*l:0===u&&h===l-1&&(h=l-2,u=1),this.closed||h>0?i=o[(h-1)%l]:(Wo.subVectors(o[0],o[1]).add(o[0]),i=Wo),n=o[h%l],r=o[(h+1)%l],this.closed||h+2<l?a=o[(h+2)%l]:(Wo.subVectors(o[l-1],o[l-2]).add(o[l-1]),a=Wo),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(i.distanceToSquared(n),d),m=Math.pow(n.distanceToSquared(r),d),f=Math.pow(r.distanceToSquared(a),d);m<1e-4&&(m=1),p<1e-4&&(p=m),f<1e-4&&(f=m),qo.initNonuniformCatmullRom(i.x,n.x,r.x,a.x,p,m,f),Xo.initNonuniformCatmullRom(i.y,n.y,r.y,a.y,p,m,f),Yo.initNonuniformCatmullRom(i.z,n.z,r.z,a.z,p,m,f)}else"catmullrom"===this.curveType&&(qo.initCatmullRom(i.x,n.x,r.x,a.x,this.tension),Xo.initCatmullRom(i.y,n.y,r.y,a.y,this.tension),Yo.initCatmullRom(i.z,n.z,r.z,a.z,this.tension));return s.set(qo.calc(u),Xo.calc(u),Yo.calc(u)),s},Zo.prototype.copy=function(t){Go.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Zo.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},Zo.prototype.fromJSON=function(t){Go.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new ot).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},$o.prototype=Object.create(Go.prototype),$o.prototype.constructor=$o,$o.prototype.isCubicBezierCurve=!0,$o.prototype.getPoint=function(t,e){var i=e||new J,n=this.v0,r=this.v1,a=this.v2,s=this.v3;return i.set(Ko(t,n.x,r.x,a.x,s.x),Ko(t,n.y,r.y,a.y,s.y)),i},$o.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},$o.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},$o.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},tl.prototype=Object.create(Go.prototype),tl.prototype.constructor=tl,tl.prototype.isCubicBezierCurve3=!0,tl.prototype.getPoint=function(t,e){var i=e||new ot,n=this.v0,r=this.v1,a=this.v2,s=this.v3;return i.set(Ko(t,n.x,r.x,a.x,s.x),Ko(t,n.y,r.y,a.y,s.y),Ko(t,n.z,r.z,a.z,s.z)),i},tl.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},tl.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},tl.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},el.prototype=Object.create(Go.prototype),el.prototype.constructor=el,el.prototype.isLineCurve=!0,el.prototype.getPoint=function(t,e){var i=e||new J;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},el.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},el.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},el.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},el.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},el.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},il.prototype=Object.create(Go.prototype),il.prototype.constructor=il,il.prototype.isLineCurve3=!0,il.prototype.getPoint=function(t,e){var i=e||new ot;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i},il.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},il.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},il.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},il.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},nl.prototype=Object.create(Go.prototype),nl.prototype.constructor=nl,nl.prototype.isQuadraticBezierCurve=!0,nl.prototype.getPoint=function(t,e){var i=e||new J,n=this.v0,r=this.v1,a=this.v2;return i.set(Qo(t,n.x,r.x,a.x),Qo(t,n.y,r.y,a.y)),i},nl.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},nl.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},nl.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},rl.prototype=Object.create(Go.prototype),rl.prototype.constructor=rl,rl.prototype.isQuadraticBezierCurve3=!0,rl.prototype.getPoint=function(t,e){var i=e||new ot,n=this.v0,r=this.v1,a=this.v2;return i.set(Qo(t,n.x,r.x,a.x),Qo(t,n.y,r.y,a.y),Qo(t,n.z,r.z,a.z)),i},rl.prototype.copy=function(t){return Go.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},rl.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},rl.prototype.fromJSON=function(t){return Go.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},al.prototype=Object.create(Go.prototype),al.prototype.constructor=al,al.prototype.isSplineCurve=!0,al.prototype.getPoint=function(t,e){var i=e||new J,n=this.points,r=(n.length-1)*t,a=Math.floor(r),s=r-a,o=n[0===a?a:a-1],l=n[a],c=n[a>n.length-2?n.length-1:a+1],h=n[a>n.length-3?n.length-1:a+2];return i.set(Jo(s,o.x,l.x,c.x,h.x),Jo(s,o.y,l.y,c.y,h.y)),i},al.prototype.copy=function(t){Go.prototype.copy.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push(n.clone())}return this},al.prototype.toJSON=function(){var t=Go.prototype.toJSON.call(this);t.points=[];for(var e=0,i=this.points.length;e<i;e++){var n=this.points[e];t.points.push(n.toArray())}return t},al.prototype.fromJSON=function(t){Go.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,i=t.points.length;e<i;e++){var n=t.points[e];this.points.push((new J).fromArray(n))}return this};var sl=Object.freeze({__proto__:null,ArcCurve:Vo,CatmullRomCurve3:Zo,CubicBezierCurve:$o,CubicBezierCurve3:tl,EllipseCurve:ko,LineCurve:el,LineCurve3:il,QuadraticBezierCurve:nl,QuadraticBezierCurve3:rl,SplineCurve:al});function ol(){Go.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function ll(t){ol.call(this),this.type="Path",this.currentPoint=new J,t&&this.setFromPoints(t)}function cl(t){ll.call(this,t),this.uuid=Z.generateUUID(),this.type="Shape",this.holes=[]}function hl(t,e){Ot.call(this),this.type="Light",this.color=new Se(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function ul(t,e,i){hl.call(this,t,i),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Ot.DefaultUp),this.updateMatrix(),this.groundColor=new Se(e)}function dl(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new J(512,512),this.map=null,this.mapPass=null,this.matrix=new ft,this._frustum=new zi,this._frameExtents=new J(1,1),this._viewportCount=1,this._viewports=[new et(0,0,1,1)]}function pl(){dl.call(this,new Pi(50,1,.5,500))}function ml(t,e,i,n,r,a){hl.call(this,t,e),this.type="SpotLight",this.position.copy(Ot.DefaultUp),this.updateMatrix(),this.target=new Ot,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==i?i:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==a?a:1,this.shadow=new pl}function fl(){dl.call(this,new Pi(90,1,.5,500)),this._frameExtents=new J(4,2),this._viewportCount=6,this._viewports=[new et(2,1,1,1),new et(0,1,1,1),new et(3,1,1,1),new et(1,1,1,1),new et(3,0,1,1),new et(1,0,1,1)],this._cubeDirections=[new ot(1,0,0),new ot(-1,0,0),new ot(0,0,1),new ot(0,0,-1),new ot(0,1,0),new ot(0,-1,0)],this._cubeUps=[new ot(0,1,0),new ot(0,1,0),new ot(0,1,0),new ot(0,1,0),new ot(0,0,1),new ot(0,0,-1)]}function vl(t,e,i,n){hl.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==i?i:0,this.decay=void 0!==n?n:1,this.shadow=new fl}function gl(t,e,i,n,r,a){Ci.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==i?i:1,this.bottom=void 0!==n?n:-1,this.near=void 0!==r?r:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function yl(){dl.call(this,new gl(-5,5,5,-5,.5,500))}function xl(t,e){hl.call(this,t,e),this.type="DirectionalLight",this.position.copy(Ot.DefaultUp),this.updateMatrix(),this.target=new Ot,this.shadow=new yl}function wl(t,e){hl.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function bl(t,e,i,n){hl.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==i?i:10,this.height=void 0!==n?n:10}function _l(t){Io.call(this,t),this.textures={}}ol.prototype=Object.assign(Object.create(Go.prototype),{constructor:ol,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new el(e,t))},getPoint:function(t){for(var e=t*this.getLength(),i=this.getCurveLengths(),n=0;n<i.length;){if(i[n]>=e){var r=i[n]-e,a=this.curves[n],s=a.getLength(),o=0===s?0:1-r/s;return a.getPointAt(o)}n++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,i=[],n=0,r=this.curves;n<r.length;n++)for(var a=r[n],s=a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t,o=a.getPoints(s),l=0;l<o.length;l++){var c=o[l];e&&e.equals(c)||(i.push(c),e=c)}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i},copy:function(t){Go.prototype.copy.call(this,t),this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=Go.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,i=this.curves.length;e<i;e++){var n=this.curves[e];t.curves.push(n.toJSON())}return t},fromJSON:function(t){Go.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,i=t.curves.length;e<i;e++){var n=t.curves[e];this.curves.push((new sl[n.type]).fromJSON(n))}return this}}),ll.prototype=Object.assign(Object.create(ol.prototype),{constructor:ll,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this},moveTo:function(t,e){return this.currentPoint.set(t,e),this},lineTo:function(t,e){var i=new el(this.currentPoint.clone(),new J(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this},quadraticCurveTo:function(t,e,i,n){var r=new nl(this.currentPoint.clone(),new J(t,e),new J(i,n));return this.curves.push(r),this.currentPoint.set(i,n),this},bezierCurveTo:function(t,e,i,n,r,a){var s=new $o(this.currentPoint.clone(),new J(t,e),new J(i,n),new J(r,a));return this.curves.push(s),this.currentPoint.set(r,a),this},splineThru:function(t){var e=new al([this.currentPoint.clone()].concat(t));return this.curves.push(e),this.currentPoint.copy(t[t.length-1]),this},arc:function(t,e,i,n,r,a){var s=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+s,e+o,i,n,r,a),this},absarc:function(t,e,i,n,r,a){return this.absellipse(t,e,i,i,n,r,a),this},ellipse:function(t,e,i,n,r,a,s,o){var l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,i,n,r,a,s,o),this},absellipse:function(t,e,i,n,r,a,s,o){var l=new ko(t,e,i,n,r,a,s,o);if(this.curves.length>0){var c=l.getPoint(0);c.equals(this.currentPoint)||this.lineTo(c.x,c.y)}this.curves.push(l);var h=l.getPoint(1);return this.currentPoint.copy(h),this},copy:function(t){return ol.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=ol.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return ol.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),cl.prototype=Object.assign(Object.create(ll.prototype),{constructor:cl,getPointsHoles:function(t){for(var e=[],i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){ll.prototype.copy.call(this,t),this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push(n.clone())}return this},toJSON:function(){var t=ll.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,i=this.holes.length;e<i;e++){var n=this.holes[e];t.holes.push(n.toJSON())}return t},fromJSON:function(t){ll.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,i=t.holes.length;e<i;e++){var n=t.holes[e];this.holes.push((new ll).fromJSON(n))}return this}}),hl.prototype=Object.assign(Object.create(Ot.prototype),{constructor:hl,isLight:!0,copy:function(t){return Ot.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Ot.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),ul.prototype=Object.assign(Object.create(hl.prototype),{constructor:ul,isHemisphereLight:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(dl.prototype,{_projScreenMatrix:new ft,_lightPositionWorld:new ot,_lookTarget:new ot,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(t){var e=this.camera,i=this.matrix,n=this._projScreenMatrix,r=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(t.matrixWorld),e.position.copy(a),r.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(r),e.updateMatrixWorld(),n.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(n),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(e.projectionMatrix),i.multiply(e.matrixWorldInverse)},getViewport:function(t){return this._viewports[t]},getFrameExtents:function(){return this._frameExtents},copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),pl.prototype=Object.assign(Object.create(dl.prototype),{constructor:pl,isSpotLightShadow:!0,updateMatrices:function(t){var e=this.camera,i=2*Z.RAD2DEG*t.angle,n=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;i===e.fov&&n===e.aspect&&r===e.far||(e.fov=i,e.aspect=n,e.far=r,e.updateProjectionMatrix()),dl.prototype.updateMatrices.call(this,t)}}),ml.prototype=Object.assign(Object.create(hl.prototype),{constructor:ml,isSpotLight:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),fl.prototype=Object.assign(Object.create(dl.prototype),{constructor:fl,isPointLightShadow:!0,updateMatrices:function(t,e){void 0===e&&(e=0);var i=this.camera,n=this.matrix,r=this._lightPositionWorld,a=this._lookTarget,s=this._projScreenMatrix;r.setFromMatrixPosition(t.matrixWorld),i.position.copy(r),a.copy(i.position),a.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(a),i.updateMatrixWorld(),n.makeTranslation(-r.x,-r.y,-r.z),s.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(s)}}),vl.prototype=Object.assign(Object.create(hl.prototype),{constructor:vl,isPointLight:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),gl.prototype=Object.assign(Object.create(Ci.prototype),{constructor:gl,isOrthographicCamera:!0,copy:function(t,e){return Ci.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,i,n,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2,r=i-t,a=i+t,s=n+e,o=n-e;if(null!==this.view&&this.view.enabled){var l=(this.right-this.left)/this.view.fullWidth/this.zoom,c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;a=(r+=l*this.view.offsetX)+l*this.view.width,o=(s-=c*this.view.offsetY)-c*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Ot.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),yl.prototype=Object.assign(Object.create(dl.prototype),{constructor:yl,isDirectionalLightShadow:!0,updateMatrices:function(t){dl.prototype.updateMatrices.call(this,t)}}),xl.prototype=Object.assign(Object.create(hl.prototype),{constructor:xl,isDirectionalLight:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),wl.prototype=Object.assign(Object.create(hl.prototype),{constructor:wl,isAmbientLight:!0}),bl.prototype=Object.assign(Object.create(hl.prototype),{constructor:bl,isRectAreaLight:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=hl.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),_l.prototype=Object.assign(Object.create(Io.prototype),{constructor:_l,load:function(t,e,i,n){var r=this,a=new Do(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),i,n)},parse:function(t){var e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var n=new po[t.type];if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.sheen&&(n.sheen=(new Se).setHex(t.sheen)),void 0!==t.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&n.specular.setHex(t.specular),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearcoat&&(n.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(n.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(n.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(n.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(n.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(n.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(n.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(n.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(n.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(n.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(n.skinning=t.skinning),void 0!==t.morphTargets&&(n.morphTargets=t.morphTargets),void 0!==t.morphNormals&&(n.morphNormals=t.morphNormals),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.vertexTangents&&(n.vertexTangents=t.vertexTangents),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.toneMapped&&(n.toneMapped=t.toneMapped),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?n.vertexColors=t.vertexColors>0:n.vertexColors=t.vertexColors),void 0!==t.uniforms)for(var r in t.uniforms){var a=t.uniforms[r];switch(n.uniforms[r]={},a.type){case"t":n.uniforms[r].value=i(a.value);break;case"c":n.uniforms[r].value=(new Se).setHex(a.value);break;case"v2":n.uniforms[r].value=(new J).fromArray(a.value);break;case"v3":n.uniforms[r].value=(new ot).fromArray(a.value);break;case"v4":n.uniforms[r].value=(new et).fromArray(a.value);break;case"m3":n.uniforms[r].value=(new Q).fromArray(a.value);case"m4":n.uniforms[r].value=(new ft).fromArray(a.value);break;default:n.uniforms[r].value=a.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(var s in t.extensions)n.extensions[s]=t.extensions[s];if(void 0!==t.shading&&(n.flatShading=1===t.shading),void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.matcap&&(n.matcap=i(t.matcap)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap)),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){var o=t.normalScale;!1===Array.isArray(o)&&(o=[o,o]),n.normalScale=(new J).fromArray(o)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(n.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),void 0!==t.clearcoatMap&&(n.clearcoatMap=i(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(n.clearcoatRoughnessMap=i(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(n.clearcoatNormalMap=i(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(n.clearcoatNormalScale=(new J).fromArray(t.clearcoatNormalScale)),n},setTextures:function(t){return this.textures=t,this}});var Ml=function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)};function Sl(){Ke.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function El(t,e,i,n){"number"==typeof i&&(n=i,i=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Oe.call(this,t,e,i),this.meshPerAttribute=n||1}function Tl(t){Io.call(this,t)}Sl.prototype=Object.assign(Object.create(Ke.prototype),{constructor:Sl,isInstancedBufferGeometry:!0,copy:function(t){return Ke.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t=Ke.prototype.toJSON.call(this);return t.maxInstancedCount=this.maxInstancedCount,t.isInstancedBufferGeometry=!0,t}}),El.prototype=Object.assign(Object.create(Oe.prototype),{constructor:El,isInstancedBufferAttribute:!0,copy:function(t){return Oe.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this},toJSON:function(){var t=Oe.prototype.toJSON.call(this);return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}),Tl.prototype=Object.assign(Object.create(Io.prototype),{constructor:Tl,load:function(t,e,i,n){var r=this,a=new Do(r.manager);a.setPath(r.path),a.load(t,(function(t){e(r.parse(JSON.parse(t)))}),i,n)},parse:function(t){var e=t.isInstancedBufferGeometry?new Sl:new Ke,i=t.data.index;if(void 0!==i){var n=new Al[i.type](i.array);e.setIndex(new Oe(n,1))}var r=t.data.attributes;for(var a in r){var s=r[a],o=(n=new Al[s.type](s.array),new(s.isInstancedBufferAttribute?El:Oe)(n,s.itemSize,s.normalized));void 0!==s.name&&(o.name=s.name),e.setAttribute(a,o)}var l=t.data.morphAttributes;if(l)for(var a in l){for(var c=l[a],h=[],u=0,d=c.length;u<d;u++){s=c[u],o=new Oe(n=new Al[s.type](s.array),s.itemSize,s.normalized);void 0!==s.name&&(o.name=s.name),h.push(o)}e.morphAttributes[a]=h}t.data.morphTargetsRelative&&(e.morphTargetsRelative=!0);var p=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==p){u=0;for(var m=p.length;u!==m;++u){var f=p[u];e.addGroup(f.start,f.count,f.materialIndex)}}var v=t.data.boundingSphere;if(void 0!==v){var g=new ot;void 0!==v.center&&g.fromArray(v.center),e.boundingSphere=new Qt(g,v.radius)}return t.name&&(e.name=t.name),t.userData&&(e.userData=t.userData),e}});var Al={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Ll(t){Io.call(this,t)}Ll.prototype=Object.assign(Object.create(Io.prototype),{constructor:Ll,load:function(t,e,i,n){var r=this,a=""===this.path?Ml(t):this.path;this.resourcePath=this.resourcePath||a;var s=new Do(r.manager);s.setPath(this.path),s.load(t,(function(i){var a=null;try{a=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var s=a.metadata;void 0!==s&&void 0!==s.type&&"geometry"!==s.type.toLowerCase()?r.parse(a,e):console.error("THREE.ObjectLoader: Can't load "+t)}),i,n)},parse:function(t,e){var i=this.parseShape(t.shapes),n=this.parseGeometries(t.geometries,i),r=this.parseImages(t.images,(function(){void 0!==e&&e(o)})),a=this.parseTextures(t.textures,r),s=this.parseMaterials(t.materials,a),o=this.parseObject(t.object,n,s);return t.animations&&(o.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(o),o},parseShape:function(t){var e={};if(void 0!==t)for(var i=0,n=t.length;i<n;i++){var r=(new cl).fromJSON(t[i]);e[r.uuid]=r}return e},parseGeometries:function(t,e){var i={};if(void 0!==t)for(var n=new Tl,r=0,a=t.length;r<a;r++){var s,o=t[r];switch(o.type){case"PlaneGeometry":case"PlaneBufferGeometry":s=new eo[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":s=new eo[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":s=new eo[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":s=new eo[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":s=new eo[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":s=new eo[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":s=new eo[o.type](o.radius,o.detail);break;case"RingGeometry":case"RingBufferGeometry":s=new eo[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":s=new eo[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":s=new eo[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case"TubeGeometry":case"TubeBufferGeometry":s=new eo[o.type]((new sl[o.path.type]).fromJSON(o.path),o.tubularSegments,o.radius,o.radialSegments,o.closed);break;case"LatheGeometry":case"LatheBufferGeometry":s=new eo[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":s=new eo[o.type](o.vertices,o.indices,o.radius,o.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var l=[],c=0,h=o.shapes.length;c<h;c++){var u=e[o.shapes[c]];l.push(u)}s=new eo[o.type](l,o.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(l=[],c=0,h=o.shapes.length;c<h;c++){u=e[o.shapes[c]];l.push(u)}var d=o.options.extrudePath;void 0!==d&&(o.options.extrudePath=(new sl[d.type]).fromJSON(d)),s=new eo[o.type](l,o.options);break;case"BufferGeometry":case"InstancedBufferGeometry":s=n.parse(o);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+o.type+'"');continue}s.uuid=o.uuid,void 0!==o.name&&(s.name=o.name),!0===s.isBufferGeometry&&void 0!==o.userData&&(s.userData=o.userData),i[o.uuid]=s}return i},parseMaterials:function(t,e){var i={},n={};if(void 0!==t){var r=new _l;r.setTextures(e);for(var a=0,s=t.length;a<s;a++){var o=t[a];if("MultiMaterial"===o.type){for(var l=[],c=0;c<o.materials.length;c++){var h=o.materials[c];void 0===i[h.uuid]&&(i[h.uuid]=r.parse(h)),l.push(i[h.uuid])}n[o.uuid]=l}else void 0===i[o.uuid]&&(i[o.uuid]=r.parse(o)),n[o.uuid]=i[o.uuid]}}return n},parseAnimations:function(t){for(var e=[],i=0;i<t.length;i++){var n=t[i],r=Ao.parse(n);void 0!==n.uuid&&(r.uuid=n.uuid),e.push(r)}return e},parseImages:function(t,e){var i=this,n={};function r(t){return i.manager.itemStart(t),a.load(t,(function(){i.manager.itemEnd(t)}),void 0,(function(){i.manager.itemError(t),i.manager.itemEnd(t)}))}if(void 0!==t&&t.length>0){var a=new Bo(new Po(e));a.setCrossOrigin(this.crossOrigin);for(var s=0,o=t.length;s<o;s++){var l=t[s],c=l.url;if(Array.isArray(c)){n[l.uuid]=[];for(var h=0,u=c.length;h<u;h++){var d=c[h],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:i.resourcePath+d;n[l.uuid].push(r(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:i.resourcePath+l.url;n[l.uuid]=r(p)}}}return n},parseTextures:function(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var n={};if(void 0!==t)for(var r=0,a=t.length;r<a;r++){var s,o=t[r];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===e[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image),(s=Array.isArray(e[o.image])?new en(e[o.image]):new tt(e[o.image])).needsUpdate=!0,s.uuid=o.uuid,void 0!==o.name&&(s.name=o.name),void 0!==o.mapping&&(s.mapping=i(o.mapping,Pl)),void 0!==o.offset&&s.offset.fromArray(o.offset),void 0!==o.repeat&&s.repeat.fromArray(o.repeat),void 0!==o.center&&s.center.fromArray(o.center),void 0!==o.rotation&&(s.rotation=o.rotation),void 0!==o.wrap&&(s.wrapS=i(o.wrap[0],Rl),s.wrapT=i(o.wrap[1],Rl)),void 0!==o.format&&(s.format=o.format),void 0!==o.type&&(s.type=o.type),void 0!==o.encoding&&(s.encoding=o.encoding),void 0!==o.minFilter&&(s.minFilter=i(o.minFilter,Il)),void 0!==o.magFilter&&(s.magFilter=i(o.magFilter,Il)),void 0!==o.anisotropy&&(s.anisotropy=o.anisotropy),void 0!==o.flipY&&(s.flipY=o.flipY),void 0!==o.premultiplyAlpha&&(s.premultiplyAlpha=o.premultiplyAlpha),void 0!==o.unpackAlignment&&(s.unpackAlignment=o.unpackAlignment),n[o.uuid]=s}return n},parseObject:function(t,e,i){var n;function r(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],n=0,r=t.length;n<r;n++){var a=t[n];void 0===i[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),e.push(i[a])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}switch(t.type){case"Scene":n=new Dt,void 0!==t.background&&Number.isInteger(t.background)&&(n.background=new Se(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?n.fog=new kr(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(n.fog=new Gr(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":n=new Pi(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(n.focus=t.focus),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.filmGauge&&(n.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(n.filmOffset=t.filmOffset),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"OrthographicCamera":n=new gl(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(n.zoom=t.zoom),void 0!==t.view&&(n.view=Object.assign({},t.view));break;case"AmbientLight":n=new wl(t.color,t.intensity);break;case"DirectionalLight":n=new xl(t.color,t.intensity);break;case"PointLight":n=new vl(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":n=new bl(t.color,t.intensity,t.width,t.height);break;case"SpotLight":n=new ml(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":n=new ul(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":n=new vi(s=r(t.geometry),o=a(t.material));break;case"InstancedMesh":var s=r(t.geometry),o=a(t.material),l=t.count,c=t.instanceMatrix;(n=new wa(s,o,l)).instanceMatrix=new Oe(new Float32Array(c.array),16);break;case"LOD":n=new ha;break;case"Line":n=new Aa(r(t.geometry),a(t.material),t.mode);break;case"LineLoop":n=new Ra(r(t.geometry),a(t.material));break;case"LineSegments":n=new Pa(r(t.geometry),a(t.material));break;case"PointCloud":case"Points":n=new Ha(r(t.geometry),a(t.material));break;case"Sprite":n=new sa(a(t.material));break;case"Group":n=new Br;break;default:n=new Ot}if(n.uuid=t.uuid,void 0!==t.name&&(n.name=t.name),void 0!==t.matrix?(n.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(n.matrixAutoUpdate=t.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==t.position&&n.position.fromArray(t.position),void 0!==t.rotation&&n.rotation.fromArray(t.rotation),void 0!==t.quaternion&&n.quaternion.fromArray(t.quaternion),void 0!==t.scale&&n.scale.fromArray(t.scale)),void 0!==t.castShadow&&(n.castShadow=t.castShadow),void 0!==t.receiveShadow&&(n.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(n.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(n.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&n.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(n.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.frustumCulled&&(n.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(n.renderOrder=t.renderOrder),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.layers&&(n.layers.mask=t.layers),void 0!==t.children)for(var h=t.children,u=0;u<h.length;u++)n.add(this.parseObject(h[u],e,i));if("LOD"===t.type){void 0!==t.autoUpdate&&(n.autoUpdate=t.autoUpdate);for(var d=t.levels,p=0;p<d.length;p++){var m=d[p],f=n.getObjectByProperty("uuid",m.object);void 0!==f&&n.addLevel(f,m.distance)}}return n}});var Cl,Pl={UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},Rl={RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},Il={NearestFilter:1003,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:1006,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:1008};function Ol(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Io.call(this,t),this.options=void 0}function Dl(){this.type="ShapePath",this.color=new Se,this.subPaths=[],this.currentPath=null}function Nl(t){this.type="Font",this.data=t}function zl(t,e,i,n,r){var a=r.glyphs[t]||r.glyphs["?"];if(a){var s,o,l,c,h,u,d,p,m=new Dl;if(a.o)for(var f=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),v=0,g=f.length;v<g;){switch(f[v++]){case"m":s=f[v++]*e+i,o=f[v++]*e+n,m.moveTo(s,o);break;case"l":s=f[v++]*e+i,o=f[v++]*e+n,m.lineTo(s,o);break;case"q":l=f[v++]*e+i,c=f[v++]*e+n,h=f[v++]*e+i,u=f[v++]*e+n,m.quadraticCurveTo(h,u,l,c);break;case"b":l=f[v++]*e+i,c=f[v++]*e+n,h=f[v++]*e+i,u=f[v++]*e+n,d=f[v++]*e+i,p=f[v++]*e+n,m.bezierCurveTo(h,u,d,p,l,c)}}return{offsetX:a.ha*e,path:m}}console.error('THREE.Font: character "'+t+'" does not exists in font family '+r.familyName+".")}function Hl(t){Io.call(this,t)}Ol.prototype=Object.assign(Object.create(Io.prototype),{constructor:Ol,setOptions:function(t){return this.options=t,this},load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=Co.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;fetch(t).then((function(t){return t.blob()})).then((function(t){return void 0===r.options?createImageBitmap(t):createImageBitmap(t,r.options)})).then((function(i){Co.add(t,i),e&&e(i),r.manager.itemEnd(t)})).catch((function(e){n&&n(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}),Object.assign(Dl.prototype,{moveTo:function(t,e){return this.currentPath=new ll,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this},lineTo:function(t,e){return this.currentPath.lineTo(t,e),this},quadraticCurveTo:function(t,e,i,n){return this.currentPath.quadraticCurveTo(t,e,i,n),this},bezierCurveTo:function(t,e,i,n,r,a){return this.currentPath.bezierCurveTo(t,e,i,n,r,a),this},splineThru:function(t){return this.currentPath.splineThru(t),this},toShapes:function(t,e){function i(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i],a=new cl;a.curves=r.curves,e.push(a)}return e}function n(t,e){for(var i=e.length,n=!1,r=i-1,a=0;a<i;r=a++){var s=e[r],o=e[a],l=o.x-s.x,c=o.y-s.y;if(Math.abs(c)>Number.EPSILON){if(c<0&&(s=e[a],l=-l,o=e[r],c=-c),t.y<s.y||t.y>o.y)continue;if(t.y===s.y){if(t.x===s.x)return!0}else{var h=c*(t.x-s.x)-l*(t.y-s.y);if(0===h)return!0;if(h<0)continue;n=!n}}else{if(t.y!==s.y)continue;if(o.x<=t.x&&t.x<=s.x||s.x<=t.x&&t.x<=o.x)return!0}}return n}var r=Ps.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return i(a);var s,o,l,c=[];if(1===a.length)return o=a[0],(l=new cl).curves=o.curves,c.push(l),c;var h=!r(a[0].getPoints());h=t?!h:h;var u,d,p=[],m=[],f=[],v=0;m[v]=void 0,f[v]=[];for(var g=0,y=a.length;g<y;g++)s=r(u=(o=a[g]).getPoints()),(s=t?!s:s)?(!h&&m[v]&&v++,m[v]={s:new cl,p:u},m[v].s.curves=o.curves,h&&v++,f[v]=[]):f[v].push({h:o,p:u[0]});if(!m[0])return i(a);if(m.length>1){for(var x=!1,w=[],b=0,_=m.length;b<_;b++)p[b]=[];for(b=0,_=m.length;b<_;b++)for(var M=f[b],S=0;S<M.length;S++){for(var E=M[S],T=!0,A=0;A<m.length;A++)n(E.p,m[A].p)&&(b!==A&&w.push({froms:b,tos:A,hole:S}),T?(T=!1,p[A].push(E)):x=!0);T&&p[b].push(E)}w.length>0&&(x||(f=p))}g=0;for(var L=m.length;g<L;g++){l=m[g].s,c.push(l);for(var C=0,P=(d=f[g]).length;C<P;C++)l.holes.push(d[C].h)}return c}}),Object.assign(Nl.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var i=[],n=function(t,e,i){for(var n=Array.from?Array.from(t):String(t).split(""),r=e/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*r,s=[],o=0,l=0,c=0;c<n.length;c++){var h=n[c];if("\n"===h)o=0,l-=a;else{var u=zl(h,r,o,l,i);o+=u.offsetX,s.push(u.path)}}return s}(t,e,this.data),r=0,a=n.length;r<a;r++)Array.prototype.push.apply(i,n[r].toShapes());return i}}),Hl.prototype=Object.assign(Object.create(Io.prototype),{constructor:Hl,load:function(t,e,i,n){var r=this,a=new Do(this.manager);a.setPath(this.path),a.load(t,(function(t){var i;try{i=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),i=JSON.parse(t.substring(65,t.length-2))}var n=r.parse(i);e&&e(n)}),i,n)},parse:function(t){return new Nl(t)}});var Bl=function(){return void 0===Cl&&(Cl=new(window.AudioContext||window.webkitAudioContext)),Cl};function Ul(t){Io.call(this,t)}function Fl(){this.coefficients=[];for(var t=0;t<9;t++)this.coefficients.push(new ot)}function Gl(t,e){hl.call(this,void 0,e),this.sh=void 0!==t?t:new Fl}function kl(t,e,i){Gl.call(this,void 0,i);var n=(new Se).set(t),r=(new Se).set(e),a=new ot(n.r,n.g,n.b),s=new ot(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(s).multiplyScalar(o),this.sh.coefficients[1].copy(a).sub(s).multiplyScalar(l)}function Vl(t,e){Gl.call(this,void 0,e);var i=(new Se).set(t);this.sh.coefficients[0].set(i.r,i.g,i.b).multiplyScalar(2*Math.sqrt(Math.PI))}Ul.prototype=Object.assign(Object.create(Io.prototype),{constructor:Ul,load:function(t,e,i,n){var r=new Do(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.load(t,(function(t){var i=t.slice(0);Bl().decodeAudioData(i,(function(t){e(t)}))}),i,n)}}),Object.assign(Fl.prototype,{isSphericalHarmonics3:!0,set:function(t){for(var e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this},zero:function(){for(var t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this},getAt:function(t,e){var i=t.x,n=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScaledVector(a[1],.488603*n),e.addScaledVector(a[2],.488603*r),e.addScaledVector(a[3],.488603*i),e.addScaledVector(a[4],i*n*1.092548),e.addScaledVector(a[5],n*r*1.092548),e.addScaledVector(a[6],.315392*(3*r*r-1)),e.addScaledVector(a[7],i*r*1.092548),e.addScaledVector(a[8],.546274*(i*i-n*n)),e},getIrradianceAt:function(t,e){var i=t.x,n=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScaledVector(a[1],1.023328*n),e.addScaledVector(a[2],1.023328*r),e.addScaledVector(a[3],1.023328*i),e.addScaledVector(a[4],.858086*i*n),e.addScaledVector(a[5],.858086*n*r),e.addScaledVector(a[6],.743125*r*r-.247708),e.addScaledVector(a[7],.858086*i*r),e.addScaledVector(a[8],.429043*(i*i-n*n)),e},add:function(t){for(var e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this},addScaledSH:function(t,e){for(var i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this},scale:function(t){for(var e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this},lerp:function(t,e){for(var i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this},equals:function(t){for(var e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0},copy:function(t){return this.set(t.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(t,e){void 0===e&&(e=0);for(var i=this.coefficients,n=0;n<9;n++)i[n].fromArray(t,e+3*n);return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);for(var i=this.coefficients,n=0;n<9;n++)i[n].toArray(t,e+3*n);return t}}),Object.assign(Fl,{getBasisAt:function(t,e){var i=t.x,n=t.y,r=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*r,e[3]=.488603*i,e[4]=1.092548*i*n,e[5]=1.092548*n*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*i*r,e[8]=.546274*(i*i-n*n)}}),Gl.prototype=Object.assign(Object.create(hl.prototype),{constructor:Gl,isLightProbe:!0,copy:function(t){return hl.prototype.copy.call(this,t),this.sh.copy(t.sh),this.intensity=t.intensity,this},toJSON:function(t){return hl.prototype.toJSON.call(this,t)}}),kl.prototype=Object.assign(Object.create(Gl.prototype),{constructor:kl,isHemisphereLightProbe:!0,copy:function(t){return Gl.prototype.copy.call(this,t),this},toJSON:function(t){return Gl.prototype.toJSON.call(this,t)}}),Vl.prototype=Object.assign(Object.create(Gl.prototype),{constructor:Vl,isAmbientLightProbe:!0,copy:function(t){return Gl.prototype.copy.call(this,t),this},toJSON:function(t){return Gl.prototype.toJSON.call(this,t)}});var jl=new ft,Wl=new ft;function ql(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(function(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Pi,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Pi,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}.prototype,{update:function(t){var e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;var i,n,r=t.projectionMatrix.clone(),a=e.eyeSep/2,s=a*e.near/e.focus,o=e.near*Math.tan(Z.DEG2RAD*e.fov*.5)/e.zoom;Wl.elements[12]=-a,jl.elements[12]=a,i=-o*e.aspect+s,n=o*e.aspect+s,r.elements[0]=2*e.near/(n-i),r.elements[8]=(n+i)/(n-i),this.cameraL.projectionMatrix.copy(r),i=-o*e.aspect-s,n=o*e.aspect-s,r.elements[0]=2*e.near/(n-i),r.elements[8]=(n+i)/(n-i),this.cameraR.projectionMatrix.copy(r)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Wl),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(jl)}}),Object.assign(ql.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}});var Xl=new ot,Yl=new rt,Zl=new ot,Jl=new ot;function Ql(){Ot.call(this),this.type="AudioListener",this.context=Bl(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new ql}function Kl(t){Ot.call(this),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this._startedAt=0,this._pausedAt=0,this.filters=[]}Ql.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Ql,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(t){Ot.prototype.updateMatrixWorld.call(this,t);var e=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Xl,Yl,Zl),Jl.set(0,0,-1).applyQuaternion(Yl),e.positionX){var n=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(Xl.x,n),e.positionY.linearRampToValueAtTime(Xl.y,n),e.positionZ.linearRampToValueAtTime(Xl.z,n),e.forwardX.linearRampToValueAtTime(Jl.x,n),e.forwardY.linearRampToValueAtTime(Jl.y,n),e.forwardZ.linearRampToValueAtTime(Jl.z,n),e.upX.linearRampToValueAtTime(i.x,n),e.upY.linearRampToValueAtTime(i.y,n),e.upZ.linearRampToValueAtTime(i.z,n)}else e.setPosition(Xl.x,Xl.y,Xl.z),e.setOrientation(Jl.x,Jl.y,Jl.z,i.x,i.y,i.z)}}),Kl.prototype=Object.assign(Object.create(Ot.prototype),{constructor:Kl,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setMediaStreamSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(t){if(void 0===t&&(t=0),!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){this._startedAt=this.context.currentTime+t;var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._pausedAt+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},setDetune:function(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},setLoopStart:function(t){return this.loopStart=t,this},setLoopEnd:function(t){return this.loopEnd=t,this},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}});var $l=new ot,tc=new rt,ec=new ot,ic=new ot;function nc(t){Kl.call(this,t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function rc(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function ac(t,e,i){this.binding=t,this.valueSize=i;var n,r=Float64Array;switch(e){case"quaternion":n=this._slerp;break;case"string":case"bool":r=Array,n=this._select;break;default:n=this._lerp}this.buffer=new r(4*i),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}nc.prototype=Object.assign(Object.create(Kl.prototype),{constructor:nc,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this},updateMatrixWorld:function(t){if(Ot.prototype.updateMatrixWorld.call(this,t),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose($l,tc,ec),ic.set(0,0,1).applyQuaternion(tc);var e=this.panner;if(e.positionX){var i=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime($l.x,i),e.positionY.linearRampToValueAtTime($l.y,i),e.positionZ.linearRampToValueAtTime($l.z,i),e.orientationX.linearRampToValueAtTime(ic.x,i),e.orientationY.linearRampToValueAtTime(ic.y,i),e.orientationZ.linearRampToValueAtTime(ic.z,i)}else e.setPosition($l.x,$l.y,$l.z),e.setOrientation(ic.x,ic.y,ic.z)}}}),Object.assign(rc.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),i=0;i<e.length;i++)t+=e[i];return t/e.length}}),Object.assign(ac.prototype,{accumulate:function(t,e){var i=this.buffer,n=this.valueSize,r=t*n+n,a=this.cumulativeWeight;if(0===a){for(var s=0;s!==n;++s)i[r+s]=i[s];a=e}else{var o=e/(a+=e);this._mixBufferRegion(i,r,0,o,n)}this.cumulativeWeight=a},apply:function(t){var e=this.valueSize,i=this.buffer,n=t*e+e,r=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,r<1){var s=3*e;this._mixBufferRegion(i,n,s,1-r,e)}for(var o=e,l=e+e;o!==l;++o)if(i[o]!==i[o+e]){a.setValue(i,n);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,i=this.valueSize,n=3*i;t.getValue(e,n);for(var r=i,a=n;r!==a;++r)e[r]=e[n+r%i];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,i,n,r){if(n>=.5)for(var a=0;a!==r;++a)t[e+a]=t[i+a]},_slerp:function(t,e,i,n){rt.slerpFlat(t,e,t,e,t,i,n)},_lerp:function(t,e,i,n,r){for(var a=1-n,s=0;s!==r;++s){var o=e+s;t[o]=t[o]*a+t[i+s]*n}}});var sc=new RegExp("[\\[\\]\\.:\\/]","g"),oc="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",lc=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),cc=/(WCOD+)?/.source.replace("WCOD",oc),hc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),uc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),dc=new RegExp("^"+lc+cc+hc+uc+"$"),pc=["material","materials","bones"];function mc(t,e,i){var n=i||fc.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}function fc(t,e,i){this.path=e,this.parsedPath=i||fc.parseTrackName(e),this.node=fc.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function vc(t,e,i){this._mixer=t,this._clip=e,this._localRoot=i||null;for(var n=e.tracks,r=n.length,a=new Array(r),s={endingStart:2400,endingEnd:2400},o=0;o!==r;++o){var l=n[o].createInterpolant(null);a[o]=l,l.settings=s}this._interpolantSettings=s,this._interpolants=a,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function gc(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function yc(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function xc(t,e,i){Vr.call(this,t,e),this.meshPerAttribute=i||1}function wc(t,e,i,n){this.ray=new ae(t,e),this.near=i||0,this.far=n||1/0,this.camera=null,this.layers=new xt,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function bc(t,e){return t.distance-e.distance}function _c(t,e,i,n){if(t.layers.test(e.layers)&&t.raycast(e,i),!0===n)for(var r=t.children,a=0,s=r.length;a<s;a++)_c(r[a],e,i,!0)}Object.assign(mc.prototype,{getValue:function(t,e){this.bind();var i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)},setValue:function(t,e){for(var i=this._bindings,n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}}),Object.assign(fc,{Composite:mc,create:function(t,e,i){return t&&t.isAnimationObjectGroup?new fc.Composite(t,e,i):new fc(t,e,i)},sanitizeNodeName:function(t){return t.replace(/\s/g,"_").replace(sc,"")},parseTrackName:function(t){var e=dc.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){var r=i.nodeName.substring(n+1);-1!==pc.indexOf(r)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=r)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i},findNode:function(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){var n=function(t){for(var i=0;i<t.length;i++){var r=t[i];if(r.name===e||r.uuid===e)return r;var a=n(r.children);if(a)return a}return null},r=n(t.children);if(r)return r}return null}}),Object.assign(fc.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)t[e++]=i[n]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++]},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var i=this.resolvedProperty,n=0,r=i.length;n!==r;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,i=e.objectName,n=e.propertyName,r=e.propertyIndex;if(t||(t=fc.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(i){var a=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var s=0;s<t.length;s++)if(t[s].name===a){a=s;break}break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==a){if(void 0===t[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[a]}}var o=t[n];if(void 0!==o){var l=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?l=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate);var c=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(s=0;s<this.node.geometry.morphAttributes.position.length;s++)if(t.geometry.morphAttributes.position[s].name===r){r=s;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(s=0;s<this.node.geometry.morphTargets.length;s++)if(t.geometry.morphTargets[s].name===r){r=s;break}}}c=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=r}else void 0!==o.fromArray&&void 0!==o.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(c=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=n;this.getValue=this.GetterByBindingType[c],this.setValue=this.SetterByBindingTypeAndVersioning[c][l]}else{var h=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+n+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(fc.prototype,{_getValue_unbound:fc.prototype.getValue,_setValue_unbound:fc.prototype.setValue}),Object.assign(function(){this.uuid=Z.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._paths,a=this._parsedPaths,s=this._bindings,o=s.length,l=void 0,c=0,h=arguments.length;c!==h;++c){var u=arguments[c],d=u.uuid,p=n[d];if(void 0===p){p=e++,n[d]=p,t.push(u);for(var m=0,f=o;m!==f;++m)s[m].push(new fc(u,r[m],a[m]))}else if(p<i){l=t[p];var v=--i,g=t[v];n[g.uuid]=p,t[p]=g,n[d]=v,t[v]=u;for(m=0,f=o;m!==f;++m){var y=s[m],x=y[v],w=y[p];y[p]=x,void 0===w&&(w=new fc(u,r[m],a[m])),y[v]=w}}else t[p]!==l&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=i},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,i=this._indicesByUUID,n=this._bindings,r=n.length,a=0,s=arguments.length;a!==s;++a){var o=arguments[a],l=o.uuid,c=i[l];if(void 0!==c&&c>=e){var h=e++,u=t[h];i[u.uuid]=c,t[c]=u,i[l]=h,t[h]=o;for(var d=0,p=r;d!==p;++d){var m=n[d],f=m[h],v=m[c];m[c]=f,m[h]=v}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,i=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,a=r.length,s=0,o=arguments.length;s!==o;++s){var l=arguments[s],c=l.uuid,h=n[c];if(void 0!==h)if(delete n[c],h<i){var u=--i,d=t[u],p=t[y=--e];n[d.uuid]=h,t[h]=d,n[p.uuid]=u,t[u]=p,t.pop();for(var m=0,f=a;m!==f;++m){var v=(x=r[m])[u],g=x[y];x[h]=v,x[u]=g,x.pop()}}else{var y;n[(p=t[y=--e]).uuid]=h,t[h]=p,t.pop();for(m=0,f=a;m!==f;++m){var x;(x=r[m])[h]=x[y],x.pop()}}}this.nCachedObjects_=i},subscribe_:function(t,e){var i=this._bindingsIndicesByPath,n=i[t],r=this._bindings;if(void 0!==n)return r[n];var a=this._paths,s=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,h=new Array(l);n=r.length,i[t]=n,a.push(t),s.push(e),r.push(h);for(var u=c,d=o.length;u!==d;++u){var p=o[u];h[u]=new fc(p,t,e)}return h},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){var n=this._paths,r=this._parsedPaths,a=this._bindings,s=a.length-1,o=a[s];e[t[s]]=i,a[i]=o,a.pop(),r[i]=r[s],r.pop(),n[i]=n[s],n.pop()}}}),Object.assign(vc.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){var n=this._clip.duration,r=t._clip.duration,a=r/n,s=n/r;t.warp(1,a,e),this.warp(s,1,e)}return this},crossFadeTo:function(t,e,i){return t.crossFadeFrom(this,e,i)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,i){var n=this._mixer,r=n.time,a=this._timeScaleInterpolant,s=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+i,l[0]=t/s,l[1]=e/s,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,i,n){if(this.enabled){var r=this._startTime;if(null!==r){var a=(t-r)*i;if(a<0||0===i)return;this._startTime=null,e=i*a}e*=this._updateTimeScale(t);var s=this._updateTime(e),o=this._updateWeight(t);if(o>0)for(var l=this._interpolants,c=this._propertyBindings,h=0,u=l.length;h!==u;++h)l[h].evaluate(s),c[h].accumulate(n,o)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var i=this._weightInterpolant;if(null!==i){var n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var i=this._timeScaleInterpolant;if(null!==i)e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,i=this._clip.duration,n=this.loop,r=this._loopCount,a=2202===n;if(0===t)return-1===r?e:a&&1==(1&r)?i-e:e;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=i)e=i;else{if(!(e<0)){this.time=e;break t}e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),e>=i||e<0){var s=Math.floor(e/i);e-=i*s,r+=Math.abs(s);var o=this.repetitions-r;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?i:0,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===o){var l=t<0;this._setEndings(l,!l,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:s})}}else this.time=e;if(a&&1==(1&r))return i-e}return e},_setEndings:function(t,e,i){var n=this._interpolantSettings;i?(n.endingStart=2401,n.endingEnd=2401):(n.endingStart=t?this.zeroSlopeAtStart?2401:2400:2402,n.endingEnd=e?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(t,e,i){var n=this._mixer,r=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var s=a.parameterPositions,o=a.sampleValues;return s[0]=r,o[0]=e,s[1]=r+t,o[1]=i,this}}),gc.prototype=Object.assign(Object.create(W.prototype),{constructor:gc,_bindAction:function(t,e){var i=t._localRoot||this._root,n=t._clip.tracks,r=n.length,a=t._propertyBindings,s=t._interpolants,o=i.uuid,l=this._bindingsByRootAndName,c=l[o];void 0===c&&(c={},l[o]=c);for(var h=0;h!==r;++h){var u=n[h],d=u.name,p=c[d];if(void 0!==p)a[h]=p;else{if(void 0!==(p=a[h])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,o,d));continue}var m=e&&e._propertyBindings[h].binding.parsedPath;++(p=new ac(fc.create(i,d,m),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(p,o,d),a[h]=p}s[h].resultBuffer=p.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}for(var r=t._propertyBindings,a=0,s=r.length;a!==s;++a){var o=r[a];0==o.useCount++&&(this._lendBinding(o),o.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,i){var n=this._actions,r=this._actionsByClip,a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{var s=a.knownActions;t._byClipCacheIndex=s.length,s.push(t)}t._cacheIndex=n.length,n.push(t),a.actionByRoot[i]=t},_removeInactiveAction:function(t){var e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;var r=t._clip.uuid,a=this._actionsByClip,s=a[r],o=s.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null,delete s.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete a[r],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,i=0,n=e.length;i!==n;++i){var r=e[i];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(t){var e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackAction:function(t){var e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_addInactiveBinding:function(t,e,i){var n=this._bindingsByRootAndName,r=n[e],a=this._bindings;void 0===r&&(r={},n[e]=r),r[i]=t,t._cacheIndex=a.length,a.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,i=t.binding,n=i.rootNode.uuid,r=i.path,a=this._bindingsByRootAndName,s=a[n],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete s[r],0===Object.keys(s).length&&delete a[n]},_lendBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_takeBackBinding:function(t){var e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,r=e[n];t._cacheIndex=n,e[n]=t,r._cacheIndex=i,e[i]=r},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,i=t[e];return void 0===i&&((i=new go(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=i),i},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,r=e[n];t.__cacheIndex=n,e[n]=t,r.__cacheIndex=i,e[i]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var i=e||this._root,n=i.uuid,r="string"==typeof t?Ao.findByName(i,t):t,a=null!==r?r.uuid:t,s=this._actionsByClip[a],o=null;if(void 0!==s){var l=s.actionByRoot[n];if(void 0!==l)return l;o=s.knownActions[0],null===r&&(r=o._clip)}if(null===r)return null;var c=new vc(this,r,e);return this._bindAction(c,o),this._addInactiveAction(c,a,n),c},existingAction:function(t,e){var i=e||this._root,n=i.uuid,r="string"==typeof t?Ao.findByName(i,t):t,a=r?r.uuid:t,s=this._actionsByClip[a];return void 0!==s&&s.actionByRoot[n]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,i=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==e;++r)t[r].reset();for(r=0;r!==n;++r)i[r].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,i=this._nActiveActions,n=this.time+=t,r=Math.sign(t),a=this._accuIndex^=1,s=0;s!==i;++s){e[s]._update(n,t,r,a)}var o=this._bindings,l=this._nActiveBindings;for(s=0;s!==l;++s)o[s].apply(a);return this},setTime:function(t){this.time=0;for(var e=0;e<this._actions.length;e++)this._actions[e].time=0;return this.update(t)},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,i=t.uuid,n=this._actionsByClip,r=n[i];if(void 0!==r){for(var a=r.knownActions,s=0,o=a.length;s!==o;++s){var l=a[s];this._deactivateAction(l);var c=l._cacheIndex,h=e[e.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,h._cacheIndex=c,e[c]=h,e.pop(),this._removeInactiveBindingsForAction(l)}delete n[i]}},uncacheRoot:function(t){var e=t.uuid,i=this._actionsByClip;for(var n in i){var r=i[n].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var a=this._bindingsByRootAndName[e];if(void 0!==a)for(var s in a){var o=a[s];o.restoreOriginalState(),this._removeInactiveBinding(o)}},uncacheAction:function(t,e){var i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}),yc.prototype.clone=function(){return new yc(void 0===this.value.clone?this.value:this.value.clone())},xc.prototype=Object.assign(Object.create(Vr.prototype),{constructor:xc,isInstancedInterleavedBuffer:!0,copy:function(t){return Vr.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(wc.prototype,{set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,i){var n=i||[];return _c(t,this,n,e),n.sort(bc),n},intersectObjects:function(t,e,i){var n=i||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),n;for(var r=0,a=t.length;r<a;r++)_c(t[r],this,n,e);return n.sort(bc),n}}),Object.assign(function(t,e,i){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==i?i:0,this}.prototype,{set:function(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Z.clamp(e/this.radius,-1,1))),this}}),Object.assign(function(t,e,i){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==i?i:0,this}.prototype,{set:function(t,e,i){return this.radius=t,this.theta=e,this.y=i,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}});var Mc=new J;function Sc(t,e){this.min=void 0!==t?t:new J(1/0,1/0),this.max=void 0!==e?e:new J(-1/0,-1/0)}Object.assign(Sc.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var i=Mc.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new J),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new J),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new J),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new J),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return Mc.copy(t).clamp(this.min,this.max).sub(t).length()},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var Ec=new ot,Tc=new ot;function Ac(t,e){this.start=void 0!==t?t:new ot,this.end=void 0!==e?e:new ot}function Lc(t){Ot.call(this),this.material=t,this.render=function(){}}Object.assign(Ac.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new ot),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new ot),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new ot),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(t,e){Ec.subVectors(t,this.start),Tc.subVectors(this.end,this.start);var i=Tc.dot(Tc),n=Tc.dot(Ec)/i;return e&&(n=Z.clamp(n,0,1)),n},closestPointToPoint:function(t,e,i){var n=this.closestPointToPointParameter(t,e);return void 0===i&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),i=new ot),this.delta(i).multiplyScalar(n).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),Lc.prototype=Object.create(Ot.prototype),Lc.prototype.constructor=Lc,Lc.prototype.isImmediateRenderObject=!0;var Cc=new ot;function Pc(t,e){Ot.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var i=new Ke,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,a=1;r<32;r++,a++){var s=r/32*Math.PI*2,o=a/32*Math.PI*2;n.push(Math.cos(s),Math.sin(s),1,Math.cos(o),Math.sin(o),1)}i.setAttribute("position",new Ge(n,3));var l=new ba({fog:!1,toneMapped:!1});this.cone=new Pa(i,l),this.add(this.cone),this.update()}Pc.prototype=Object.create(Ot.prototype),Pc.prototype.constructor=Pc,Pc.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},Pc.prototype.update=function(){this.light.updateMatrixWorld();var t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Cc.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Cc),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var Rc=new ot,Ic=new ft,Oc=new ft;function Dc(t){for(var e=function t(e){var i=[];e&&e.isBone&&i.push(e);for(var n=0;n<e.children.length;n++)i.push.apply(i,t(e.children[n]));return i}(t),i=new Ke,n=[],r=[],a=new Se(0,0,1),s=new Se(0,1,0),o=0;o<e.length;o++){var l=e[o];l.parent&&l.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(a.r,a.g,a.b),r.push(s.r,s.g,s.b))}i.setAttribute("position",new Ge(n,3)),i.setAttribute("color",new Ge(r,3));var c=new ba({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});Pa.call(this,i,c),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Nc(t,e,i){this.light=t,this.light.updateMatrixWorld(),this.color=i;var n=new Fs(e,4,2),r=new Re({wireframe:!0,fog:!1,toneMapped:!1});vi.call(this,n,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}Dc.prototype=Object.create(Pa.prototype),Dc.prototype.constructor=Dc,Dc.prototype.isSkeletonHelper=!0,Dc.prototype.updateMatrixWorld=function(t){var e=this.bones,i=this.geometry,n=i.getAttribute("position");Oc.getInverse(this.root.matrixWorld);for(var r=0,a=0;r<e.length;r++){var s=e[r];s.parent&&s.parent.isBone&&(Ic.multiplyMatrices(Oc,s.matrixWorld),Rc.setFromMatrixPosition(Ic),n.setXYZ(a,Rc.x,Rc.y,Rc.z),Ic.multiplyMatrices(Oc,s.parent.matrixWorld),Rc.setFromMatrixPosition(Ic),n.setXYZ(a+1,Rc.x,Rc.y,Rc.z),a+=2)}i.getAttribute("position").needsUpdate=!0,Ot.prototype.updateMatrixWorld.call(this,t)},Nc.prototype=Object.create(vi.prototype),Nc.prototype.constructor=Nc,Nc.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Nc.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};var zc=new ot,Hc=new Se,Bc=new Se;function Uc(t,e,i){Ot.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i;var n=new Qa(e);n.rotateY(.5*Math.PI),this.material=new Re({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);var r=n.getAttribute("position"),a=new Float32Array(3*r.count);n.setAttribute("color",new Oe(a,3)),this.add(new vi(n,this.material)),this.update()}function Fc(t,e,i,n){t=t||10,e=e||10,i=new Se(void 0!==i?i:4473924),n=new Se(void 0!==n?n:8947848);for(var r=e/2,a=t/e,s=t/2,o=[],l=[],c=0,h=0,u=-s;c<=e;c++,u+=a){o.push(-s,0,u,s,0,u),o.push(u,0,-s,u,0,s);var d=c===r?i:n;d.toArray(l,h),h+=3,d.toArray(l,h),h+=3,d.toArray(l,h),h+=3,d.toArray(l,h),h+=3}var p=new Ke;p.setAttribute("position",new Ge(o,3)),p.setAttribute("color",new Ge(l,3));var m=new ba({vertexColors:!0,toneMapped:!1});Pa.call(this,p,m)}function Gc(t,e,i,n,r,a){t=t||10,e=e||16,i=i||8,n=n||64,r=new Se(void 0!==r?r:4473924),a=new Se(void 0!==a?a:8947848);var s,o,l,c,h,u,d,p=[],m=[];for(c=0;c<=e;c++)l=c/e*(2*Math.PI),s=Math.sin(l)*t,o=Math.cos(l)*t,p.push(0,0,0),p.push(s,0,o),d=1&c?r:a,m.push(d.r,d.g,d.b),m.push(d.r,d.g,d.b);for(c=0;c<=i;c++)for(d=1&c?r:a,u=t-t/i*c,h=0;h<n;h++)l=h/n*(2*Math.PI),s=Math.sin(l)*u,o=Math.cos(l)*u,p.push(s,0,o),m.push(d.r,d.g,d.b),l=(h+1)/n*(2*Math.PI),s=Math.sin(l)*u,o=Math.cos(l)*u,p.push(s,0,o),m.push(d.r,d.g,d.b);var f=new Ke;f.setAttribute("position",new Ge(p,3)),f.setAttribute("color",new Ge(m,3));var v=new ba({vertexColors:!0,toneMapped:!1});Pa.call(this,f,v)}Uc.prototype=Object.create(Ot.prototype),Uc.prototype.constructor=Uc,Uc.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Uc.prototype.update=function(){var t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var e=t.geometry.getAttribute("color");Hc.copy(this.light.color),Bc.copy(this.light.groundColor);for(var i=0,n=e.count;i<n;i++){var r=i<n/2?Hc:Bc;e.setXYZ(i,r.r,r.g,r.b)}e.needsUpdate=!0}t.lookAt(zc.setFromMatrixPosition(this.light.matrixWorld).negate())},Fc.prototype=Object.assign(Object.create(Pa.prototype),{constructor:Fc,copy:function(t){return Pa.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),Gc.prototype=Object.create(Pa.prototype),Gc.prototype.constructor=Gc;var kc=new ot,Vc=new ot,jc=new ot;function Wc(t,e,i){Ot.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,void 0===e&&(e=1);var n=new Ke;n.setAttribute("position",new Ge([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var r=new ba({fog:!1,toneMapped:!1});this.lightPlane=new Aa(n,r),this.add(this.lightPlane),(n=new Ke).setAttribute("position",new Ge([0,0,0,0,0,1],3)),this.targetLine=new Aa(n,r),this.add(this.targetLine),this.update()}Wc.prototype=Object.create(Ot.prototype),Wc.prototype.constructor=Wc,Wc.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Wc.prototype.update=function(){kc.setFromMatrixPosition(this.light.matrixWorld),Vc.setFromMatrixPosition(this.light.target.matrixWorld),jc.subVectors(Vc,kc),this.lightPlane.lookAt(Vc),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Vc),this.targetLine.scale.z=jc.length()};var qc=new ot,Xc=new Ci;function Yc(t){var e=new Ke,i=new ba({color:16777215,vertexColors:!0,toneMapped:!1}),n=[],r=[],a={},s=new Se(16755200),o=new Se(16711680),l=new Se(43775),c=new Se(16777215),h=new Se(3355443);function u(t,e,i){d(t,i),d(e,i)}function d(t,e){n.push(0,0,0),r.push(e.r,e.g,e.b),void 0===a[t]&&(a[t]=[]),a[t].push(n.length/3-1)}u("n1","n2",s),u("n2","n4",s),u("n4","n3",s),u("n3","n1",s),u("f1","f2",s),u("f2","f4",s),u("f4","f3",s),u("f3","f1",s),u("n1","f1",s),u("n2","f2",s),u("n3","f3",s),u("n4","f4",s),u("p","n1",o),u("p","n2",o),u("p","n3",o),u("p","n4",o),u("u1","u2",l),u("u2","u3",l),u("u3","u1",l),u("c","t",c),u("p","c",h),u("cn1","cn2",h),u("cn3","cn4",h),u("cf1","cf2",h),u("cf3","cf4",h),e.setAttribute("position",new Ge(n,3)),e.setAttribute("color",new Ge(r,3)),Pa.call(this,e,i),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function Zc(t,e,i,n,r,a,s){qc.set(r,a,s).unproject(n);var o=e[t];if(void 0!==o)for(var l=i.getAttribute("position"),c=0,h=o.length;c<h;c++)l.setXYZ(o[c],qc.x,qc.y,qc.z)}Yc.prototype=Object.create(Pa.prototype),Yc.prototype.constructor=Yc,Yc.prototype.update=function(){var t=this.geometry,e=this.pointMap;Xc.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Zc("c",e,t,Xc,0,0,-1),Zc("t",e,t,Xc,0,0,1),Zc("n1",e,t,Xc,-1,-1,-1),Zc("n2",e,t,Xc,1,-1,-1),Zc("n3",e,t,Xc,-1,1,-1),Zc("n4",e,t,Xc,1,1,-1),Zc("f1",e,t,Xc,-1,-1,1),Zc("f2",e,t,Xc,1,-1,1),Zc("f3",e,t,Xc,-1,1,1),Zc("f4",e,t,Xc,1,1,1),Zc("u1",e,t,Xc,.7,1.1,-1),Zc("u2",e,t,Xc,-.7,1.1,-1),Zc("u3",e,t,Xc,0,2,-1),Zc("cf1",e,t,Xc,-1,0,1),Zc("cf2",e,t,Xc,1,0,1),Zc("cf3",e,t,Xc,0,-1,1),Zc("cf4",e,t,Xc,0,1,1),Zc("cn1",e,t,Xc,-1,0,-1),Zc("cn2",e,t,Xc,1,0,-1),Zc("cn3",e,t,Xc,0,-1,-1),Zc("cn4",e,t,Xc,0,1,-1),t.getAttribute("position").needsUpdate=!0};var Jc=new Yt;function Qc(t,e){this.object=t,void 0===e&&(e=16776960);var i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new Ke;r.setIndex(new Oe(i,1)),r.setAttribute("position",new Oe(n,3)),Pa.call(this,r,new ba({color:e,toneMapped:!1})),this.matrixAutoUpdate=!1,this.update()}function Kc(t,e){this.type="Box3Helper",this.box=t,e=e||16776960;var i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Ke;n.setIndex(new Oe(i,1)),n.setAttribute("position",new Ge([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Pa.call(this,n,new ba({color:e,toneMapped:!1})),this.geometry.computeBoundingSphere()}function $c(t,e,i){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var n=void 0!==i?i:16776960,r=new Ke;r.setAttribute("position",new Ge([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),Aa.call(this,r,new ba({color:n,toneMapped:!1}));var a=new Ke;a.setAttribute("position",new Ge([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new vi(a,new Re({color:n,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}Qc.prototype=Object.create(Pa.prototype),Qc.prototype.constructor=Qc,Qc.prototype.update=function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Jc.setFromObject(this.object),!Jc.isEmpty()){var e=Jc.min,i=Jc.max,n=this.geometry.attributes.position,r=n.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=e.x,r[4]=i.y,r[5]=i.z,r[6]=e.x,r[7]=e.y,r[8]=i.z,r[9]=i.x,r[10]=e.y,r[11]=i.z,r[12]=i.x,r[13]=i.y,r[14]=e.z,r[15]=e.x,r[16]=i.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=i.x,r[22]=e.y,r[23]=e.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Qc.prototype.setFromObject=function(t){return this.object=t,this.update(),this},Qc.prototype.copy=function(t){return Pa.prototype.copy.call(this,t),this.object=t.object,this},Qc.prototype.clone=function(){return(new this.constructor).copy(this)},Kc.prototype=Object.create(Pa.prototype),Kc.prototype.constructor=Kc,Kc.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Ot.prototype.updateMatrixWorld.call(this,t))},$c.prototype=Object.create(Aa.prototype),$c.prototype.constructor=$c,$c.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?1:0,this.lookAt(this.plane.normal),Ot.prototype.updateMatrixWorld.call(this,t)};var th,eh,ih=new ot;function nh(t,e,i,n,r,a){Ot.call(this),void 0===t&&(t=new ot(0,0,1)),void 0===e&&(e=new ot(0,0,0)),void 0===i&&(i=1),void 0===n&&(n=16776960),void 0===r&&(r=.2*i),void 0===a&&(a=.2*r),void 0===th&&((th=new Ke).setAttribute("position",new Ge([0,0,0,0,1,0],3)),(eh=new Js(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new Aa(th,new ba({color:n,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new vi(eh,new Re({color:n,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,r,a)}function rh(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new Ke;i.setAttribute("position",new Ge(e,3)),i.setAttribute("color",new Ge([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var n=new ba({vertexColors:!0,toneMapped:!1});Pa.call(this,i,n)}nh.prototype=Object.create(Ot.prototype),nh.prototype.constructor=nh,nh.prototype.setDirection=function(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{ih.set(t.z,0,-t.x).normalize();var e=Math.acos(t.y);this.quaternion.setFromAxisAngle(ih,e)}},nh.prototype.setLength=function(t,e,i){void 0===e&&(e=.2*t),void 0===i&&(i=.2*e),this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()},nh.prototype.setColor=function(t){this.line.material.color.set(t),this.cone.material.color.set(t)},nh.prototype.copy=function(t){return Ot.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},nh.prototype.clone=function(){return(new this.constructor).copy(this)},rh.prototype=Object.create(Pa.prototype),rh.prototype.constructor=rh;var ah,sh,oh,lh,ch=Math.pow(2,8),hh=[.125,.215,.35,.446,.526,.582],uh=5+hh.length,dh={3e3:0,3001:1,3002:2,3004:3,3005:4,3006:5,3007:6},ph=new gl,mh=(ah=20,sh=new Float32Array(ah),oh=new ot(0,1,0),(lh=new no({defines:{n:ah},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:sh},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:oh},inputEncoding:{value:dh[3e3]},outputEncoding:{value:dh[3e3]}},vertexShader:Hh(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n${Bh()}\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1})).type="SphericalGaussianBlur",lh),fh=null,vh=null,{_lodPlanes:gh,_sizeLods:yh,_sigmas:xh}=function(){for(var t=[],e=[],i=[],n=8,r=0;r<uh;r++){var a=Math.pow(2,n);e.push(a);var s=1/a;r>4?s=hh[r-8+4-1]:0==r&&(s=0),i.push(s);for(var o=1/(a-1),l=-o/2,c=1+o/2,h=[l,l,c,l,c,c,l,l,c,c,l,c],u=new Float32Array(108),d=new Float32Array(72),p=new Float32Array(36),m=0;m<6;m++){var f=m%3*2/3-1,v=m>2?0:-1,g=[f,v,0,f+2/3,v,0,f+2/3,v+1,0,f,v,0,f+2/3,v+1,0,f,v+1,0];u.set(g,18*m),d.set(h,12*m);var y=[m,m,m,m,m,m];p.set(y,6*m)}var x=new Ke;x.setAttribute("position",new Oe(u,3)),x.setAttribute("uv",new Oe(d,2)),x.setAttribute("faceIndex",new Oe(p,1)),t.push(x),n>4&&n--}return{_lodPlanes:t,_sizeLods:e,_sigmas:i}}(),wh=null,bh=null,_h=null,Mh=(1+Math.sqrt(5))/2,Sh=1/Mh,Eh=[new ot(1,1,1),new ot(-1,1,1),new ot(1,1,-1),new ot(-1,1,-1),new ot(0,Mh,Sh),new ot(0,Mh,-Sh),new ot(Sh,0,Mh),new ot(-Sh,0,Mh),new ot(Mh,Sh,0),new ot(-Mh,Sh,0)];function Th(t){bh=t,Ch(mh)}function Ah(t){var e={magFilter:1003,minFilter:1003,generateMipmaps:!1,type:t?t.type:1009,format:t?t.format:1023,encoding:t?t.encoding:3002,depthBuffer:!1,stencilBuffer:!1},i=Ph(e);return i.depthBuffer=!t,wh=Ph(e),i}function Lh(t){wh.dispose(),bh.setRenderTarget(_h),t.scissorTest=!1,t.setSize(t.width,t.height)}function Ch(t){var e=new Dt;e.add(new vi(gh[0],t)),bh.compile(e,ph)}function Ph(t){var e=new it(3*ch,3*ch,t);return e.texture.mapping=306,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function Rh(t,e,i,n,r){t.viewport.set(e,i,n,r),t.scissor.set(e,i,n,r)}function Ih(t){var e=bh.autoClear;bh.autoClear=!1;for(var i=1;i<uh;i++){Oh(t,i-1,i,Math.sqrt(xh[i]*xh[i]-xh[i-1]*xh[i-1]),Eh[(i-1)%Eh.length])}bh.autoClear=e}function Oh(t,e,i,n,r){Dh(t,wh,e,i,n,"latitudinal",r),Dh(wh,t,i,i,n,"longitudinal",r)}function Dh(t,e,i,n,r,a,s){"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");var o=new Dt;o.add(new vi(gh[n],mh));var l=mh.uniforms,c=yh[i]-1,h=isFinite(r)?Math.PI/(2*c):2*Math.PI/39,u=r/h,d=isFinite(r)?1+Math.floor(3*u):20;d>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${d} samples when the maximum is set to 20`);for(var p=[],m=0,f=0;f<20;++f){var v=f/u,g=Math.exp(-v*v/2);p.push(g),0==f?m+=g:f<d&&(m+=2*g)}for(f=0;f<p.length;f++)p[f]=p[f]/m;l.envMap.value=t.texture,l.samples.value=d,l.weights.value=p,l.latitudinal.value="latitudinal"===a,s&&(l.poleAxis.value=s),l.dTheta.value=h,l.mipInt.value=8-i,l.inputEncoding.value=dh[t.texture.encoding],l.outputEncoding.value=dh[t.texture.encoding];var y=yh[n];Rh(e,v=3*Math.max(0,ch-2*y),(0===n?0:2*ch)+2*y*(n>4?n-8+4:0),3*y,2*y),bh.setRenderTarget(e),bh.render(o,ph)}function Nh(){var t=new no({uniforms:{envMap:{value:null},texelSize:{value:new J(1,1)},inputEncoding:{value:dh[3e3]},outputEncoding:{value:dh[3e3]}},vertexShader:Hh(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n${Bh()}\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1});return t.type="EquirectangularToCubeUV",t}function zh(){var t=new no({uniforms:{envMap:{value:null},inputEncoding:{value:dh[3e3]},outputEncoding:{value:dh[3e3]}},vertexShader:Hh(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n${Bh()}\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:0,depthTest:!1,depthWrite:!1});return t.type="CubemapToCubeUV",t}function Hh(){return"\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t"}function Bh(){return"\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t"}Th.prototype={constructor:Th,fromScene:function(t,e=0,i=.1,n=100){_h=bh.getRenderTarget();var r=Ah();return function(t,e,i,n){var r=new Pi(90,1,e,i),a=[1,1,1,1,-1,1],s=[1,1,-1,-1,-1,1],o=bh.outputEncoding,l=bh.toneMapping,c=bh.toneMappingExposure,h=bh.getClearColor(),u=bh.getClearAlpha();bh.toneMapping=1,bh.toneMappingExposure=1,bh.outputEncoding=3e3,t.scale.z*=-1;var d=t.background;if(d&&d.isColor){d.convertSRGBToLinear();var p=Math.max(d.r,d.g,d.b),m=Math.min(Math.max(Math.ceil(Math.log2(p)),-128),127);d=d.multiplyScalar(Math.pow(2,-m));var f=(m+128)/255;bh.setClearColor(d,f),t.background=null}for(var v=0;v<6;v++){var g=v%3;0==g?(r.up.set(0,a[v],0),r.lookAt(s[v],0,0)):1==g?(r.up.set(0,0,a[v]),r.lookAt(0,s[v],0)):(r.up.set(0,a[v],0),r.lookAt(0,0,s[v])),Rh(n,g*ch,v>2?ch:0,ch,ch),bh.setRenderTarget(n),bh.render(t,r)}bh.toneMapping=l,bh.toneMappingExposure=c,bh.outputEncoding=o,bh.setClearColor(h,u),t.scale.z*=-1}(t,i,n,r),e>0&&Oh(r,0,0,e),Ih(r),Lh(r),r},fromEquirectangular:function(t){return t.magFilter=1003,t.minFilter=1003,t.generateMipmaps=!1,this.fromCubemap(t)},fromCubemap:function(t){_h=bh.getRenderTarget();var e=Ah(t);return function(t,e){var i=new Dt;t.isCubeTexture?null==vh&&(vh=zh()):null==fh&&(fh=Nh());var n=t.isCubeTexture?vh:fh;i.add(new vi(gh[0],n));var r=n.uniforms;r.envMap.value=t,t.isCubeTexture||r.texelSize.value.set(1/t.image.width,1/t.image.height);r.inputEncoding.value=dh[t.encoding],r.outputEncoding.value=dh[t.encoding],Rh(e,0,0,3*ch,2*ch),bh.setRenderTarget(e),bh.render(i,ph)}(t,e),Ih(e),Lh(e),e},compileCubemapShader:function(){null==vh&&Ch(vh=zh())},compileEquirectangularShader:function(){null==fh&&Ch(fh=Nh())},dispose:function(){mh.dispose(),null!=vh&&vh.dispose(),null!=fh&&fh.dispose();for(var t=0;t<gh.length;t++)gh[t].dispose()}};function Uh(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),Zo.call(this,t),this.type="catmullrom"}Go.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(Go.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(ol.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new Mi,i=0,n=t.length;i<n;i++){var r=t[i];e.vertices.push(new ot(r.x,r.y,r.z||0))}return e}}),Object.assign(ll.prototype,{fromPoints:function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),Object.create(Zo.prototype),Object.create(Zo.prototype),Uh.prototype=Object.create(Zo.prototype),Object.assign(Uh.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Fc.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Dc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Io.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Ml(t)}}),Io.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(Ll.prototype,{setTexturePath:function(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(Sc.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(Yt.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),zi.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},Ac.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(Z,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Z.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Z.ceilPowerOfTwo(t)}}),Object.assign(Q.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(ft.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new ot).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,i,n,r,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,n,i,r,a)}}),ce.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},rt.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(ae.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(we.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(we,{barycoordFromPoint:function(t,e,i,n,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),we.getBarycoord(t,e,i,n,r)},normal:function(t,e,i,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),we.getNormal(t,e,i,n)}}),Object.assign(cl.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Os(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Ws(this,t)}}),Object.assign(J.prototype,{fromAttribute:function(t,e,i){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(ot.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,i){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(et.prototype,{fromAttribute:function(t,e,i){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Mi.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(t){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.assign(Ot.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.defineProperties(Ot.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.assign(vi.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}),Object.defineProperties(vi.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Object.defineProperties(ha.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(ma.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),ua.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(Go.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),Pi.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(hl.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Oe.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(35048)}}}),Object.assign(Oe.prototype,{setDynamic:function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?35048:35044),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(Ke.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addAttribute:function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new Oe(arguments[1],arguments[2])))},addDrawCall:function(t,e,i){void 0!==i&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},applyMatrix:function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.defineProperties(Ke.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(wc.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(t){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=t}}}),Object.defineProperties(Vr.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),35048===this.usage},set:function(t){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(t)}}}),Object.assign(Vr.prototype,{setDynamic:function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?35048:35044),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(Ds.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(yc.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(Pe.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Se}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties(so.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(Li.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(Fr.prototype,{clearTarget:function(t,e,i,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,i,n)},animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(Fr.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?3001:3e3}}}),Object.defineProperties(Or.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(it.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(Kl.prototype,{load:{value:function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new Ul).load(t,(function(t){e.setBuffer(t)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),rc.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Ri.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};K.crossOrigin=void 0,K.loadTexture=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new Fo;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,i,void 0,n);return e&&(a.mapping=e),a},K.loadTextureCube=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new Uo;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,i,void 0,n);return e&&(a.mapping=e),a},K.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},K.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"115"}}));class Fh extends G{constructor(t=[],e=1,i=0){for(super(0,0,0,0,e,i),this.type="ActionSwipe",this.name.value="Mouse gesture",this.description.value="Add a mouse gesture",this.points=new x,this.points.dataClass=B;t.length<2;)t.push(new B);this.points.value=t,this.isCaptureable.value=!0,this.isTestable.value=!0,this.smoothness=new g(20),this.changeCursorOnCapture.value=!0,this.icon.value="fas fa-arrows-alt",this.captureDownHandler=this.captureDownHandler.bind(this),this.captureMoveHandler=this.captureMoveHandler.bind(this),this.captureUpHandler=this.captureUpHandler.bind(this)}clone(){let t=new Fh;return t.copy(this),t}copy(t){super.copy(t);let e=[];t.points.map(t=>{e.push(t.clone())}),this.points.value=e}serialize(){let t=super.serialize();return t.points=this.points.serialize(),t}deserialize(t){t&&(super.deserialize(t),this.points.deserialize(t.points))}trigger(){this.startX.value=0,this.startY.value=0,this.endX.value=1,this.endY.value=0;let t=[];return this.points.map(e=>{t.push(new ot(e.x.value,e.y.value,0))}),this.curve=new Zo(t,!1,"chordal",.75),this.dispatchMouseEvent("mousedown",0),super.trigger()}dispatchMouseEvent(t,e){e=Math.min(e,1),e=Math.max(e,0);let i=this.curve.getPoint(e);i.x=i.x-window.scrollX,i.y=i.y-window.scrollY;let n=document.elementFromPoint(i.x,i.y),r=new MouseEvent(t,{bubbles:!0,cancelable:!0,view:window,clientX:i.x,clientY:i.y,pageX:i.x,pageY:i.y,x:i.x,y:i.y});n.dispatchEvent(r)}tweenUpdateHandler(){this.dispatchMouseEvent("mousemove",this.pos.x)}tweenCompleteHandler(t){this.dispatchMouseEvent("mouseup",1)}capture(){super.capture(),document.body.addEventListener(h.mousedown,this.captureDownHandler)}captureDownHandler(t){let e=t;l&&(e=t.touches[0]);let i=new a(e.pageX,e.pageY);this.capturedPoints=[new B(i.x,i.y)],this.lastPoint=i,this.startDate=new Date,document.body.removeEventListener(h.mousedown,this.captureDownHandler),document.body.addEventListener(h.mousemove,this.captureMoveHandler),document.body.addEventListener(h.mouseup,this.captureUpHandler)}captureMoveHandler(t){let e=t;l&&(e=t.touches[0]);let i=new a(e.pageX,e.pageY);a.distance(this.lastPoint,i)>this.smoothness.value&&(this.lastPoint=i,this.capturedPoints.push(new B(i.x,i.y)))}captureUpHandler(t){let e=t;l&&(e=t.touches[0]);let i=new a(e.pageX,e.pageY);a.distance(this.lastPoint,i)>0&&this.capturedPoints.push(new B(i.x,i.y)),this.points.value=this.capturedPoints,this.capturedPoints=[];let n=Object(r.h)((new Date-this.startDate)/1e3,1);this.duration.value=n,document.body.removeEventListener(h.mousemove,this.captureMoveHandler),document.body.removeEventListener(h.mouseup,this.captureUpHandler),this.captureComplete()}captureAtInit(){super.captureAtInit(),this.capture()}}class Gh extends _{constructor(){super("ActionWait","Pause","Add a pause"),this.delay.value=1,this.icon.value="fas fa-pause-circle"}clone(){let t=new Gh;return t.copy(this),t}}class kh extends x{constructor(){super(),this.push.apply(this,arguments),this.types=new x,this.types.value=[new k,new V,new Fh,new j,new Gh]}cloneAction(t){let e=t.clone();this.addAction(e)}addAction(t){if(!t)return;Object(n.a)("Action","add",t.type),t.captureAtInit();let e=this.selectedIndex.value+1;isNaN(e)&&(e=this.value.length),this.splice(e,0,t),this.selectedIndex.value=e}removeAction(t){Object(n.a)("Action","remove",t.type);let e=this.indexOf(t);this.remove(t);let i=Math.max(e-1,0);this.selectedIndex.value=Math.min(i,this.value.length-1)}serialize(){let t=[];return this.map(e=>{t.push(e.serialize())}),t}deserialize(t){if(!t)return;let e=[];for(let i=0;i<t.length;i++){let n=t[i],r=this.types.find(t=>t.type==n.type).clone();r.deserialize(n),e.push(r)}this.value=e}}class Vh{constructor(t,e=500){this.callback=t,this.timeout=e,this.throttle=this.throttle.bind(this),this.timeoutComplete=this.timeoutComplete.bind(this),this.isWaiting=!1,this.doCallback=!1}throttle(t){this.data=t,this.doCallback=!0,this.isWaiting||this.timeoutComplete()}timeoutComplete(){this.doCallback?(this.isWaiting=!0,this.callback(this.data),this.doCallback=!1,setTimeout(this.timeoutComplete,this.timeout)):this.isWaiting=!1}}class jh{constructor(){this.darkModeChangeHandler=this.darkModeChangeHandler.bind(this),this.position=new B(50,50),this.windowSizeChangeHandler=this.windowSizeChangeHandler.bind(this),this.windowResizeHandler=this.windowResizeHandler.bind(this),this.windowSize=new B(window.innerWidth,window.innerHeight),this.windowSize.addEventListener(m.CHANGE,this.windowSizeChangeHandler),window.addEventListener("resize",this.windowResizeHandler),this.videoBitsPerSecondThrottle=new Vh(()=>{Object(n.a)("settings","videoBitsPerSecond",this.videoBitsPerSecond.value)},1e3),this.videoBitsPerSecondMin=1,this.videoBitsPerSecondMax=8,this.videoBitsPerSecond=new g,this.videoBitsPerSecond.value=8,this.videoBitsPerSecond.addEventListener(m.CHANGE,this.videoBitsPerSecondThrottle.throttle),this.videoCodecs=new x("vp8","vp9","h264"),this.videoCodecs.selectedItem.value=this.videoCodecs.value[0],this.videoCodecs.selectedItem.addEventListener(m.CHANGE,()=>{Object(n.a)("settings","videoCodec",this.videoCodecs.selectedItem.value)}),this.audioBitsPerSecondThrottle=new Vh(()=>{Object(n.a)("settings","audioBitsPerSecond",this.audioBitsPerSecond.value)},1e3),this.audioBitsPerSecond=new g(128),this.audioBitsPerSecond.addEventListener(m.CHANGE,this.audioBitsPerSecondThrottle.throttle),this.audioCodecs=new x("opus"),this.audioCodecs.selectedItem.value=this.audioCodecs.value[0],this.audioCodecs.selectedItem.addEventListener(m.CHANGE,()=>{Object(n.a)("settings","audioCodec",this.audioCodecs.selectedItem.value)}),this.darkModeMatchMedia=window.matchMedia("(prefers-color-scheme: dark)"),this.isColorThemeLight=new v,this.isColorThemeLight.addEventListener(m.CHANGE,t=>{let e={txt:"scrollCaptureColorTheme",isColorThemeLight:t.data};wu.model.sendMessage(e)}),this.colorThemes=new x("Dark","Light","Auto"),this.colorThemes.selectedItem.value="Dark",this.switchColorTheme(),this.colorThemes.selectedItem.addEventListener(m.CHANGE,()=>{Object(n.a)("settings","colorTheme",this.colorThemes.selectedItem.value),this.switchColorTheme()})}windowResizeHandler(){this.windowSize.removeEventListener(m.CHANGE,this.windowSizeChangeHandler),this.windowSize.x.value=window.innerWidth,this.windowSize.y.value=window.innerHeight,this.windowSize.addEventListener(m.CHANGE,this.windowSizeChangeHandler)}windowSizeChangeHandler(){wu.model.sendMessage({txt:"scrollCaptureResizeWindow",width:this.windowSize.x.value,height:this.windowSize.y.value})}switchColorTheme(){let t=this.colorThemes.selectedItem.value;switch(t){case"Dark":case"Light":this.darkModeMatchMedia.removeEventListener("change",this.darkModeChangeHandler),this.isColorThemeLight.value="Light"==t;break;default:this.darkModeMatchMedia.addEventListener("change",this.darkModeChangeHandler),this.darkModeChangeHandler()}}darkModeChangeHandler(){let t=this.darkModeMatchMedia.matches;this.isColorThemeLight.value=!t}serialize(){return{position:this.position.serialize(),videoBitsPerSecond:this.videoBitsPerSecond.serialize(),videoCodec:this.videoCodecs.selectedItem.serialize(),audioBitsPerSecond:this.audioBitsPerSecond.serialize(),audioCodec:this.audioCodecs.selectedItem.serialize(),colorThemes:this.colorThemes.selectedItem.value}}deserialize(t){t&&(this.position.deserialize(t.position),this.videoBitsPerSecond.deserialize(t.videoBitsPerSecond),this.videoCodecs.selectedItem.deserialize(t.videoCodec),this.audioBitsPerSecond.deserialize(t.audioBitsPerSecond),this.audioCodecs.selectedItem.deserialize(t.audioCodec),t.hasOwnProperty("colorThemes")&&(this.colorThemes.selectedItem.value=t.colorThemes))}}class Wh extends H{constructor(){super({selectedAction:"Pause"}),this.save=this.save.bind(this),this.showCaptureIcon=new v,this.isSaving=new v,this.settings=new jh,this.actions=new kh,this.actions.addEventListener("add",t=>{this.save()}),this.actions.addEventListener("remove",t=>{this.save()})}get actions(){return this._actions}set actions(t){this._actions=t,this.dispatchEvent(new d("change_actions",t))}sendMessage(t){chrome.runtime.sendMessage(t)}save(){this.isSaving.value=!0;let t={actions:this.actions.serialize(),settings:this.settings.serialize()},e=JSON.stringify(t);chrome.storage.local.set({json:e},()=>{setTimeout(()=>{this.isSaving.value=!1},100)})}clearActions(){Object(n.a)("clearActions","click"),this.actions.clear(),this.save()}}class qh extends EventTarget{constructor(){super(),this.branches={},this._defaultChild=null,this._parent=null,this._path=null,this._router=null,this._slug=null}getBranch(t){let e;return this.branches[t]?e=this.branches[t]:this.branches["*"]?e=this.branches["*"]:(e=new qh,console.log("No branch named "+t+", default branch was created")),e}load(t){return Promise.resolve()}show(){return Promise.resolve()}hide(){return Promise.resolve()}get defaultChild(){return this._defaultChild}set defaultChild(t){this._defaultChild=t}get parent(){return this._parent}set parent(t){this._parent=t}get path(){return this._path}set path(t){this._path=t}get router(){return this._router}set router(t){this._router=t}get slug(){return this._slug}set slug(t){this._slug=t}}class Xh{constructor(t,e,i,n=!0){this.eventTarget=t,this.type=e,this.eventHandler=i,this.enabled=n}set enabled(t){this._enabled=t,t?this.eventTarget.addEventListener(this.type,this.eventHandler):this.eventTarget.removeEventListener(this.type,this.eventHandler)}destroy(){this.enabled=!1,this.eventTarget=null,this.type=null,this.eventHandler=null}}function Yh(t){return null!=t&&null!=t&&""!=t}class Zh extends EventTarget{constructor(t,e,i=null){super(),this.changeHandler=this.changeHandler.bind(this),this._value=null,this.getValue=new Function("return "+t).bind(e),this.callback=i;let n=t;for(let t=0;t<"+/*-[](){}!?%$=:;`".length;t++){let e="+/*-[](){}!?%$=:;`".charAt(t);n=n.split(e).join(" ")}let r=n.split(" ").filter(t=>Yh(t)&&-1==t.indexOf("'")&&-1==t.indexOf('"'));this.eventHandlers=[],r.map((t,i)=>{let n=t.split("."),r=e,a=n.pop();if(n.length>0&&(r=P(n.join("."),e)),r instanceof EventTarget&&null!=r[a]){let t=new Xh(r,a,this.changeHandler);this.eventHandlers.push(t)}}),this.changeHandler()}get value(){return this._value}changeHandler(t=null){this._value=this.getValue(),p.dispatch(this,"value",this.value),this.callback&&this.callback(this.value)}destroy(){this.eventHandlers.map(t=>{t.destroy()}),this.eventHandlers=[],this.callback=null,this._value=null}}var Jh=i(2);class Qh{constructor(t,e,i,n){this.changeHandler1=this.changeHandler1.bind(this),this.changeHandler2=this.changeHandler2.bind(this),this.eventHandler1=this.createEventHandler(t,e,this.changeHandler1),this.eventHandler2=this.createEventHandler(i,n,this.changeHandler2.bind(this)),this.changeHandler2(new p(this.eventHandler2.type,this.eventHandler2.eventTarget[this.eventHandler2.type]))}changeHandler1(t){this.eventHandler2.enabled=!1,this.eventHandler2.eventTarget[this.eventHandler2.type]=t.data,this.eventHandler2.enabled=!0}changeHandler2(t){this.eventHandler1.enabled=!1,this.eventHandler1.eventTarget[this.eventHandler1.type]=t.data,this.eventHandler1.enabled=!0}createEventHandler(t,e,i){let n,r=e.split("."),a=t,s=r.pop();return r.length>0&&(a=P(r.join("."),t)),a instanceof EventTarget?n=new Xh(a,s,i):console.log("Object is not an instance of EventTarget, cannot add event listener type '"+s+"'"),n}destroy(){this.eventHandler1.destroy(),this.eventHandler2.destroy()}}class Kh extends qh{constructor(t){super(),t&&(this.debug="true"==t.getAttribute("data-debug")),this.element=t,this.componentID=(new Date).getTime(),this.debug&&this.element.setAttribute("data-componentId",this.componentID),this._model=null,this.rectangle=new s,this.globalRectangle=new s,this.windowSize=new s,this.attributes={},this.showDuration=0,this.showDelay=0,this.hideDuration=0,this.hideDelay=0,this.showChildrenDelay=0,this.hideChildrenDelay=0,this.doChildrenAnimationFrame=!1,this.alsoShowChildren=!1,this.calculateGlobalPosition=!1}get element(){return this._element}set element(t){this._element=t,t&&(t.component=this)}get containerElement(){return this.element}removeChild(t){if(this.debug&&console.log("UIList.removeChild",t),t&&this.containerElement==t.parentNode){t.parentNode.removeChild(t);let e=t.component;e&&this.isAdded&&e.elementRemoved()}}appendChild(t){if(t){this.containerElement.appendChild(t);let e=t.component;e&&(this.isAdded&&e.elementAdded(),e.windowResize&&e.windowResize(this.windowSize),e.windowScroll&&e.windowScroll(this.windowScrollPoint))}}prependChild(t){this.appendChildAt(t,0)}appendChildAt(t,e=0){let i=this.children;if(e>=i.length)this.appendChild(t);else{let n=i[e];this.insertBefore(t,n)}}insertBefore(t,e){if(t&&e){this.containerElement.insertBefore(t,e);let i=t.component;i&&(this.isAdded&&i.elementAdded(),i.windowResize&&i.windowResize(this.windowSize),i.windowScroll&&i.windowScroll(this.windowScrollPoint))}}insertAfter(t,e){let i=this.children.indexOf(e);isNaN(i)?console.log("Can't find depth index for",e):this.appendChildAt(t,i+1)}setAttribute(t,e){this.element.setAttribute(t,e)}get isAdded(){let t;for(this.element&&(t=this.element.parentNode);t&&t!=document.body;)t=t.parentNode;return t==document.body}getSVGPathTotalLength(){return this.element.getTotalLength()}get children(){let t=[];var e;return this.element&&(e=this.element.children,t=Array.prototype.slice.call(e)),t}get scope(){return this._scope}set scope(t){this._scope=t,this.debug&&console.log("debug UIComponent.scope",t),function(t){let e=t.element;for(let i=0;i<e.attributes.length;i++){let n=e.attributes[i],r=n.value.split("{").join("${");if(-1!=r.indexOf("${")){const e=e=>{t.setAttribute(n.name,e)};t.attributes[n.name]=new Zh(Object(Jh.a)("`"+r+"`"),t,e)}}}(this),function(t){const e=[];for(let i=0;i<t.element.attributes.length;i++){const n=t.element.attributes[i];if(-1!=n.name.indexOf("on:")){const i=n.name.split("on:")[1],r=new Function("event",n.value).bind(t);t.attributes[n.name]=new Xh(t.element,i,r),e.push(n.name)}}e.map(e=>{t.element.removeAttribute(e)})}(this),function(t,e="set:"){const i=[];for(let n=0;n<t.element.attributes.length;n++){const r=t.element.attributes[n];if(-1!=r.name.indexOf(e)){const n=r.name.split(e)[1],a=e=>{t[n]=e};t.attributes[r.name]=new Zh(r.value,t,a),i.push(r.name)}}i.map(e=>{t.element.removeAttribute(e)})}(this),function(t){const e=[];for(let i=0;i<t.element.attributes.length;i++){const n=t.element.attributes[i];if(-1!=n.name.indexOf("bind:")){const i=n.name.split("bind:")[1];t.attributes[n.name]=new Qh(t,"this."+i,t,n.value),e.push(n.name)}}e.map(e=>{t.element.removeAttribute(e)})}(this)}get model(){return this._model}set model(t){t!=this._model&&(this._model=t,p.dispatch(this,"model",t))}load(){let t=[],e=this.children;for(let i=0;i<e.length;i++){let n=e[i].component;n&&n.load&&t.push(n.load())}return Promise.all(t)}show(){return w(this.showDelay).then(()=>(this.showPromises=[this.showDelayComplete()],this.alsoShowChildren&&this.showPromises.push(this.showChildren()),Promise.all(this.showPromises))).then(this.showComplete.bind(this))}showDelayComplete(){return this.isVisible=!0,this.element&&this.element.setAttribute("data-state","show"),w(this.showDuration)}showComplete(){}showChildren(){let t=[],e=0,i=this.children;for(let n=0;n<i.length;n++){let r=i[n].component;r&&(this.showChildrenDelay>0&&(r.showDelay=e,e+=this.showChildrenDelay),t.push(r.show()))}return Promise.all(t)}hide(){return w(this.hideDelay).then(()=>(this.hidePromises=[this.hideDelayComplete()],this.alsoShowChildren&&this.hidePromises.push(this.hideChildren()),Promise.all(this.hidePromises))).then(this.hideComplete.bind(this))}hideDelayComplete(){return this.element&&this.element.setAttribute("data-state","hide"),w(this.hideDuration)}hideComplete(){this.isVisible=!1}hideChildren(){let t=[],e=0,i=this.children;for(let n=0;n<i.length;n++){let r=i[n].component;r&&(this.hideChildrenDelay>0&&(r.hideDelay=e,e+=this.hideChildrenDelay),t.push(r.hide()))}return Promise.all(t)}windowResize(t){this.windowSize=t,this.rectangle.x=this.element.offsetLeft,this.rectangle.y=this.element.offsetTop,this.rectangle.width=this.element.offsetWidth,this.rectangle.height=this.element.offsetHeight,this.globalRectangle.width=this.rectangle.width,this.globalRectangle.height=this.rectangle.height,this.calculateGlobalPosition&&(this.globalRectangle.position=c(this.element,document.body));let e=this.children;for(let i=0;i<e.length;i++){let n=e[i].component;n&&n.windowResize&&n.windowResize(t)}}windowScroll(t){this.windowScrollPoint=t;let e=this.children;for(let i=0;i<e.length;i++){let n=e[i].component;n&&n.windowScroll&&n.windowScroll(t)}}animationFrame(t){if(this.animationFrameData=t,this.doChildrenAnimationFrame){let e=this.children;for(let i=0;i<e.length;i++){let n=e[i].component;n&&n.animationFrame(t)}}}orientationChange(t){this.orientation=t;let e=this.children;for(let i=0;i<e.length;i++){let n=e[i].component;n&&n.orientationChange&&n.orientationChange(t)}}elementAdded(){let t=this.children;for(let e=0;e<t.length;e++){let i=t[e].component;i&&i.elementAdded()}}elementRemoved(){let t=this.children;for(let e=0;e<t.length;e++){let i=t[e].component;i&&i.elementRemoved()}}static getRect(t,e,i){e||(e=document.body);let n=new s(0,0,t.offsetWidth,t.offsetHeight);return t.parentNode&&(n.position=c(t,e,null,i)),n}getRect(t,e){return Kh.getRect(this.element,t)}querySelector(t){let e=this.element.querySelector(t);return e||console.log("No element with selector "+t+" in "+this),e.component||e}querySelectorAll(t){let e=[],i=this.element.querySelectorAll(t);for(let t=0;t<i.length;t++){let n=i.item(t);e.push(n.component||n)}return e}getTouchPoint(t){let e=t;return l&&(e=t.touches[0]),new a(e.pageX,e.pageY)}dispatchResizeEvent(){this.element.dispatchEvent(new Event("ui-resize",{bubbles:!0,cancelable:!0}))}destroy(){this.debug&&console.log("UIComponent.destroy",this.element);for(let t in this.attributes){this.attributes[t].destroy()}this.model=null,this.scope=null,this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=null,this.element.compopnent=null;for(let t in this)this[t]=null}}class $h extends Kh{constructor(t){super(t),this.onRelease=()=>{},this.clickHandler=this.clickHandler.bind(this),this.pressHandler=this.pressHandler.bind(this),this.clickDelayComplete=this.clickDelayComplete.bind(this),this.clickDelay=0,this.element.addEventListener(h.click,this.clickHandler),this.element.addEventListener(h.mousedown,this.pressHandler)}pressHandler(t){this.element.setAttribute("data-event","press")}clickHandler(t){this.element.setAttribute("data-event","click"),this.clickDelay>0?setTimeout(this.clickDelayComplete,1e3*this.clickDelay,t):this.clickDelayComplete(t)}clickDelayComplete(t){this.onRelease&&this.onRelease(t)}destroy(){this.element.removeEventListener(h.click,this.clickHandler),this.element.removeEventListener(h.mousedown,this.pressHandler),super.destroy()}}class tu{constructor(t,e=null,i=NaN,n=NaN){this.data=t,this.parentScope=e,this.index=i,isNaN(this.index)||(this.index1=i+1),this.length=n}get rootScope(){let t=this,e=this;for(;e;)t=e,e=t.parentScope;return t}toString(){return"Scope "+this.parentScope}}class eu extends Kh{constructor(t){super(t),this._providerAdd=this._providerAdd.bind(this),this._providerRemove=this._providerRemove.bind(this),this._providerSort=this._providerSort.bind(this),this.template='<li is="ui-text">{this.scope.data}</li>',this.templates={},this._provider=new x;let e=[];this.element&&this.children.map(t=>{"TEMPLATE"==t.nodeName.toUpperCase()&&e.push(t)});for(let t=0;t<e.length;t++){let i=e[t],n=i.getAttribute("data-type")||"*";this.templates[n]=i.innerHTML,this.element.removeChild(i)}}get provider(){return this._provider}set provider(t){this.debug&&console.log("UIList.provider",t),this._provider&&this._provider instanceof x&&(this._provider.removeEventListener("add",this._providerAdd),this._provider.removeEventListener("remove",this._providerRemove),this._provider.removeEventListener("sort",this._providerSort)),this._removeElements(this.children.slice()),this._provider=t,this._provider&&(this._provider instanceof x?(this._provider.addEventListener("add",this._providerAdd),this._provider.addEventListener("remove",this._providerRemove),this._provider.addEventListener("sort",this._providerSort),this._addElements(this._provider.value)):this._addElements(this._provider))}_removeElements(t){this.debug&&console.log("UIList._removeElements",t.length);for(let e=0;e<t.length;e++){let i=t[e];this.removeChild(i),N(i)}this.dispatchResizeEvent()}_addElements(t,e=0){this.debug&&console.log("UIList._addElements",t.length);for(let i in t){let n=t[i],r=this._createElement(n,e,t.length);this.appendChildAt(r,e),e++}return this.dispatchResizeEvent(),t}_createElement(t,e,i){return D(this._getTemplateForModel(t),new tu(t,this.scope,e,i))}_getModelType(t){let e=t.type;return e instanceof m&&(e=e.value),e}_getTemplateForModel(t){let e;if(t){let i=this._getModelType(t);e=this.templates[i]}if(e||(e=this.templates["*"]||this.template),!e)throw new Error("UIList "+this.element.outerHTML+" has no template");return e}_providerAdd(t){this.debug&&console.log("UIList._providerAdd"),this._saveChildrenPositions();let e=[],i=t.data.index,n=t.data.index+t.data.total;for(let t=i;t<n;t++){let i=this.provider.value[t];e.push(i)}return this._addElements(e,i),this.windowResize(this.windowSize),this._setChildrenTransform(),setTimeout(this._resetChildrenTransform.bind(this),0),e}_providerRemove(t){this.debug&&console.log("UIList._providerRemove",t),this._saveChildrenPositions();let e=this.children;this.debug&&console.log("children=",e);let i=[],n=t.data.index,r=t.data.index+t.data.total;this.debug&&console.log("start=",n,"end=",r);for(let t=n;t<r;t++)i.push(e[t]);return this._removeElements(i),this.windowResize(this.windowSize),this._setChildrenTransform(),setTimeout(this._resetChildrenTransform.bind(this),0),i}_providerSort(t){this._saveChildrenPositions();let e=this.provider.value;for(let t=0;t<e.length;t++){let i=e[t],n=this.getElementByModel(i);n&&this.element.appendChild(n)}this.windowResize(this.windowSize),this._setChildrenTransform(),setTimeout(this._resetChildrenTransform.bind(this),0)}getElementByModel(t){return this.children.find(e=>{let i=!1;return e.component&&(i=e.component.model==t),i})}_saveChildrenPositions(){this.childrenPositions=[],this.children.map(t=>{this.childrenPositions.push({child:t,position:new a(t.offsetLeft,t.offsetTop)})})}_setChildrenTransform(){this.childrenPositions.map((t,e)=>{let i=new a(t.child.offsetLeft,t.child.offsetTop),n=t.position.subtract(i);n.magnitude>0&&(t.child.classList.remove("smooth-transform"),t.child.style.transform="translate3d("+n.x+"px, "+n.y+"px, 0px)")})}_resetChildrenTransform(){this.children.map((t,e)=>{t.classList.add("smooth-transform"),t.style.transform="translate3d(0px, 0px, 0px)"})}scrollToElement(t,e){let i=new a,n=new a;n.x=this.element.scrollWidth-this.element.clientWidth,n.y=this.element.scrollHeight-this.element.clientHeight;let r=new s(t.offsetLeft,t.offsetTop,t.offsetWidth,t.offsetHeight);return i.x=Math.min(r.x,n.x),i.y=Math.min(r.y,n.y),this.scrollTo(i.x,i.y,e)}scrollTo(t,e,i=1){return this.tween=new E(0,i,[new T(this.element,"scrollLeft",this.element.scrollLeft,t,U.cubic.easeInOut,10),new T(this.element,"scrollTop",this.element.scrollTop,e,U.cubic.easeInOut,10)]),this.tween.start()}destroy(){this.childrenPositions=null,this.provider=null,super.destroy()}}class iu extends eu{constructor(t){super(t),this._mouseDownHandler=this._mouseDownHandler.bind(this),this._dragMove=this._dragMove.bind(this),this._dragElementMove=this._dragElementMove.bind(this),this._dragEnd=this._dragEnd.bind(this),this.selectItemOnMouseDown=!1,this.isDragged=!1,this.dragIndex=NaN,this.dragElementClass="ui-list-drag-area",this.element.addEventListener(h.mousedown,this._mouseDownHandler)}_mouseDownHandler(t){let e=NaN,i=this.children.find((i,n)=>{let r=i.contains(t.target),a=i==t.target,s=r||a;return this.debug&&console.log(n,"contains",r,"isChild",a,"isMatch",s),s&&(e=n),s});if(i){this.selectItemOnMouseDown&&this.provider.selectedIndex&&(this.provider.selectedIndex.value=e),t.target.classList.contains(this.dragElementClass)&&(t.preventDefault(),this.dragStartPoint=this.getTouchPoint(t),this.dragIndex=NaN,this.dragElement=i,this.dragIndex=e,this.dragElementStartPos=new a(this.dragElement.offsetLeft,this.dragElement.offsetTop),this.dragElementsMinHeight=Number.MAX_VALUE,this.children.map(t=>{this.dragElementsMinHeight=Math.min(this.dragElementsMinHeight,t.component.rectangle.height)}),document.body.addEventListener(h.mousemove,this._dragMove),document.body.addEventListener(h.mouseup,this._dragEnd))}}_dragMove(t){let e=this.getTouchPoint(t);a.distance(e,this.dragStartPoint)>0&&(document.body.removeEventListener(h.mousemove,this._dragMove),document.body.addEventListener(h.mousemove,this._dragElementMove),this._dragElementStart())}_dragElementStart(){this.isDragged=!0,this.dragElement.classList.add("is-dragged"),this.dragElement.dispatchEvent(new Event("drag-start",{bubbles:!1,cancelable:!0}))}_dragElementMove(t){t.preventDefault();let e=this.getTouchPoint(t),i=e.subtract(this.dragStartPoint),n=i.add(this.dragElementStartPos),r=this.children,s=this.dragIndex;for(let t=r.length-1;t>-1;t--){let e=r[t];n.y<e.component.rectangle.y+this.dragElementsMinHeight/2&&(s=t)}if(s!=this.dragIndex){this.provider.swap(this.dragIndex,s);let t=this.dragElementStartPos;this.dragElementStartPos=new a(this.dragElement.offsetLeft,this.dragElement.offsetTop);let n=this.dragElementStartPos.subtract(t);this.dragStartPoint=this.dragStartPoint.add(n),i=e.subtract(this.dragStartPoint),this.dragIndex=s}this.dragElement.style.transform="translate3d("+i.x+"px, "+i.y+"px, 0px)"}_dragEnd(t){this.isDragged=!1,this.dragElement.classList.remove("is-dragged"),this.dragElement.style.transform="",document.body.removeEventListener(h.mousemove,this._dragMove),document.body.removeEventListener(h.mousemove,this._dragElementMove),document.body.removeEventListener(h.mouseup,this._dragEnd),this.dragStartPoint=null,this.dragIndex=NaN,this.dragElement=null}}class nu extends Kh{constructor(t){super(t)}get scope(){return super.scope}set scope(t){super.scope=t;let e=this.element.textContent;if(e=e.split("{").join("${"),-1!=e.indexOf("${")){let t=t=>{this.model=t};this.expression=new Zh("`"+e+"`",this,t)}}get model(){return this.element.textContent}set model(t){t instanceof m&&(t=t.value),this.element.textContent=t}destroy(){return this.expression&&this.expression.destroy(),super.destroy()}}class ru extends Kh{constructor(t,e=".panel"){super(t),this.scrollingPanel=this.element.querySelector(e),this.wheelDirection=1,this._autoScrollFactor=0,this.infiniteLoop={x:!1,y:!1},this.loopPoint=new a(0,0),this.autoScrollSpeed=1,this.scrollTarget=new a,this.scroll=new a,this.speed=new a,this.momentum=new a,this.minScroll=new a,this.maxScroll=new a,this.size=new s,this.panelSize=new s,this.startTouchDiff=new a,this.springiness=0,this.inertia=1,this.elasticScrollInertia=.1,this.elasticScrollElasticity=new a(.15,0),this.momentumFriction=.965,this.momentumScaleLimit=.5,this.maxScrollReached={x:new v,y:new v},this.wheelHandler=this.wheelHandler.bind(this),this.mousedownHandler=this.mousedownHandler.bind(this),this.mousemoveHandler=this.mousemoveHandler.bind(this),this.mouseupHandler=this.mouseupHandler.bind(this),this.element.addEventListener(h.mousedown,this.mousedownHandler),this.autoScrollTimeoutDuration=4,this._startAutoScroll=this._startAutoScroll.bind(this),this.debug&&console.log("events",h)}set autoScroll(t){this._autoScroll=t,this._stopAutoScroll(),t&&this._startAutoScroll()}get autoScroll(){return this._autoScroll}get wheelEnabled(){return this._wheelEnabled}set wheelEnabled(t){this._wheelEnabled=t,t?this.addWheelHandler():this.removeWheelHandler()}addWheelHandler(){this.removeWheelHandler(),this.element.addEventListener("wheel",this.wheelHandler)}removeWheelHandler(){this.element.removeEventListener("wheel",this.wheelHandler)}wheelHandler(t){t.preventDefault(),this.stopTween(),this.maxScroll.y>0&&(this.scrollTarget.y+=t.deltaY*this.wheelDirection),this.dispatchEvent(new d(ru.WHEEL,t))}_startAutoScrollTimeout(){this._stopAutoScrollTimeout(),this.autoScroll&&(this._autoScrollTimeout=setTimeout(this._startAutoScroll,1e3*this.autoScrollTimeoutDuration))}_stopAutoScrollTimeout(){clearTimeout(this._autoScrollTimeout)}_startAutoScroll(){this.autoScroll&&(this.autoScrollTween=new E(0,2,[new T(this,"_autoScrollFactor",0,1,U.cubic.easeInOut)]),this.autoScrollTween.start())}_stopAutoScroll(){this._stopAutoScrollTimeout(),this.autoScrollTween&&this.autoScrollTween.stop(),this._autoScrollFactor=0}tweenTo(t=0,e=0){this.stopTween(),this.tweenPromise=Promise.resolve();let i=this.scroll.x,n=this.scroll.y;if(this.infiniteLoop.x&&this.panelSize.width>0){for(;i-t>this.panelSize.width/2;)i-=this.panelSize.width;for(;i-t<this.panelSize.width/-2;)i+=this.panelSize.width}if(this.infiniteLoop.y&&this.panelSize.height>0){for(;n-e>this.panelSize.height/2;)n-=this.panelSize.height;for(;n-e<this.panelSize.height/-2;)n+=this.panelSize.height}let r=[];return i!=t&&r.push(new T(this.scrollTarget,"x",i,t,U.cubic.easeOut,100)),n!=e&&r.push(new T(this.scrollTarget,"y",n,e,U.cubic.easeOut,100)),r.length>0&&(this.tween=new E(0,.75,r),this.tweenPromise=this.tween.start()),this.tweenPromise}stopTween(){this.tween&&this.tween.stop()}animationFrame(t){super.animationFrame(t);let e=this.windowSize.remScale||1;this.maxScroll.x>0&&(this.scrollTarget.x+=Math.round(e*this.autoScrollSpeed*this._autoScrollFactor*10)/10),this.maxScroll.y>0&&(this.scrollTarget.y+=Math.round(e*this.autoScrollSpeed*this._autoScrollFactor*10)/10);let i=this.scroll.clone();if(!this.isDragging&&!this.ignoreElasticScroll){this.scrollTarget.x=this.scrollTarget.x+this.momentum.x,this.scrollTarget.y=this.scrollTarget.y+this.momentum.y;let t={x:NaN,y:NaN};this.scrollTarget.x<this.minScroll.x&&(t.x=this.minScroll.x),this.scrollTarget.x>this.maxScroll.x&&(t.x=this.maxScroll.x),isNaN(t.x)||(this.scrollTarget.x+=(t.x-this.scrollTarget.x)*this.elasticScrollInertia),this.scrollTarget.y<this.minScroll.y&&(t.y=this.minScroll.y),this.scrollTarget.y>this.maxScroll.y&&(t.y=this.maxScroll.y),isNaN(t.y)||(this.scrollTarget.y+=(t.y-this.scrollTarget.y)*this.elasticScrollInertia),this.momentum.x*=this.momentumFriction,this.momentum.y*=this.momentumFriction;let e=this.size.width*this.elasticScrollElasticity.x,i=this.size.height*this.elasticScrollElasticity.y;this.scrollTarget.x<this.minScroll.x-e&&(this.momentum.x=0,this.scrollTarget.x=this.minScroll.x-e),this.scrollTarget.x>this.maxScroll.x+e&&(this.momentum.x=0,this.scrollTarget.x=this.maxScroll.x+e),this.scrollTarget.y<this.minScroll.y-i&&(this.momentum.y=0,this.scrollTarget.y=this.minScroll.y-i),this.scrollTarget.y>this.maxScroll.y+i&&(this.momentum.y=0,this.scrollTarget.y=this.maxScroll.y+i)}this.speed.x=this.speed.x*this.springiness+(this.scrollTarget.x-this.scroll.x)/this.inertia,this.scroll.x+=this.speed.x,this.speed.y=this.speed.y*this.springiness+(this.scrollTarget.y-this.scroll.y)/this.inertia,this.scroll.y+=this.speed.y,this.scrollDiff=this.scroll.subtract(i),this.maxScrollReached.x.value=this.scroll.x>=this.maxScroll.x,this.maxScrollReached.y.value=this.scroll.y>=this.maxScroll.y;let n=Math.round(10*this.scroll.x)/10,r=Math.round(10*this.scroll.y)/10;if(this.infiniteLoop.y){let t=0-this.loopPoint.y,e=this.panelSize.height-this.size.height+this.loopPoint.y;for(;r<t;)r+=this.panelSize.height;for(;r>e;)r-=this.panelSize.height}this.updateTransform(n,r)}updateTransform(t,e){this.scrollingPanel.style.transform="translate3d("+-t+"px, "+-e+"px, 0)"}windowResize(t){super.windowResize(t),this.updatePanelSize(),this.updateMaxScroll()}updatePanelSize(){this.size.width=this.rectangle.width,this.size.height=this.rectangle.height,this.panelSize.width=this.scrollingPanel.offsetWidth,this.panelSize.height=this.scrollingPanel.offsetHeight}updateMaxScroll(){this.maxScroll.x=Math.max(this.panelSize.width-this.size.width,0),this.maxScroll.y=Math.max(this.panelSize.height-this.size.height,0),this.infiniteLoop.x&&(this.minScroll.x=-1*Number.MAX_VALUE,this.maxScroll.x=Number.MAX_VALUE),this.infiniteLoop.y&&(this.minScroll.y=-1*Number.MAX_VALUE,this.maxScroll.y=Number.MAX_VALUE),this.element.setAttribute("data-scroll-x",this.maxScroll.x>0),this.element.setAttribute("data-scroll-y",this.maxScroll.y>0)}mousedownHandler(t){this.stopTween(),this.removeWheelHandler(),this.momentum.x=this.momentum.y=0,this.scrollTarget.copyFrom(this.scroll),"input"!==t.target.tagName.toLowerCase()&&(this.maxScroll.x<=0&&this.maxScroll.y<=0||(l||t.preventDefault(),this.autoScroll&&this._stopAutoScroll(),this.isDragging=!1,this.scrollStart=this.scroll.clone(),this.touchStart=this.getTouchPoint(t),this.touchPrevious=this.touchStart,window.addEventListener(h.mousemove,this.mousemoveHandler),window.addEventListener(h.mouseup,this.mouseupHandler)))}get isDragging(){return this._isDragging}set isDragging(t){this._isDragging=t,t?this.element.classList.add("drag"):this.element.classList.remove("drag")}static get DRAG_START(){return"dragStart"}static get DRAG_END(){return"dragEnd"}static get WHEEL(){return"wheel"}mousemoveHandler(t){t.preventDefault();let e=this.getTouchPoint(t),i=a.distance(e,this.touchStart);Math.abs(i)>2&&!this.isDragging&&(this.isDragging=!0,this.dispatchEvent(new Event(ru.DRAG_START))),this.momentum=this.touchPrevious.subtract(e),this.startTouchDiff=this.touchStart.subtract(e),this.scrollTarget=new a(this.scrollStart.x+this.startTouchDiff.x,this.scrollStart.y+this.startTouchDiff.y),this.touchPrevious=e;let n={x:NaN,y:NaN};this.scrollTarget.x<this.minScroll.x&&(n.x=this.minScroll.x),this.scrollTarget.x>this.maxScroll.x&&(n.x=this.maxScroll.x),isNaN(n.x)||(this.scrollTarget.x=n.x+(this.scrollTarget.x-n.x)*this.elasticScrollElasticity.x),this.scrollTarget.y<this.minScroll.y&&(n.y=this.minScroll.y),this.scrollTarget.y>this.maxScroll.y&&(n.y=this.maxScroll.y),isNaN(n.y)||(this.scrollTarget.y=n.y+(this.scrollTarget.y-n.y)*this.elasticScrollElasticity.y)}getMinimumAbsoluteMomentum(t,e){let i=t<0?-1:1;return t=Math.min(Math.abs(t),e)*i}mouseupHandler(t){window.removeEventListener(h.mousemove,this.mousemoveHandler),window.removeEventListener(h.mouseup,this.mouseupHandler),this.wheelEnabled&&this.addWheelHandler(),this.autoScroll&&this._startAutoScrollTimeout(),this.isDragging=!1;let e=this.size.width*this.momentumScaleLimit;this.momentum.x=this.getMinimumAbsoluteMomentum(this.momentum.x,e);let i=this.size.height*this.momentumScaleLimit;this.momentum.y=this.getMinimumAbsoluteMomentum(this.momentum.y,i),this.dispatchEvent(new Event(ru.DRAG_END))}}class au extends Kh{constructor(t){super(t),this.init()}init(){S.addEventListener(M.TICK,this.clockTick.bind(this)),S.start(),window.addEventListener("resize",this.resizeHandler.bind(this)),this.resizeHandler()}clockTick(t){let e={time:Math.round(S.time)/1e3};this.animationFrame(e)}resizeHandler(t){let e=this.getRect();e.orientation=e.width>e.height?"landscape":"portrait",e.orientation!=this.windowSize.orientation&&this.orientationChange(e.orientation),this.windowResize(e)}}R("ui-component",Kh),R("ui-button",$h),R("ui-list",iu),R("ui-input",class extends Kh{constructor(t){switch(super(t),this.inputHandler=this.inputHandler.bind(this),this.blurHandler=this.blurHandler.bind(this),this.element.type){case"radio":case"checkbox":this.inputtype="change";break;default:this.inputtype="input"}this.element.addEventListener("blur",this.blurHandler)}get inputtype(){return this._inputtype}set inputtype(t="input"){this.element.removeEventListener(this.inputtype,this.inputHandler),this._inputtype=t,this.element.addEventListener(this.inputtype,this.inputHandler)}get value(){return this.element.value}set value(t){this.element.value=t,this.debug&&console.log("UIInput.value",value)}get model(){return super.model}set model(t){switch(this.debug&&console.log("UIInput.model",t,"value",this.element.value),this.element.type){case"checkbox":this.element.checked=t;break;case"radio":let e=t==this.element.value;e!=this.element.checked&&(this.element.checked=e);break;default:this.element.value=t}super.model=t}inputHandler(t){let e;switch(this.element.type){case"checkbox":e=this.element.checked;break;case"radio":e=this.element.value,console.log("this.element.checked",this.element.checked);default:e=this.element.value}super.model=e}blurHandler(){if(!this.element.value){let t=this.element.getAttribute("placeholder");t&&(this.model=t)}}destroy(){return this.element.removeEventListener("blur",this.blurHandler),this.element.removeEventListener(this.inputtype,this.inputHandler),super.destroy()}}),R("ui-select",class extends eu{constructor(t){super(t),this._value=this.element.value,this.template='<option is="ui-text" value="{this.scope.data}">{this.scope.data}</option>',this.inputHandler=this.inputHandler.bind(this),this.element.addEventListener("input",this.inputHandler)}get provider(){return super.provider}set provider(t){let e=this.value;super.provider=t,this.value=e}get value(){return this._value}set value(t){this._value!=t&&(this._value=t,p.dispatch(this,"value",t)),this.element.value=t}_providerAdd(t){let e=this.value,i=super._providerAdd(t);return this.value=e,i}_providerRemove(t){let e=this.value,i=super._providerRemove(t);return this.value=e,i}inputHandler(t){this._value=this.element.value,p.dispatch(this,"value",this._value)}destroy(){this.element.removeEventListener("input",this.inputHandler),super.destroy()}}),R("ui-text",nu),R("ui-html",class extends nu{get model(){return this.element.innerHTML}set model(t){this.element.innerHTML=t}}),R("ui-number",class extends nu{constructor(t){super(t),this._currentValue=0,this.isRank=!1,this.roundDecimal=1,this.applyFormat=!1,this.easing=U.cubic.easeOut,this.updateDelay=0,this.updateDuration=0}get model(){return super.model}set model(t){t instanceof Data&&(t=t.value),isNaN(t)&&(t=0),this.updateDuration>0?(this.updateTween&&this.updateTween.stop(),this.updateTween=new E(this.updateDelay,this.updateDuration,[new T(this,"currentValue",this.currentValue,t,this.easing)]),this.updateTween.start()):super.model=t}get currentValue(){return this._currentValue}set currentValue(t){this._currentValue=t;let e=Object(r.h)(t,this.roundDecimal);this.updateCurrentValue(e)}updateCurrentValue(t){if(this.applyFormat){let e=t.toString().split(".");e.length>0&&(e[0]=Object(r.b)(e[0],","),t=e.length>0?e.join("."):e[0])}this.isRank&&(t+=Object(r.c)(t)),super.model=t}}),R("ui-scroll-pane",ru),R("ui-media",class extends Kh{constructor(t){super(t)}get model(){return this.element.src}set model(t){t instanceof Data&&(t=t.value),Yh(t)?this.element.src=t:this.element.removeAttribute("src")}reload(){let t=this.element.src;this.element.src=t}}),R("ui-toggle",class extends $h{clickDelayComplete(){return this.model.value=!this.model.value,super.clickDelayComplete(event)}});R("easing-graph-control-points",class extends iu{constructor(t){super(t),this.dragElementClass="shape"}_dragElementStart(){super._dragElementStart(),wu.model.actions.selectedItem.value.resetEasing()}_dragElementMove(t){t.preventDefault();let e=this.getTouchPoint(t).subtract(this.dragStartPoint).add(this.dragElementStartPos).clone();e.x=e.x/this.rectangle.width,e.y=1-e.y/this.rectangle.height,this.dragElement.component.model.x.value=e.x,this.dragElement.component.model.y.value=e.y}}),R("control-point-lines",class extends eu{constructor(t){super(t),this.updateLines=this.updateLines.bind(this)}get provider(){return super.provider}set provider(t){super.provider=t;for(let e in t){let i=t[e];for(let t in i){i[t].addEventListener(m.CHANGE,this.updateLines)}}}windowResize(t){super.windowResize(t),this.updateLines()}updateLines(){this.children.map(t=>{t.component.updateLine()})}}),R("control-point-line",class extends Kh{constructor(t){super(t),this.updateLine=this.updateLine.bind(this)}updateLine(){if(!this.model)return;let t=this.element.parentNode.component.rectangle,e=this.model[0].point;e.y=1-e.y;let i=this.model[1].point;i.y=1-i.y;let n=a.distance(e,i),s=Object(r.f)(180*a.getAngle(i,e)/Math.PI),o=new a(e.x*t.width,e.y*t.height),l=`translateX(${o.x}px) translateY(${o.y}px) rotate(${s}deg) scaleX(${n})`;this.element.style.transform=l}}),R("easing-graph-curve",class extends Kh{constructor(t){super(t)}get model(){return this._model}set model(t){this._model=t;let e=[],i="";for(let n=0;n<15;n++){let s=n/14,o=new a(s,t.easing.ease(s,0,1,1));e.push(o),i+=Object(r.g)(200*o.x)+","+Object(r.g)(200-200*o.y)+" "}this.element.setAttribute("points",i)}}),R("easing-graph-points",class extends Kh{constructor(t){super(t)}get model(){return super.model}set model(t){super.model=t,this.element.innerHTML="";let e=[];for(let i=0;i<15;i++){let n=i/14,r=new a(n,t.easing.ease(n,0,1,1));e.push(r)}for(let t=0;t<e.length;t++){let i=e[t],n=D("<point></point>");n.style.left=100*i.x+"%",n.style.top=100-100*i.y+"%",this.element.appendChild(n)}}});R("easing-graph",class extends Kh{constructor(t){super(t)}});R("action-tween",class extends Kh{constructor(t){super(t)}get scope(){return this._scope}set scope(t){super.scope=t,this.easing=D('<div class="sc-fields-list" is="ui-component">\n    <div class="sc-field">\n        <span class="sc-input" title="Duration">\n            <span class="sc-icon fas fa-clock"></span>\n            <span class="sc-input-group">\n                <span class="sc-input-unit" is="ui-text" data-unit="s">{this.scope.data.duration.value}</span>\n                <input type="number" step="0.25" min="0" placeholder="0" is="ui-input" bind:model="this.scope.data.duration.value" />\n            </span>\n        </span>\n        <span class="sc-input" title="Delay">\n            <span class="sc-icon fa fa-hourglass-half"></span>\n            <span class="sc-input-group">\n                <span class="sc-input-unit" is="ui-text" data-unit="s">{this.scope.data.delay.value}</span>\n                <input type="number" step="0.25" min="0" placeholder="0" is="ui-input" bind:model="this.scope.data.delay.value" />\n            </span>\n        </span>\n    </div>\n    <div class="sc-field-group" is="ui-component">\n        <div class="sc-field-column">\n            <div class="sc-field">\n                <div class="sc-input" title="Easing">\n                    <span class="sc-icon fa fa-bezier-curve"></span>\n                    <select is="ui-select" set:provider="this.scope.data.easingPresets" bind:value="this.scope.data.easingPresets.selectedItem.value"></select>\n                </div>\n            </div>\n            <div class="sc-field">\n                <span class="sc-input" title="Bezier point1.x">\n                    <span class="sc-icon">X</span>\n                    <input type="number" step="0.01" placeholder="0" is="ui-input" bind:model="this.scope.data.cubicBezierPoints.p1.x.value" />\n                </span>\n                <span class="sc-input" title="Bezier point1.y">\n                    <span class="sc-icon">Y</span>\n                    <input type="number" step="0.01" placeholder="0" is="ui-input" bind:model="this.scope.data.cubicBezierPoints.p1.y.value" />\n                </span>\n            </div>\n            <div class="sc-field" title="Point2.y">\n                <span class="sc-input" title="Bezier point2.x">\n                    <span class="sc-icon">X</span>\n                    <input type="number" step="0.01" placeholder="0" is="ui-input" bind:model="this.scope.data.cubicBezierPoints.p2.x.value" />\n                </span>\n                <span class="sc-input" title="Bezier point2.y">\n                    <span class="sc-icon">Y</span>\n                    <input type="number" step="0.01" placeholder="0" is="ui-input" bind:model="this.scope.data.cubicBezierPoints.p2.y.value" />\n                </span>\n            </div>\n        </div>\n        <div class="sc-field" is="ui-component">\n            <div is="ui-component" class="easing-graph-container">\n                <div is="easing-graph">\n                    \x3c!-- <svg class="curve" x="0px" y="0px" preserveAspectRatio="none" viewBox="0 0 200 200">\n                        <g>\n                            <polyline class="js" is="easing-graph-curve" set:model="this.scope.data.cubicBezierPoints.debugEasing" points=""></polyline>\n                        </g>\n                    </svg>\n                    <div class="points js" is="easing-graph-points" set:model="this.scope.data.cubicBezierPoints.debugEasing"></div> --\x3e\n                    <svg class="curve" x="0px" y="0px" preserveAspectRatio="none" viewBox="0 0 200 200">\n                        <g>\n                            <polyline is="easing-graph-curve" set:model="this.scope.data.cubicBezierPoints.value" points=""></polyline>\n                        </g>\n                    </svg>\n                    <div class="points" is="easing-graph-points" set:model="this.scope.data.cubicBezierPoints.value"></div>\n                    <div is="control-point-lines" is="ui-list" set:provider="this.scope.data.cubicBezierPoints.controlPointsLines">\n                        <template>\n                            <div is="control-point-line" set:model="this.scope.data"></div>\n                        </template>\n                    </div>\n                    <div class="control-points" is="easing-graph-control-points" set:provider="this.scope.data.cubicBezierPoints.controlPoints">\n                        <template>\n                            <div class="control-point" is="ui-component" set:model="this.scope.data" style="left:calc({this.scope.data.x.value} * 100%); top:calc(100% - {this.scope.data.y.value} * 100%)">\n                                <span class="shape">\n                                    <span class="shape-label" is="ui-text">{this.scope.index + 1}</span>\n                                </span>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n',t),this.appendChild(this.easing)}});R("sc-action-view",class extends Kh{constructor(t){super(t)}});class su extends Kh{constructor(t){super(t)}showDelayComplete(){let t=wu.view.scrollCapture.element.querySelector(".sc-tab[data-id='"+this.slug+"']");t&&t.classList.add("sc-title-tab");let e=super.showDelayComplete();return this.windowResize(this.windowSize),e}hideComplete(){let t=wu.view.scrollCapture.element.querySelector(".sc-tab[data-id='"+this.slug+"']");return t&&t.classList.remove("sc-title-tab"),super.hideComplete()}}R("sc-scenario",class extends su{constructor(t){super(t)}showDelayComplete(){let t=super.showDelayComplete();if(this.router.redirect("default",()=>this.path),!wu.model.actions.selectedItem.value){let t=wu.model.actions.length.value-1;wu.model.actions.selectedIndex.value=t}return wu.model.save(),t}hideDelayComplete(){return wu.model.actions.selectedItem.value=null,super.hideDelayComplete()}}),R("sc-video",class extends su{constructor(t){super(t),this.iframe=this.element.querySelector("iframe"),this.iframe.src=chrome.extension.getURL("video-recording.html"),chrome.runtime.onMessage.addListener((t,e,i)=>{switch(t.txt){case"scrollCaptureVideoHeight":this.iframe.style.height=t.height+"px"}})}showDelayComplete(){let t=super.showDelayComplete();return wu.model.sendMessage({txt:"scrollCaptureShowVideo"}),t}hideComplete(){return wu.model.sendMessage({txt:"scrollCaptureUnloadVideo"}),super.hideComplete()}}),R("sc-settings",class extends su{constructor(t){super(t)}showDelayComplete(){let t=super.showDelayComplete();return this.router.redirect("default",()=>this.path),wu.model.save(),t}});class ou extends Kh{constructor(t){super(t),this.position=null,this.dragStart=this.dragStart.bind(this),this.dragMove=this.dragMove.bind(this),this.dragEnd=this.dragEnd.bind(this),this.element.querySelector(".sc-window.sc-window-main > .sc-title").addEventListener(h.mousedown,this.dragStart),this.windowContent=this.element.querySelector(".sc-window-content[is='sc-window-content-main']").component,this.branches.scenario=this.windowContent.scenario,this.branches.video=this.windowContent.video,this.branches.settings=this.windowContent.settings}dragStart(t){t.preventDefault(),t.target.classList.contains("sc-drag-area")&&(this.startPosition=this.position.serialize(),this.startPoint=this.getTouchPoint(t),document.body.addEventListener(h.mousemove,this.dragMove),document.body.addEventListener(h.mouseup,this.dragEnd))}dragMove(t){let e=this.getTouchPoint(t),i=this.startPoint.subtract(e);this.position.x.value=this.startPosition.x+i.x,this.position.y.value=this.startPosition.y-i.y}dragEnd(t){document.body.removeEventListener(h.mousemove,this.dragMove),document.body.removeEventListener(h.mouseup,this.dragEnd),wu.model.save()}}function lu(t,e="GET",i=null,n=null,r=null,a=!1,s=15e3,o=5){let l=new Promise((function(c,h){let u,d=0,p=()=>{u=new XMLHttpRequest,r&&(u.responseType=r),u.onload=t=>{l.progress=1,200==u.status?c(u):h(t)},u.onprogress=t=>{t.lengthComputable&&(l.progress=t.loaded/t.total)},u.onerror=t=>{l.progress=1,h(t)},u.onreadystatechange=t=>{};let m=t;if(a){let t=Math.round(1e9*Math.random());-1==m.indexOf("?")?m+="?":m+="&",m+="nocache="+t.toString()}if(u.open(e,m,!0),u.ontimeout=t=>{d++,d>o?(l.progress=1,h(event)):p()},u.timeout=s,n)for(let t=0;t<n.length;t++){let e=n[t];u.setRequestHeader(e[0],e[1])}i?u.send(i):u.send()};p()}));return l.progress=0,l}function cu(t,e,i){let n=lu(t,"GET",null,null,null,i),r=n.then((function(t){let e=document.createElement("style");return e.type="text/css",e.styleSheet?e.styleSheet.cssText=t.response:e.appendChild(document.createTextNode(t.response)),document.querySelector("head").appendChild(e),e}));return Object.defineProperty(r,"progress",{get:function(){return n.progress}}),r}ou.template='<div class="sc-default" is="scroll-capture" data-theme-light="{this.scope.settings.isColorThemeLight.value}" set:position="this.scope.settings.position" style="right:{this.scope.settings.position.x.value}px; top:{this.scope.settings.position.y.value}px;">\n\t<ul is="ui-list" set:provider="this.scope.actions">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class="test-radio" type="radio" is="ui-input" value="{this.scope.data.name.value}" name="options1" bind:model="this.scope.rootScope.selectedAction" />\n\t\t\t\t<span is="ui-text">{this.scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<ul is="ui-list" set:provider="this.scope.actions">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class="test-radio" type="radio" is="ui-component" value="{this.scope.data.name.value}" name="options2" set:checked="(this.scope.rootScope.selectedAction == this.element.value);" on:change="this.scope.rootScope.selectedAction = this.element.value" />\n\t\t\t\t<span is="ui-text">{this.scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<select is="ui-select" set:provider="this.scope.actions" bind:value="this.scope.selectedAction">\n\t\t<template>\n\t\t\t<option is="ui-text" value="{this.scope.data.name.value}">{this.scope.data.name.value}</option>\n\t\t</template>\n\t</select>\n\t<div class="sc-window sc-window-main" is="ui-component">\n\t\t<div class="sc-title">\n\t\t\t<span class="sc-tabs">\n\t\t\t\t<span class="sc-drag-area"></span>\n\t\t\t\t<span class="sc-tab sc-title-tab">\n\t\t\t\t\t<span class="sc-drag-area"></span>\n\t\t\t\t\t<span class="sc-label">Scroll Capture</span>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t<span class="sc-tabs">\n\t\t\t\t<span class="sc-tab">\n\t\t\t\t\t<span class="sc-drag-area"></span>\n\t\t\t\t\t<button is="router-button" data-path="closed" title="Close">\n\t\t\t\t\t\t<span class="sc-icon fas fa-times-circle"></span>\n\t\t\t\t\t</button>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t</div>\n\t\t<div class="sc-window-content" is="ui-component">\n\t\t\t<div class="sc-fields" is="ui-component">\n\t\t\t\t<div is="ui-component">\n\t\t\t\t\t<div class="sc-window sc-window-sections" is="ui-component">\n\t\t\t\t\t\t<div class="sc-title">\n\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t<span class="sc-tab" data-id="scenario">\n\t\t\t\t\t\t\t\t\t<button is="router-button" data-path="scroll-capture/scenario" title="Timeline">\n\t\t\t\t\t\t\t\t\t\t\x3c!-- <span class="sc-icon fas fa-sliders-h"></span> --\x3e\n\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-stream"></span>\n\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Timeline</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\x3c!-- <span class="sc-tab" data-id="play" is="ui-component">\n\t\t\t\t\t\t\t\t\t<button is="router-button" data-path="play" title="Play">\n\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-play"></span>\n\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Play</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</span> --\x3e\n\t\t\t\t\t\t\t\t<span class="sc-tab" data-id="video" is="ui-component">\n\t\t\t\t\t\t\t\t\t<button is="router-button" data-path="record" title="Capture">\n\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-video"></span>\n\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Capture</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class="sc-tabs" is="ui-component">\n\t\t\t\t\t\t\t\t<span class="sc-tab" data-id="settings">\n\t\t\t\t\t\t\t\t\t<button is="router-button" data-path="scroll-capture/settings" title="Settings">\n\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-cogs"></span>\n\t\t\t\t\t\t\t\t\t\t\x3c!-- <span class="sc-label">Settings</span> --\x3e\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="sc-window-content" is="sc-window-content-main" is="ui-component">\n\n\t\t\t\t\t\t\t<div class="sc-section sc-fields" is="sc-scenario">\n\t\t\t\t\t\t\t\t<div is="sc-actions-view" data-actions-length="{this.scope.actions.length.value}" set:provider="this.scope.actions">\n\t\t\t\t\t\t\t\t\t<template>\n\t\t\t\t\t\t\t\t\t\t<div class="sc-window ui-list-element" is="sc-action-view" data-type="{this.scope.data.type}" set:model="this.scope.data" data-selected="{this.scope.data.isSelectedItem.value}">\n\t\t\t\t\t\t\t\t\t\t\t<div class="sc-title">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-drag-area ui-list-drag-area"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab sc-title-tab">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="ui-list-drag-area"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab-wrapper">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon {this.scope.data.icon.value}" is="ui-component"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-label">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input size="{this.scope.data.name.length.value}" is="ui-input" bind:model="this.scope.data.name.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab" data-visible="{this.scope.data.isCaptureable.value}" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="ui-list-drag-area"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button class="sc-set-button" is="ui-button" data-is-capturing="{this.scope.data.isCapturing.value}" set:model="this.scope.data" on:click="this.model.reCapture()" title="Set">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-bullseye"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab" data-visible="{this.scope.data.isTestable.value}" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="ui-list-drag-area"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button class="sc-test-button" is="ui-button" set:model="this.scope.data" on:click="this.model.play()" data-is-playing="{this.scope.data.isPlaying.value}" title="Play">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-play-circle"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="ui-list-drag-area"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button class="sc-trash-button" is="ui-button" set:model="this.scope.data" on:click="this.scope.rootScope.actions.removeAction(this.model);" title="Delete">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-trash-alt"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class="sc-window-content" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-fields" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action-fields" is="ui-list" set:provider="this.scope.data.array">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template data-type="ActionScroll">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action sc-fields-list" is="action-tween">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="ScrollLeft">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">X</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.unitX.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" placeholder="0" min="0" is="ui-input" bind:model="this.scope.data.unitX.value" on:focus="this.scope.data.doScroll()" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="ScrollTop">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">Y</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.unitY.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" placeholder="0" min="0" is="ui-input" bind:model="this.scope.data.unitY.value" on:focus="this.scope.data.doScroll()" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="Target Selector">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon far fa-dot-circle"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="text" placeholder="window" is="ui-input" bind:model="this.scope.data.target.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template data-type="ActionSwipe">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action sc-fields-list" is="action-tween">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-points-list sc-field-column" is="ui-list" set:provider="this.scope.data.points">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="PageX">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">X</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.x.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" min="0" placeholder="0" step="1" is="ui-input" bind:model="this.scope.data.x.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="PageY">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">Y</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.y.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" min="0" placeholder="0" step="1" is="ui-input" bind:model="this.scope.data.y.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template data-type="ActionMouseEvent">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action sc-fields-list">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">X</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.x.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="1" min="0" placeholder="0" title="PageX" is="ui-input" bind:model="this.scope.data.x.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">Y</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.data.y.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="1" min="0" placeholder="0" title="PageY" is="ui-input" bind:model="this.scope.data.y.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input sc-select" title="MouseEvent Type">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-mouse-pointer"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is="ui-select" set:provider="this.scope.data.eventTypes" bind:value="this.scope.data.eventTypes.selectedItem.value"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="Delay">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-hourglass-half"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="s">{this.scope.data.delay.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="0.25" min="0" placeholder="0" is="ui-input" bind:model="this.scope.data.delay.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template data-type="ActionWait">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action sc-fields-list">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="Duration">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-clock"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="s">{this.scope.data.delay.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="0.25" min="0" placeholder="0" is="ui-input" bind:model="this.scope.data.delay.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-space"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template data-type="ActionEval">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-action sc-fields-list">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<textarea rows="5" is="ui-input" set:model="this.scope.data.code"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input" title="Delay">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-hourglass-half"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="s">{this.scope.data.delay.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="0.25" min="0" placeholder="0" is="ui-input" bind:model="this.scope.data.delay.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-space"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="sc-action-buttons">\n\t\t\t\t\t\t\t\t\t<div class="sc-buttons" is="ui-list" set:provider="this.scope.actions.types">\n\t\t\t\t\t\t\t\t\t\t<template>\n\t\t\t\t\t\t\t\t\t\t\t<button class="sc-action-button" data-type="{this.scope.data.type}" set:model="this.scope.data" is="ui-button" title="{this.scope.data.description.value}" on:click="this.scope.rootScope.actions.cloneAction(this.model);">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon {this.scope.data.icon.value}" is="ui-component"></span>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class="sc-buttons">\n\t\t\t\t\t\t\t\t\t\t<button is="ui-button" on:click="this.scope.clearActions()" title="Delete all">\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-trash-alt"></span>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div class="sc-section sc-fields" is="sc-video">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<iframe></iframe>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div class="sc-section sc-fields" is="sc-settings">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div class="sc-window">\n\t\t\t\t\t\t\t\t\t\t<div class="sc-title">\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab sc-title-tab">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-adjust"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Color theme</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs"></span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class="sc-window-content" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t<div class="sc-fields" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\x3c!-- <span class="sc-label">Theme:</span> --\x3e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\x3c!-- <div class="sc-color-themes" is="ui-list" set:provider="this.scope.settings.colorThemes">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label class="sc-radio">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="radio" name="color-theme" value="{this.scope.data}" is="ui-input" set:model="this.scope.parentScope.settings.colorThemes.selectedItem" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-check"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span is="ui-text">{this.scope.data}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div> --\x3e\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-input sc-select">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas" data-theme="{this.scope.settings.colorThemes.selectedItem.value}" is="ui-component"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is="ui-select" set:provider="this.scope.settings.colorThemes" bind:value="this.scope.settings.colorThemes.selectedItem.value"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-space"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div class="sc-window">\n\t\t\t\t\t\t\t\t\t\t<div class="sc-title">\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab sc-title-tab">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon far fa-window-maximize"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Window size</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs"></span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class="sc-window-content" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t<div class="sc-fields" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">W</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.settings.windowSize.x.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="1" min="375" placeholder="375" title="PageX" is="ui-input" bind:model="this.scope.settings.windowSize.x.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon">H</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="px">{this.scope.settings.windowSize.y.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="number" step="1" min="375" placeholder="375" title="PageY" is="ui-input" bind:model="this.scope.settings.windowSize.y.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div class="sc-window">\n\t\t\t\t\t\t\t\t\t\t<div class="sc-title">\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tab sc-title-tab">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-film"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-label">Codecs</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="sc-tabs"></span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class="sc-window-content" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t<div class="sc-fields" is="ui-component">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-input sc-select">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-video"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is="ui-select" set:provider="this.scope.settings.videoCodecs" bind:value="this.scope.settings.videoCodecs.selectedItem.value"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="range" min="1" max="8" step="1" title="Bitrate" is="ui-input" bind:model="this.scope.settings.videoBitsPerSecond.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-space">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="Mbps">{this.scope.settings.videoBitsPerSecond.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span is="ui-text">{this.scope.settings.videoBitsPerSecond.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field-group">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-input sc-select">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-icon fas fa-volume-up"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is="ui-select" set:provider="this.scope.settings.audioCodecs" bind:value="this.scope.settings.audioCodecs.selectedItem.value"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-field">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type="range" min="16" max="128" step="16" is="ui-input" bind:model="this.scope.settings.audioBitsPerSecond.value" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class="sc-space">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="sc-input-unit" is="ui-text" data-unit="kbps">{this.scope.settings.audioBitsPerSecond.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span is="ui-text">{this.scope.settings.audioBitsPerSecond.value}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<sc-credits><a href="http://www.patrickmatte.com" target="_blank"></a></sc-credits>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>',R("sc-actions-view",class extends iu{constructor(t){super(t),this.selectItemOnMouseDown=!0}_providerAdd(t){let e=super._providerAdd(t),i=this.getElementByModel(e[0]);return this.scrollToElement(i,.5),e}_dragEnd(t){let e=this.isDragged,i=super._dragEnd(t);return e&&wu.model.save(),i}}),R("sc-window-content-main",class extends Kh{constructor(t){super(t),this.scenario=this.element.querySelector("[is='sc-scenario']").component,this.video=this.element.querySelector("[is='sc-video']").component,this.settings=this.element.querySelector("[is='sc-settings']").component}});class hu extends $h{constructor(t){super(t),this.pushState=!0}clickHandler(t){t.preventDefault(),super.clickHandler(t)}clickDelayComplete(t){super.clickDelayComplete(t);let e=this.element.href;if(e){let t=e.substr(this.router.absoluteBasePath.length);this.pushState&&this.router.pushState(t)}else this.router.location=this.element.getAttribute("data-path")}}class uu extends au{constructor(t){super(document.body),this.scope=wu.model,this.scrollCapture=D(ou.template,wu.model).component,this.appendChild(this.scrollCapture.element),wu.model.showCaptureIcon.addEventListener(m.CHANGE,t=>{this.element.setAttribute("is-capturing",t.data)})}load(){let t=cu(chrome.extension.getURL("content.css")),e=cu(chrome.extension.getURL("fontawesome.css"));return Promise.all([t,e])}}R("router-button",class extends hu{get router(){return wu.controller.router}}),R("scroll-capture",ou);class du{constructor(t=[]){this.assets=t}get progress(){for(var t=0,e=this.assets.length,i=0;i<this.assets.length;i++){var n=this.assets[i];n.hasOwnProperty("progress")?t+=n.progress:e--}return e>0?t/=e:t=1,t}push(t){return this.assets.push(t),t}}class pu extends EventTarget{constructor(t){super(),this.root=t,this._location=null,this.goToAllLocations=!1,this.interruptTransitions=!0,this._inTransition=!1,this._interruptingLocations=[],this.branches=new x,this.redirects={},this.parameters={},this.show=new mu(this,"show",this._showComplete.bind(this)),this.show.tasks=[new fu("load",!0),new fu("show",!1)],this.hide=new mu(this,"hide",this._hideComplete.bind(this)),this.hide.tasks=[new fu("hide",!1)]}static get INTERRUPT(){return"interrupt"}static get CHANGE(){return"change"}static get COMPLETE(){return"complete"}get root(){return this._root}set root(t){this._root=t}get location(){return this._location}set location(t){if(this._debug&&console.log("set location",t),-1!=t.indexOf("?")&&(t=t.split("?")[0]),this._inTransition)if(this.goToAllLocations){this._interruptingLocations[this._interruptingLocations.length-1]!=t&&this._interruptingLocations.push(t)}else this._interruptingLocations=[t];else this.changeTheLocation(t)}changeTheLocation(t){let e=t.split("&");this.parameters={};for(let t=0;t<e.length;t++){let i=e[t],n=i.indexOf("=");if(-1!=n){let t=[];t[0]=i.substr(0,n),t[1]=i.substr(n+1),this.parameters[t[0]]=t[1]}}let i=e[0],n=i.charAt(i.length-1);for(;"/"==n;)i=i.substr(0,i.length-1),n=i.charAt(i.length-1);if(i=this._applyRedirect(i),i!=this._location){this._inTransition=!0,this._location=i;let t=new d(pu.CHANGE,{location:i});this.dispatchEvent(t),this._nextLocation="root",""!=i&&(this._nextLocation+="/"+i),this._debug&&console.log("_nextLocation",this._nextLocation),w(0).then(()=>{this._startTransitions()})}else this._showComplete()}_applyRedirect(t){let e,i=this.redirects[t];return i&&(e=i()),e=e||t,e!=t&&(e=this._applyRedirect(e)),e}_startTransitions(){let t=this.branches.value.map(t=>t.slug),e=this._nextLocation.split("/"),i=-1;for(let n=0;n<t.length;n++){t.slice(0,n+1).join("/")==e.slice(0,n+1).join("/")&&(i=n)}this.hide.branches=this.branches.splice(i+1).reverse();let n=this;this.branches.length>0&&(n=this.branches.item(this.branches.length-1));let r=[];for(let t=i+1;t<e.length;t++){let i=e[t],a=this.getBranchFromSlug(n,i);r.push(a),n=a}this.checkForDefaultBranches(n,r),this.show.branches=r,this.hide.start()}checkForDefaultBranches(t,e){if(t&&t.defaultChild){let i=t.defaultChild,n=this.getBranchFromSlug(t,i);n&&(e.push(n),this.checkForDefaultBranches(n,e))}}getBranchFromSlug(t,e){let i;if(e){if(!t.getBranch)throw new Error("The branch '"+t.slug+"' doesn't implement the getBranch method for '"+e+"'");i=t.getBranch(e),i.router=this,i.parent=t,i.root=t.root,i.slug=e;let n="";n=t==this?"":"root"==t.slug?e:t.path+"/"+e,i.path=n}return i}_hideComplete(t){let e=!1;if(this.interruptTransitions&&this._interruptingLocations.lenth>0){let t=this._interruptingLocations[0];null==t&&null==t||(e=!0)}if(e){this._inTransition=!1;let t=new d(pu.INTERRUPT,{location:this.location});this.dispatchEvent(t),this.changeTheLocation(this._interruptingLocations.shift())}else this.branches.push.apply(this.branches,this.show.branches),this.show.start()}_showComplete(t){this._inTransition=!1;let e=new d(pu.COMPLETE,{location:this.location});this.dispatchEvent(e);let i=this._interruptingLocations[0];null==i&&null==i||this.changeTheLocation(this._interruptingLocations.shift())}getBranch(t){return this.root}redirect(t,e){e?this.redirects[t]=e:delete this.redirects[t]}destroy(){this._interruptingLocations=null,this.branches=null,this.redirects=null,this.root=null,this.popStateBind=null}toString(){return"[Router location="+this.location+"]"}}class mu{constructor(t,e,i){this.router=t,this.name=e,this.onComplete=i,this.branches=[],this.tasks=[]}start(){if(this.branches.length>0){let t;for(let e=this.tasks.length-1;e>-1;e--){let i=this.tasks[e];i.router=this.router,i.branches=this.branches.slice(),i.onComplete=t?t.start.bind(t):this.tasksComplete.bind(this),t=i}this.tasks[0].start()}else this.tasksComplete()}tasksComplete(){this.onComplete()}}class fu{constructor(t,e){this.name=t,this.preload=e,this.branches=[],this.router=null,this.checkProgressBind=this.checkProgress.bind(this)}start(){if(this.preloader=null,this.assets=[],this.branches.length>0)if(this.preload){for(let t=0;t<this.branches.length;t++)this.assets.push(new du);if(this.assetList=new du(this.assets.slice()),this.preloader=this.router.preloader,this.preloader){this.isPreloading=!0,this.checkProgress();let t=this.preloader.show();t?t.then(t=>{this.startNextBranch()}):this.startNextBranch()}else this.startNextBranch()}else this.startNextBranch();else this.allComplete()}checkProgress(){this.assetList&&(this.preloader.progress=this.assetList.progress),this.isPreloading&&(this.animationFrame=requestAnimationFrame(this.checkProgressBind))}startNextBranch(){this.branch=this.branches.shift();let t=this.branch[this.name];if(t){t=t.bind(this.branch);let e=t(this.assets.shift());e?e.then(this.branchComplete.bind(this)):this.branchComplete()}else this.branchComplete()}branchComplete(){if(this.branches.length>0)this.startNextBranch();else if(this.preloader){this.isPreloading=!1;let t=this.preloader.hide();t?t.then(this.allComplete.bind(this)):this.allComplete()}else this.allComplete()}allComplete(){this.assets=null,this.assetList=null,this.branches=null,function(t=1){t=Math.max(1,Math.round(t));let e=0;return new Promise((function(i,n){window.requestAnimationFrame((function n(){e++,e>=t?i():window.requestAnimationFrame(n)}))}))}(1).then(()=>{this.onComplete()})}}class vu extends qh{constructor(){super(),this.isPlaying=!1,this.startLocation="scroll-capture/scenario"}show(){return this.isPlaying=!0,this.router.redirect("default",()=>this.startLocation),wu.model.save(),wu.model.actions.selectedIndex.value=0,w(250).then(()=>this.triggerAction())}triggerAction(){if(!this.isPlaying)return;let t=wu.model.actions.selectedItem.value;if(t){t.triggerDelay().then(()=>this.actionComplete())}else this.allComplete()}actionComplete(){this.isPlaying&&(wu.model.actions.selectedIndex.value<wu.model.actions.value.length-1?(wu.model.actions.selectedIndex.value=wu.model.actions.selectedIndex.value+1,this.triggerAction()):this.allComplete())}allComplete(){this.isPlaying&&(this.isPlaying=!1,this.router.location=this.startLocation)}hide(){return this.isPlaying=!1,super.hide()}}class gu extends vu{constructor(){super(),this.startLocation="scroll-capture/video"}show(){return Object(n.a)("record-actions-length",wu.model.actions.value.length.toString()),wu.model.actions.value.length<1&&(this.timeout=new Gh,this.timeout.delay.value=300,wu.model.actions.addAction(this.timeout)),w(250).then(()=>(wu.model.sendMessage({txt:"scrollCaptureStartRecording"}),super.show()))}allComplete(){this.isPlaying&&(this.stopTheRecording(),super.allComplete())}stopTheRecording(){wu.model.sendMessage({txt:"scrollCaptureStopRecording"}),wu.model.sendMessage({txt:"scrollCaptureUpdateVideo"})}hide(){return window.removeEventListener("onbeforeunload",this.onBeforeUnloadHandler),this.isPlaying&&this.stopTheRecording(),this.timeout&&(wu.model.actions.removeAction(this.timeout),this.timeout=null),super.hide()}}class yu extends qh{constructor(){super()}show(){return wu.model.save(),super.show()}}class xu extends qh{constructor(){super(),this.trackRouterLocation=this.trackRouterLocation.bind(this),this.beforeUnloadHandler=this.beforeUnloadHandler.bind(this),this.router=new pu(this),this.router.redirect("default",()=>"scroll-capture/scenario"),this.router.addEventListener(pu.CHANGE,this.trackRouterLocation),this.branches={"scroll-capture":wu.view.scrollCapture,play:new vu,record:new gu,closed:new yu},window.addEventListener("beforeunload",this.beforeUnloadHandler)}trackRouterLocation(){Object(n.b)("/"+this.router.location)}beforeUnloadHandler(t){this.router.removeEventListener(pu.CHANGE,this.trackRouterLocation),this.router.location=""}load(){let t=wu.view.load(),e=new Promise((t,e)=>{chrome.storage.local.get(["json"],e=>{t(e)})});return Promise.all([e,t]).then(t=>{if(t[0]){let e=t[0].json;if(e){let t=JSON.parse(e);wu.model.actions.deserialize(t.actions),wu.model.settings.deserialize(t.settings)}}})}show(){Object(n.a)("ScrollCaptureStart",window.location.origin+window.location.pathname)}hide(){}}let wu;class bu{constructor(){wu=this,this.model=new Wh,this.view=new uu,this.controller=new xu}}window.scrollCaptureApp||(window.scrollCaptureApp=new bu),wu=window.scrollCaptureApp,wu.controller.router.location="default"},function(t,e,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,